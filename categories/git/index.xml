<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Git - 分类 - yejian's blog</title><link>https://jianye0428.github.io/categories/git/</link><description>Git - 分类 - yejian's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>18817571704@163.com (Jian YE)</managingEditor><webMaster>18817571704@163.com (Jian YE)</webMaster><lastBuildDate>Fri, 02 Feb 2024 09:32:18 +0800</lastBuildDate><atom:link href="https://jianye0428.github.io/categories/git/" rel="self" type="application/rss+xml"/><item><title>Git 命令查询</title><link>https://jianye0428.github.io/posts/commandsheet/</link><pubDate>Fri, 02 Feb 2024 09:32:18 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/commandsheet/</guid><description><![CDATA[<h1 id="git-常用命令汇总">Git 常用命令汇总</h1>
<h2 id="常规操作">常规操作</h2>
<ul>
<li><code>git push origin test</code> 推送本地分支到远程仓库</li>
<li><code>git rm -r --cached 文件/文件夹名字</code> 取消文件被版本控制</li>
<li><code>git reflog</code> 获取执行过的命令</li>
<li><code>git log --graph</code> 查看分支合并图</li>
<li><code>git merge --no-ff -m '合并描述'</code> 分支名 不使用<code>Fast forward</code>方式合并，采用这种方式合并可以看到合并记录</li>
<li><code>git check-ignore -v 文件名</code> 查看忽略规则</li>
<li><code>git add -f 文件名</code> 强制将文件提交</li>
</ul>
<h3 id="git-创建项目仓库">Git 创建项目仓库</h3>
<ul>
<li><code>git init</code> 初始化</li>
<li><code>git remote add origin url</code> 关联远程仓库</li>
<li><code>git pull</code></li>
<li><code>git fetch</code> 获取远程仓库中所有的分支到本地</li>
</ul>
<h3 id="忽略已加入到版本库中的文件">忽略已加入到版本库中的文件</h3>
<ul>
<li><code>git update-index --assume-unchanged file</code> 忽略单个文件</li>
<li><code>git rm -r --cached 文件/文件夹名字</code> (. 忽略全部文件)</li>
</ul>
<h3 id="取消忽略文件">取消忽略文件</h3>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git update-index --no-assume-unchanged file</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="拉取上传免密码">拉取、上传免密码</h3>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git config --global credential.helper store</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="分支操作">分支操作</h2>
<ul>
<li><code>git branch</code> 创建分支</li>
<li><code>git branch -b</code> 创建并切换到新建的分支上</li>
<li><code>git checkout</code> 切换分支</li>
<li><code>git branch</code> 查看分支列表</li>
<li><code>git branch -v</code> 查看所有分支的最后一次操作</li>
<li><code>git branch -vv</code> 查看当前分支</li>
<li><code>git branch -b 分支名 origin/分支名</code> 创建远程分支到本地</li>
<li><code>git branch --merged</code> 查看别的分支和当前分支合并过的分支</li>
<li><code>git branch --no-merged</code> 查看未与当前分支合并的分支</li>
<li><code>git branch -d 分支名</code> 删除本地分支</li>
<li><code>git branch -D 分支名</code> 强行删除分支</li>
<li><code>git push origin --delete 分支名</code> 删除远程仓库分支</li>
<li><code>git merge 分支名</code> 合并分支到当前分支上</li>
<li><code>git push -u &lt;remote&gt; &lt;local_branch&gt;</code> 关联本地分支到远程分支</li>
<li><code>git push --set-upstream &lt;remote&gt; &lt;local_branch&gt;</code> 关联本地分支到远程分支</li>
</ul>
<h2 id="暂存操作">暂存操作</h2>
<ul>
<li><code>git stash</code> 暂存当前修改</li>
<li><code>git stash apply</code> 恢复最近的一次暂存</li>
<li><code>git stash pop</code> 恢复暂存并删除暂存记录</li>
<li><code>git stash list</code> 查看暂存列表</li>
<li><code>git stash drop 暂存名</code>(例：stash@{0}) 移除某次暂存</li>
<li><code>git stash clear</code> 清除暂存</li>
</ul>
<h2 id="回退操作">回退操作</h2>
<ul>
<li><code>git reset --hard HEAD^</code> 回退到上一个版本</li>
<li><code>git reset --hard commitId</code> 回退到某个版本</li>
<li><code>git checkout -- file</code>撤销修改的文件(如果文件加入到了暂存区，则回退到暂存区的，如果文件加入到了版本库，则还原至加入版本库之后的状态)</li>
<li><code>git reset HEAD file</code> 撤回暂存区的文件修改到工作区</li>
</ul>
<h2 id="标签操作">标签操作</h2>
<ul>
<li><code>git tag 标签名</code> 添加标签(默认对当前版本)</li>
<li><code>git tag 标签名 commitId</code> 对某一提交记录打标签</li>
<li><code>git tag -a 标签名 -m '描述'</code> 创建新标签并增加备注</li>
<li><code>git tag</code> 列出所有标签列表</li>
<li><code>git show 标签名</code> 查看标签信息</li>
<li><code>git tag -d 标签名</code> 删除本地标签</li>
<li><code>git push origin 标签名</code> 推送标签到远程仓库</li>
<li><code>git push origin --tags</code> 推送所有标签到远程仓库</li>
<li><code>git push origin :refs/tags/标签名</code> 从远程仓库中删除标签</li>
</ul>
<h2 id="远程仓库">远程仓库</h2>
<ul>
<li><code>git remote -v</code>查看远程仓库地址</li>
<li><code>git remote show origin</code>查看远程仓库详情信息</li>
</ul>
<h2 id="查看某个-commit-提交属于哪个分支">查看某个 commit 提交属于哪个分支</h2>
<ul>
<li><code>git branch -l --contains &lt;commit_id&gt;</code> 本地分支</li>
<li><code>git branch -r --contains &lt;commit_id&gt;</code> 远程分支</li>
<li><code>git branch --all --contains &lt;commit_id&gt;</code> 所有分支</li>
</ul>
]]></description></item><item><title>Git 核心知识点总结</title><link>https://jianye0428.github.io/posts/gitnotes2/</link><pubDate>Fri, 02 Feb 2024 08:13:18 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/gitnotes2/</guid><description><![CDATA[<h1 id="git核心知识总结">Git核心知识总结</h1>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">Git 总览</div>
</center>
<br>
<h2 id="1什么是git">1.什么是Git</h2>
<p>在了解Git之前，我们先了解一下版本控制这个概念。</p>
<h3 id="11-什么是版本控制">1.1 什么是版本控制</h3>
<p>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 除了项目源代码，你可以对任何类型的文件进行版本控制。</p>
<h3 id="12-为什么需要版本控制">1.2 为什么需要版本控制</h3>
<p>有了它你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态，你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致项目问题出现的原因，又是谁在何时报告了某个功能缺陷等等。</p>
<h3 id="13-本地版本控制系统">1.3 本地版本控制系统</h3>
<p>许多人习惯用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。 这么做唯一的好处就是简单，但是特别容易犯错。 有时候会混淆所在的工作目录，一不小心会写错文件或者覆盖意想外的文件。</p>
<p>为了解决这个问题，人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异。</p>
<p>Git是当前最先进、最主流的分布式版本控制系统，免费、开源！核心能力就是版本控制。再具体一点，就是面向代码文件的版本控制，代码的任何修改历史都会被记录管理起来，意味着可以恢复到到以前的任意时刻状态。支持跨区域多人协作编辑，是团队项目开发的必备基础，所以Git也就成了程序员的必备技能。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">本地版本控制系统</div>
</center>
<br>
<h2 id="2git的来源">2.Git的来源</h2>
<p>Git是一种分布式版本控制系统，它的设计和开发最初由林纳斯·托瓦兹（Linus Torvalds）领导，他也是Linux操作系统的创始人。Git的开发始于2005年，其背景和初始目的与Linux开发社区的需求密切相关。</p>
<h3 id="21-背景和初始动机">2.1 背景和初始动机</h3>
<p>在Git之前，Linux内核的开发使用的是一个名为BitKeeper的商业版本控制系统。这个系统对Linux社区是免费的，但在2005年，由于一些争议和许可问题，Linux社区失去了对BitKeeper的免费许可。这促使托瓦兹寻找一个新的工具来管理Linux内核的开发。</p>
<p>托瓦兹对版本控制系统有几个明确的需求和目标：</p>
<ol>
<li><strong>「性能」</strong>：由于Linux内核的庞大和复杂性，性能成为一个关键因素。Git需要高效地处理大型项目。</li>
<li><strong>「分布式架构」</strong>：Git被设计为分布式系统，意味着每个开发者的计算机上都有整个代码库的完整历史记录，这样可以减少对中央服务器的依赖。</li>
<li><strong>「数据完整性」</strong>：Git强调数据的完整性。它通过对文件内容和目录结构使用SHA-1哈希来确保代码历史不被篡改。</li>
<li><strong>「简单的分支和合并」</strong>：在Linux开发中，分支和合并操作非常频繁。Git被设计为使这些操作尽可能简单和高效。</li>
</ol>
<h3 id="22-git的发展">2.2 Git的发展</h3>
<p>Git最初是作为一个命令行工具发布的，但随着时间的推移，围绕Git开发了大量的图形界面工具和增强功能，使其更加用户友好。Git迅速在开源社区中获得了广泛的接受，并逐渐成为世界上最流行的版本控制系统。</p>
<h3 id="23-github和git的普及">2.3 GitHub和Git的普及</h3>
<p>Git的普及也与GitHub这样的平台紧密相关。GitHub是一个基于Web的Git版本库托管服务，它提供了图形界面，并增加了如分叉、拉取请求和社交网络功能等特性，这些都极大地促进了Git的普及和开源文化的发展。</p>
<h2 id="3git的特点">3.Git的特点</h2>
<p>开源免费，使用广泛。</p>
<ul>
<li>强大的文档（代码）的历史版本管理，直接记录完整快照（完整内容，而非差异），支持回滚、对比。</li>
<li>分布式多人协作的的代码协同开发，几乎所有操作都是本地执行的，支持代码合并、代码同步。</li>
<li>简单易用的分支管理，支持高效的创建分支、合并分支。</li>
</ul>
<h2 id="4git的基本概念">4.Git的基本概念</h2>
<h3 id="41-概念汇总">4.1 概念汇总</h3>
<table>
<thead>
<tr>
<th style="text-align:left">概念名称</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">工作区（Workspace）</td>
<td style="text-align:left">就是在电脑里能看到的代码库目录，是我们搬砖的地方，新增、修改的文件会提交到暂存区</td>
</tr>
<tr>
<td style="text-align:left">暂存区（stage 或 index）</td>
<td style="text-align:left">用于临时存放文件的修改，实际上上它只是一个文件（.git/index），保存待提交的文件列表信息。</td>
</tr>
<tr>
<td style="text-align:left">版本库/仓库（Repository）</td>
<td style="text-align:left">Git的管理仓库，管理版本的数据库，记录文件/目录状态的地方，所有内容的修改记录（版本）都在这里。</td>
</tr>
<tr>
<td style="text-align:left">服务端/远程仓库（origin 或 remote）</td>
<td style="text-align:left">服务端的版本库，专用的Git服务器，为多人共享提供服务，承担中心服务器的角色。本地版本库通过push指令把代码推送到服务端版本库。</td>
</tr>
<tr>
<td style="text-align:left">本地仓库</td>
<td style="text-align:left">用户机器上直接使用的版本库</td>
</tr>
<tr>
<td style="text-align:left">分支（Branch）</td>
<td style="text-align:left">分支是从主线分离出去的“副本”，可以独立操作而互不干扰，仓库初始化就有一个默认主分支master。</td>
</tr>
<tr>
<td style="text-align:left">头（HEAD）</td>
<td style="text-align:left">HEAD类似一个“指针”，指向当前活动分支的最新版本。</td>
</tr>
<tr>
<td style="text-align:left">提交（Commit）</td>
<td style="text-align:left">把暂存区的所有变更的内容提交到当前仓库的活动分支。</td>
</tr>
<tr>
<td style="text-align:left">推送（Push）</td>
<td style="text-align:left">将本地仓库的版本推送到服务端（远程）仓库，与他人共享。</td>
</tr>
<tr>
<td style="text-align:left">拉取（Pull）</td>
<td style="text-align:left">从服务端（远程）仓库获取更新到本地仓库，获取他人共享的更新。</td>
</tr>
<tr>
<td style="text-align:left">获取（Fetch）</td>
<td style="text-align:left">从服务端（远程）仓库更新，作用同拉取（Pull），区别是不会自动合并。</td>
</tr>
<tr>
<td style="text-align:left">冲突（Conflict）</td>
<td style="text-align:left">多人对同一文件的工作副本进行更改，并将这些更改合并到仓库时就会面临冲突，需要人工合并处理。</td>
</tr>
<tr>
<td style="text-align:left">合并（Merge）</td>
<td style="text-align:left">对有冲突的文件进行合并操作，Git会自动合并变更内容，无法自动处理的冲突内容会提示人工处理。</td>
</tr>
<tr>
<td style="text-align:left">标签（Tags）</td>
<td style="text-align:left">标签指的是某个分支某个特定时间点的状态，可以理解为提交记录的别名，常用来标记版本。</td>
</tr>
<tr>
<td style="text-align:left">master（或main）</td>
<td style="text-align:left">仓库的“master”分支，默认的主分支，初始化仓库就有了。Github上创建的仓库默认名字为“main”</td>
</tr>
<tr>
<td style="text-align:left">origin/master</td>
<td style="text-align:left">表示远程仓库（origin）的“master”分支</td>
</tr>
<tr>
<td style="text-align:left">origin/HEAD</td>
<td style="text-align:left">表示远程仓库（origin）的最新提交的位置，一般情况等于“origin/master”</td>
</tr>
</tbody>
</table>
<h3 id="42-工作区暂存区仓库">4.2 工作区/暂存区/仓库</h3>
<p>工作区（Workspace）就是在电脑里能看到的代码库目录，是我们搬砖的地方，新增、修改的文件会提交到暂存区。</p>
<ul>
<li>在这里新增文件、修改文件内容，或删除文件。</li>
</ul>
<p>暂存区（stage或index）用于临时存放文件的修改，实际上上它只是一个文件（.git/index），保存待提交的文件列表信息。</p>
<ul>
<li>用git add 命令将工作区的修改保存到暂存区。</li>
</ul>
<p>版本库/仓库（Repository仓库）Git的管理仓库，管理版本的数据库，记录文件/目录状态的地方，所有内容的修改记录（版本）都在这里。就是工作区目录下的隐藏文件夹.git，包含暂存区、分支、历史记录等信息。</p>
<ul>
<li>用git commit 命令将暂存区的内容正式提交到版本库。</li>
<li>master 为仓库的默认分支master，HEAD是一个“指针”指向当前分支的最新提交，默认指向最新的master。</li>
</ul>
<h3 id="43-git的基本流程">4.3 Git的基本流程</h3>
<p>Git的工作流程核心就下面几个步骤。</p>
<ol>
<li>准备仓库：创建或从服务端克隆一个仓库。</li>
<li>编写代码：在工作目录中添加、修改代码。</li>
<li>暂存（git add）：将需要进行版本管理的文件放入暂存区域。</li>
<li>提交（git commit）：将暂存区域的文件提交到Git仓库。</li>
<li>推送（git push）：将本地仓库推送到远程仓库，同步版本库。</li>
<li>获取更新（fetch/pull）：从服务端更新到本地，获取他人推送的更新，与他人协作、共享。</li>
</ol>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">Git 工作 流程</div>
</center>
<br>
<ul>
<li><code>git commit -a</code> 指令省略了add到暂存区的步骤，直接提交工作区的修改内容到版本库，不包括新增的文件。</li>
<li><code>git fetch</code>、<code>git pull</code> 都是从远程服务端获取最新记录，区别是git pull多了一个步骤，就是自动合并更新工作区。</li>
<li><code>git checkout .</code> 、<code>git checkout [file]</code> 会清除工作区中未添加到暂存区的修改，用暂存区内容替换工作区。</li>
<li><code>git checkout HEAD .</code>、 <code>git checkout HEAD [file]</code> 会清除工作区、暂存区的修改，用HEAD指向的当前分支最新版本替换暂存区、工作区。</li>
<li><code>git diff</code> 用来对比不同部分之间的区别，如暂存区、工作区，最新版本与未提交内容，不同版本之间等。</li>
<li><code>git reset</code> 是专门用来撤销修改、回退版本的指令，替代上面checkout的撤销功能。</li>
</ul>
<p><strong>「基本的 Git 工作流程如下：」</strong></p>
<ol>
<li>在工作目录中修改文件。</li>
<li>暂存文件，将文件的快照放入暂存区域。</li>
<li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</li>
</ol>
<h3 id="44-git的状态">4.4 Git的状态</h3>
<p>Git在执行提交的时候，不是直接将工作区的修改保存到仓库，而是将暂存区域的修改保存到仓库。要提交文件，首先需要把文件加入到暂存区域中。因此，Git管理的文件有三（+2）种状态：</p>
<ul>
<li><strong>「未跟踪(untracked)：」</strong> 新添加的文件，或被移除跟踪的文件，未建立跟踪，通过git add添加暂存并建立跟踪。</li>
<li><strong>「未修改：」</strong> 从仓库签出的文件默认状态，修改后就是“已修改”状态了。</li>
<li><strong>「已修改(modified)：」</strong> 文件被修改后的状态。</li>
<li><strong>「已暂存(staged)：」</strong> 修改、新增的文件添加到暂存区后的状态。</li>
<li><strong>「已提交(committed)：」</strong> 从暂存区提交到版本库。</li>
</ul>
<h2 id="5git的安装">5.Git的安装</h2>
<p>Git官网：https://www.git-scm.com/ 下载安装包进行安装。Git的使用有两种方式：</p>
<ul>
<li><strong>「命令行」</strong>：Git的命令通过系统命令行工具，或Git提供的命令行工具运行（<code>C:\Program Files\Git\git-bash.exe</code>）</li>
<li><strong>「GUI工具」</strong>：Windows(GUI)、Mac(GUI)工具，需单独安装，使用更简单、更易上手。</li>
</ul>
<p><strong>「下一步傻瓜式安装即可。」</strong></p>
<p>指令<code>git --version</code>查看安装版本号</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ git --version
</span></span><span class="line"><span class="cl">git version 2.39.2.windows.1</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="6git快速入门">6.Git快速入门</h2>
<h3 id="61-创建仓库">6.1 创建仓库</h3>
<p>创建仓库的方式有两种。</p>
<ol>
<li>一种是创建全新的仓库，基于<code>git init</code>命令来，会在当前目录初始化创建仓库。</li>
<li>一种是通过<code>git clone + 仓库地址</code>的方式，一般叫做克隆远程仓库。</li>
</ol>
<p>首先准备一个本地的工作目录：GitRepo</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">新建本地仓库</div>
</center>
<br>
然后gitbash打开，初始化为git仓库。
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ git init
</span></span><span class="line"><span class="cl">Initialized empty Git repository in D:/IDEA Workplace/GitRepo/.git/</span></span></code></pre></td></tr></table>
</div>
</div><p>创建完多出了一个被隐藏的<code>.git</code>目录，这就是本地仓库Git的工作目录。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">生成.git文件夹</div>
</center>
<br>
<p>克隆远程仓库，如在gitee上创建的仓库 <code>https://gitee.com/gaoziman/vue3-doc.git</code></p>
<p>通过以下命令进行克隆：</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git clone https://gitee.com/gaoziman/vue3-doc.git</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">拉取远程代码</div>
</center>
<br>
<p>可以看到远程仓库就出现在我们的本地工作空间</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">远程代码出现在本地仓库</div>
</center>
<br>
<h3 id="62-暂存区add">6.2 暂存区add</h3>
<p><code>git add</code>命令就是把要提交的所有修改放到 <strong>「暂存区（Stage）」</strong>，然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到仓库。</p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>「指令」</strong></th>
<th style="text-align:left"><strong>「描述」</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git add [file1] [file2]</td>
<td style="text-align:left">添加文件到暂存区，包括修改的文件、新增的文件</td>
</tr>
<tr>
<td style="text-align:left">git add [dir]</td>
<td style="text-align:left">同上，添加目录到暂存区，包括子目录</td>
</tr>
<tr>
<td style="text-align:left">git add .</td>
<td style="text-align:left">同上，添加**「所有」**修改、新增文件（未跟踪）到暂存区</td>
</tr>
<tr>
<td style="text-align:left">git rm [file]</td>
<td style="text-align:left">删除工作区文件，并且将这次删除放入暂存区</td>
</tr>
</tbody>
</table>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 查看仓库状态</span>
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Your branch is up to date with <span class="s1">&#39;origin/master&#39;</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Changes not staged <span class="k">for</span> commit:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git add &lt;file&gt;...&#34;</span> to update what will be committed<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git restore &lt;file&gt;...&#34;</span> to discard changes in working directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">        modified:   Nodejs.md
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">no changes added to commit <span class="o">(</span>use <span class="s2">&#34;git add&#34;</span> and/or <span class="s2">&#34;git commit -a&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Administrator@WIN-20231112VVY MINGW64 /d/IDEA Workplace/GitRepo/vue3-doc/01-环境 <span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 添加到指定文件到暂存区</span>
</span></span><span class="line"><span class="cl">$ git add Nodejs.md
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Administrator@WIN-20231112VVY MINGW64 /d/IDEA Workplace/GitRepo/vue3-doc/01-环境 <span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 继续查看仓库状态</span>
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Your branch is up to date with <span class="s1">&#39;origin/master&#39;</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Changes to be committed:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git restore --staged &lt;file&gt;...&#34;</span> to unstage<span class="o">)</span>
</span></span><span class="line"><span class="cl">        modified:   Nodejs.md</span></span></code></pre></td></tr></table>
</div>
</div><p>修改之后通过 <code>git add 文件名</code> 即可把文件提交至暂存区</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">把文件提交至暂存区</div>
</center>
<br>
<h3 id="63-commit提交">6.3 commit提交</h3>
<p><code>git commit</code>提交是以时间顺序排列被保存到数据库中的，就如游戏关卡一样，每一次提交（commit）就会产生一条记录：<code>id + 描述 + 快照内容</code>。</p>
<ul>
<li><strong>「commit id」</strong>：根据修改的文件内容采用摘要算法（SHA1）计算出不重复的40位字符，这么长是因为Git是分布式的，要保证唯一性、完整性，一般本地指令中可以只用前几位（6）。即使多年以后，依然可通过<code>id</code>找到曾经的任何内容和变动，再也不用担心丢失了。</li>
<li><strong>「描述」</strong>：针对本次提交的描述说明，建议**「准确」**填写，就跟代码中的注释一样，很重要。</li>
<li><strong>「快照」</strong>：就是完整的版本文件，以对象树的结构存在仓库下<code>\.git\objects</code>目录里，这也是Git效率高的秘诀之一。</li>
</ul>
<p>我们可以通过 <code>git reflog</code> 查看所有的提交记录包括回退记录。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">查看回退记录</div>
</center>
<br>
<p>我们可以通过提交所有的指令到仓库。</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"> git commit -a -m<span class="s1">&#39;修改README的版权信息&#39;</span></span></span></code></pre></td></tr></table>
</div>
</div><p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 <code>--amend</code> 选项的提交命令尝试重新提交：</p>
<p>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git commit --amend -m <span class="o">[</span>message<span class="o">]</span></span></span></code></pre></td></tr></table>
</div>
</div><p>取消暂存的文件</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git reset filename</span></span></code></pre></td></tr></table>
</div>
</div><p>撤消对文件的修改:</p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git checkout -- filename</span></span></code></pre></td></tr></table>
</div>
</div><p>用参数 <code>--oneline</code> 可以让日志输出更简洁（一行）</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">git log --oneline 输出</div>
</center>
<br>
<p><strong>「🔥指令：」</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>「指令」</strong></th>
<th style="text-align:left"><strong>「描述」</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git commit -m &lsquo;说明&rsquo;</td>
<td style="text-align:left">提交变更，参数<code>-m</code>设置提交的描述信息，应该正确提交，不带该参数会进入说明编辑模式</td>
</tr>
<tr>
<td style="text-align:left">git commit -a</td>
<td style="text-align:left">参数<code>-a</code>，表示直接从工作区提交到版本库，略过了<code>git add</code>步骤，不包括新增的文件</td>
</tr>
<tr>
<td style="text-align:left">git commit [file]</td>
<td style="text-align:left">提交暂存区的指定文件到仓库区</td>
</tr>
<tr>
<td style="text-align:left">git commit &ndash;amend -m</td>
<td style="text-align:left">使用一次新的<code>commit</code>，替代上一次提交，会修改<code>commit</code>的<code>hash</code>值（id）</td>
</tr>
<tr>
<td style="text-align:left">git log -n20</td>
<td style="text-align:left">查看日志(最近20条)，不带参数<code>-n</code>则显示所有日志</td>
</tr>
<tr>
<td style="text-align:left">git log -n20 &ndash;oneline</td>
<td style="text-align:left">参数“<code>--oneline</code>”可以让日志输出更简洁（一行）</td>
</tr>
<tr>
<td style="text-align:left">git log -n20 &ndash;graph</td>
<td style="text-align:left">参数“<code>--graph</code>”可视化显示分支关系</td>
</tr>
<tr>
<td style="text-align:left">git log &ndash;follow [file]</td>
<td style="text-align:left">显示某个文件的版本历史</td>
</tr>
<tr>
<td style="text-align:left">git blame [file]</td>
<td style="text-align:left">以列表形式显示指定文件的修改记录</td>
</tr>
<tr>
<td style="text-align:left">git <strong>「reflog」</strong></td>
<td style="text-align:left">查看所有可用的历史版本记录（实际是HEAD变更记录），包含被回退的记录（<strong>「重要」</strong>）</td>
</tr>
<tr>
<td style="text-align:left">git status</td>
<td style="text-align:left">查看本地仓库状态，比较常用的指令，加参数<code>-s</code>简洁模式</td>
</tr>
</tbody>
</table>
<h3 id="64-提交的唯一标识id">6.4 提交的唯一标识ID</h3>
<p>每一个提交都有一个唯一标识，主要就是提交的<code>hash</code>值<code>commit id</code>，在很多指令中会用到，如版本回退、拣选提交等，需要指定一个提交。那标识唯一提交有两种方式：</p>
<ul>
<li>首先就是<code>commit id</code>，一个40位编码，指令中使用的时候可以只输入前几位（6位）即可。</li>
<li>还有一种就是HEAD~n，是基于当前<code>HEAD</code>位置的一个相对坐标。
<ul>
<li><code>HEAD</code> 表示当前分支的最新版本，是比较常用的参数。</li>
<li><code>HEAD^</code>上一个版本，<code>HEAD^^</code> 上上一个版本。</li>
<li><code>HEAD~</code> 或<code>HEAD~1</code> 表示上一个版本，以此类推，<code>HEAD^10</code> 为最近第10个版本。</li>
<li><code>HEAD@{2}</code>在<code>git reflog</code>日志中标记的提交记录索引。</li>
</ul>
</li>
</ul>
<p>通过<code>git log</code>、<code>git reflog</code>可以查看历史日志，可以看每次提交的唯一编号（hash）。区别是<code>git reflog</code>可以查看所有操作的记录（实际是HEAD变更记录），包括被撤销回退的提交记录。</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git reflog -n10
</span></span><span class="line"><span class="cl">5acc914 <span class="o">(</span>HEAD -&gt; main<span class="o">)</span> HEAD@<span class="o">{</span>0<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">738748b <span class="o">(</span>dev<span class="o">)</span> HEAD@<span class="o">{</span>1<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">9312c3e HEAD@<span class="o">{</span>2<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">db03fcb HEAD@<span class="o">{</span>3<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">1b81fb3 HEAD@<span class="o">{</span>4<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">41ea423 HEAD@<span class="o">{</span>5<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">d3e15f9 HEAD@<span class="o">{</span>6<span class="o">}</span>: reset: moving to d3e15f9
</span></span><span class="line"><span class="cl">1b81fb3 HEAD@<span class="o">{</span>7<span class="o">}</span>: reset: moving to HEAD~1
</span></span><span class="line"><span class="cl">41ea423 HEAD@<span class="o">{</span>8<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">d3e15f9 HEAD@<span class="o">{</span>9<span class="o">}</span>: reset: moving to HEAD~</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">查看变更记录</div>
</center>
<br>
<h3 id="65-diff比较">6.5 diff比较</h3>
<p><code>git diff</code>用来比较不同文件版本之间的差异。</p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>「指令」</strong></th>
<th style="text-align:left"><strong>「描述」</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>「git diff」</strong></td>
<td style="text-align:left">查看暂存区和工作区的差异</td>
</tr>
<tr>
<td style="text-align:left">git diff [file]</td>
<td style="text-align:left">同上，指定文件</td>
</tr>
<tr>
<td style="text-align:left">git diff &ndash;cached</td>
<td style="text-align:left">查看已暂存的改动，就是暂存区与新版本<code>HEAD</code>进行比较</td>
</tr>
<tr>
<td style="text-align:left">git diff &ndash;staged</td>
<td style="text-align:left">同上</td>
</tr>
<tr>
<td style="text-align:left">git diff &ndash;cached [file]</td>
<td style="text-align:left">同上，指定文件</td>
</tr>
<tr>
<td style="text-align:left">git diff HEAD</td>
<td style="text-align:left">查看已暂存的+未暂存的所有改动，就是与最新版本<code>HEAD</code>进行比较</td>
</tr>
<tr>
<td style="text-align:left">git diff HEAD~</td>
<td style="text-align:left">同上，与上一个版本比较。<code>HEAD~</code>表示上一个版本，<code>HEAD~10</code>为最近第10个版本</td>
</tr>
<tr>
<td style="text-align:left">git diff [id] [id]</td>
<td style="text-align:left">查看两次提交之间的差异</td>
</tr>
<tr>
<td style="text-align:left">git diff [branch]</td>
<td style="text-align:left">查看工作区和分支直接的差异</td>
</tr>
</tbody>
</table>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 查看文件的修改</span>
</span></span><span class="line"><span class="cl">$ git diff README.md
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看两次提交的差异</span>
</span></span><span class="line"><span class="cl">$ git diff 8f4244 1da22
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示今天你写了多少行代码：工作区+暂存区</span>
</span></span><span class="line"><span class="cl">$ git diff --shortstat <span class="s2">&#34;@{10 day ago}&#34;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="7远程仓库">7.远程仓库</h2>
<p>Git作为分布式的版本管理系统，我们每个本地终端都有属于自己的Git仓库。但团队协作还需一个中间仓库，作为控制中心，同步各个仓库。于是服务端（远程）仓库就来承担这个职责，服务端不仅有仓库，还配套相关管理功能，这就是所谓的 <strong>「远程仓库」</strong> 。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">远程仓库</div>
</center>
<br>
远程仓库有好几种，大致分为下面几种。
<ul>
<li>公共Git服务器，如Github、码云Gitee、腾讯Coding等。</li>
<li>搭建私有Git服务器，如开源的Gitlab、Gitea、等。</li>
</ul>
<h3 id="71-远程仓库指令">7.1 远程仓库指令</h3>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>「指令」</strong></th>
<th style="text-align:left"><strong>「描述」</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git clone [git地址]</td>
<td style="text-align:left">从远程仓库克隆到本地（当前目录）</td>
</tr>
<tr>
<td style="text-align:left">git remote -v</td>
<td style="text-align:left">查看所有远程仓库，不带参数<code>-v</code>只显示名称</td>
</tr>
<tr>
<td style="text-align:left">git remote show [remote]</td>
<td style="text-align:left">显示某个远程仓库的信息</td>
</tr>
<tr>
<td style="text-align:left">git remote add [name] [url]</td>
<td style="text-align:left">增加一个新的远程仓库，并命名</td>
</tr>
<tr>
<td style="text-align:left">git remote rename [old] [new]</td>
<td style="text-align:left">修改远程仓库名称</td>
</tr>
<tr>
<td style="text-align:left"><strong>「git pull [remote] [branch]」</strong></td>
<td style="text-align:left">取回远程仓库的变化，并与本地版本合并</td>
</tr>
<tr>
<td style="text-align:left"><strong>「git pull」</strong></td>
<td style="text-align:left">同上，针对当前分支</td>
</tr>
<tr>
<td style="text-align:left">git fetch [remote]</td>
<td style="text-align:left">获取远程仓库的所有变动到本地仓库，不会自动合并！需要手动合并</td>
</tr>
<tr>
<td style="text-align:left"><strong>「git push」</strong></td>
<td style="text-align:left">推送当前分支到远程仓库</td>
</tr>
<tr>
<td style="text-align:left">git push [remote] [branch]</td>
<td style="text-align:left">推送本地当前分支到远程仓库的指定分支</td>
</tr>
<tr>
<td style="text-align:left">git push [remote] &ndash;force/-f</td>
<td style="text-align:left">强行推送当前分支到远程仓库，即使有冲突，⚠️很危险！</td>
</tr>
<tr>
<td style="text-align:left">git push [remote] &ndash;all</td>
<td style="text-align:left">推送所有分支到远程仓库</td>
</tr>
<tr>
<td style="text-align:left">git push –u</td>
<td style="text-align:left">参数<code>–u</code>表示与远程分支建立关联，第一次执行的时候用，后面就不需要了</td>
</tr>
<tr>
<td style="text-align:left">git remote rm [remote-name]</td>
<td style="text-align:left">删除远程仓库</td>
</tr>
<tr>
<td style="text-align:left">git pull &ndash;rebase</td>
<td style="text-align:left">使用rebase的模式进行合并</td>
</tr>
</tbody>
</table>
<h3 id="72-push和pull">7.2 push和pull</h3>
<p><code>git push</code>、<code>git pull</code>是团队协作中最常用的指令，用于同步本地、服务端的更新，与他人协作。</p>
<p><strong>「🔸推送」</strong>（push）：推送本地仓库到远程仓库。</p>
<ul>
<li>如果推送的更新与服务端存在冲突，则会被拒绝，<code>push</code>失败。一般是有其他人推送了代码，导致文件冲突，可以先<code>pull</code>代码，在本地进行合并，然后再<code>push</code>。</li>
</ul>
<p><strong>「🔸拉取」</strong>（pull）：从服务端（远程）仓库更新到本地仓库。</p>
<ul>
<li><code>git pull</code>：拉取服务端的最新提交到本地，并与本地合并，合并过程同分支的合并。</li>
<li><code>git fetch</code>：拉取服务端的最新提交到本地，不会自动合并，也不会更新工作区。</li>
</ul>
<h3 id="74-fetch和pull有什么区别">7.4 fetch和pull有什么区别</h3>
<h4 id="1-git-fetch">1. Git Fetch</h4>
<p><code>git fetch</code>命令用于从另一个仓库（例如，远程仓库）下载新的分支和数据，但不会自动合并或修改你当前工作目录下的文件或分支。<code>fetch</code> 命令会把远程仓库的所有信息拉取到本地仓库，但这些改动不会反映在你的当前工作分支上，除非你明确地进行合并。</p>
<p>换句话说，<code>git fetch</code>是一种安全的方式来查看别人已经做了哪些工作，而这些变更在你用<code>git fetch</code>之后不会影响你当前的工作状态。如果你想要让这些变更影响你的当前分支，你需要用<code>git merge</code>手动合并，如<code>git merge origin/master</code>（如果你是从<code>master</code>分支上fetch的）。</p>
<h4 id="2-git-pull">2. Git Pull</h4>
<p><code>git pull</code>命令实际上是<code>git fetch</code>加上<code>git merge</code>命令的组合。当你执行<code>git pull</code>，Git会从远程仓库获取最新的版本信息，然后尝试自动合并到你当前的分支。通常情况下，这意味着它将远程的更新内容合并到你当前分支的本地副本中。</p>
<p>在简单的情况下，<code>git pull</code>会顺利地将远程变更合并到你的本地分支，你的工作流程可以无缝继续。然而，如果在fetch的数据与你本地的修改存在冲突时，你可能需要手动解决这些冲突。</p>
<h4 id="3-使用场景对比">3. 使用场景对比</h4>
<p>在不清楚远程分支的情况下，你可能更倾向于首先使用<code>git fetch</code>来查看有哪些更新，待检查完更新内容后再决定是否合并到当前分支。这是一种更为谨慎的做法，尤其适用于复杂的合并操作，或者当你不希望自动将更改应用到本地仓库时使用。</p>
<p>另一方面，如果你相信远程的变更不会引起任何问题，并且希望你的本地分支保持与远程分支的同步，可以直接使用<code>git pull</code>。</p>
<h4 id="4案例">4.案例</h4>
<p>获取远程仓库的更新数据，但不合并到当前分支：</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git fetch origin</span></span></code></pre></td></tr></table>
</div>
</div><p>获取远程仓库的更新数据并自动合并到当前分支：</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git pull origin master  # 拉取origin远程仓库的master分支并合并到当前分支</span></span></code></pre></td></tr></table>
</div>
</div><p><code>git fetch</code>用于安全地查看远程变更，而<code>git pull</code>则用于获取并立刻应用这些变更。两者合适的使用取决于你想如何管理远程数据和本地分支的关系。</p>
<h2 id="8分支">8.分支</h2>
<p>几乎每一种版本控制系统都以某种形式支持分支，一个分支代表一条独立的开发线。</p>
<p>使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">分支示意</div>
</center>
<br>
<p>Git 分支实际上是指向更改快照的指针。</p>
<p>有人把 Git 的分支模型称为**「必杀技特性」**，而正是因为它，将 <strong>「Git」</strong> 从版本控制系统家族里区分出来。</p>
<h3 id="81-branch">8.1 branch</h3>
<p>加入，准备1月份发布新版本，要新开发一些新功能，占领市场。你和小伙伴 <strong>「张三」</strong> 一起负责开发一个新功能A，开发周期2周，在这两周你们的代码不能影响其他人，不影响主分支。这个时候就可以为这个新功能创建一个分支，你们两在这个分支上干活，2周后代码开发完了、测试通过，就可以合并进要发版的开发分支了。安全、高效，不影响其他人工作，完美！</p>
<p>实际开发中，我们可能会有多个分支进行开发。</p>
<ul>
<li><strong>「master」</strong>：作为主分支，存放稳定的代码，就是开发后测试通过的代码，不允许随便修改和合并。</li>
<li><strong>「开发分支」</strong>：用于团队日常开发用，比如团队计划12月份开发10个功能并发版，则在此分支上进行，不影响主分支的稳定，如果我们开发到一个成熟阶段，依然可以合并到master主分支。</li>
</ul>
<blockquote>
<p>❝</p>
<p>**「分支」**就是指向某一个提交记录的“指针”引用，因此创建分支是非常快的，不管仓库多大。当我们运行<code>git branch dev</code>创建了一个名字为<code>dev</code>的分支，Git实际上是在<code>.git\refs\heads</code>下创建一个<code>dev</code>的引用文件（没有扩展名）。</p>
<p>❞</p>
</blockquote>
<h3 id="82-分支命令">8.2 分支命令</h3>
<p>我这里讲这些命令总结为思维导图，大家可以参考一下。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">branch 分支示意导图</div>
</center>
<br>
<p>列出了当前的所有分支，星号“*”开头的“main”为当前活动分支。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">列出当前的所有分支</div>
</center>
<br>
<h3 id="83-分支冲突">8.3 分支冲突</h3>
<p>把两个分支的修改内容合并到一起，常用的合并指令<code>git merge [branch]</code>，将分支<code>[branch]</code>合并到当前分支。根据要合并的内容的不同，具体合并过程就会有多种情况。</p>
<p>首先我们准备一个案例项目，我已经在gitee准备好了，非常简单，只有三个简单的文件。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">gitee 代码</div>
</center>
<br>
<h4 id="1-快速合并">1. 快速合并</h4>
<p>合并<code>dev</code>到<code>master</code>，注意要先切换到<code>master</code>分支，然后执行<code>git merge dev</code>，把<code>dev</code>合并到当前分支。</p>
<p>首先创建dev分支并切换到dev分支上去。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">创建dev分支</div>
</center>
<br>
<p>然后再dev分支上面创建一个b.txt文件，随之提交到远程仓库中。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>可以看到我们远程仓库的dev分支上面已经有了b.txt这个文件。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>然后切换到master分支上面，把dev分支合并到我们的master主分支上面。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>同时可以看到我们远程仓库中master分支也同步到了dev分支的b.txt文件。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<h4 id="2-普通合并">2. 普通合并</h4>
<p>如果<code>master</code>有变更，存在分支交叉，则会把两边的变更合并成一个提交。</p>
<ul>
<li>如果两边变更的文件不同，没有什么冲突，就自动合并了。</li>
<li>如果有修改同一个文件，则会存在冲突，到底该采用哪边的，程序无法判断，就换产生冲突。冲突内容需要人工修改后再重新提交，才能完成最终的合并。</li>
</ul>
<p>我们在远程仓库master分支中手动更改a.txt文件来演示。</p>
<h5 id="1-第一种情况">1. 第一种情况</h5>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时我们在本地仓库中更改其他文件，只要不是a.txt即可，然后push到远程。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时发现我们当前本地仓库的版本号与远程仓库master分支的版本号不一致，导致提交不上去。</p>
<p>这种情况还是比较简单的，只需要通过 <code>git pull</code> 命令将本地版本与远程版本同步即可</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时会进行自动合并到本地分支，并当做一次提交，提交信息大家也可以进行更改，我这里默认即可。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时再次提交即可成功提交到远程仓库中。</p>
<h5 id="2-第二种情况">2. 第二种情况</h5>
<p>上面那种方式处理起来比较简单，因为是处理不同的文件。</p>
<p>下面我来演示一下对于同一个文件冲突情况进行解决。</p>
<p>我们在远程仓库手动添加了以下这句话进行对b.txt文件的修改。(可以理解为程序员A修改了b.txt文件并提交到远程仓库中去。)</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时程序员B也在本地修改了b.txt文件。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>然后通过一系列命令提交至远程仓库。</p>
<p>可以发现出现冲突之后，我们立即通过git pull 命令进行了同步，但是初始我们的这里发生了很多变化，变成了**「master | MENERGING」**。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时这种情况就是因为在自动合并的时候出现了冲突，git无法帮助我们解决，需要我们自己手动解决冲突。</p>
<p>然后我们在本地打开b.txt文件。</p>
<p>可以看到确实也把远程更改的内容同步过来了，这里就需要我们手动解决，由我们和另外一个程序员协商到底是保留谁的内容或者是都保留。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
此时我们觉得都进行保留，然后删除其他多余内容。
<p>然后进行代码提交。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时可以发现远程仓库b.txt文件内容已经发现了改变，并且是由我们手动解决并提交的。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>大功告成!!</p>
<h2 id="9git的版本回退">9.Git的版本回退</h2>
<p>如果发现我们编写代码中写错了要怎么办，但又分好几种情况，我们依次往下看。</p>
<ul>
<li>❓还没提交的怎么撤销？ &ndash; checkout
<ul>
<li>还未提交的修改（工作区、暂存区）不想要了，用签出指令（checkout）进行撤销清除。</li>
<li>或者用<code>checkout</code>的新版回滚指令<code>reset</code>。</li>
</ul>
</li>
<li>❓<strong>「已提交但么有push的提交如何撤销？」</strong>—— <code>reset</code>、<code>revert</code></li>
<li>❓<strong>「已push的提交如何撤销？」</strong>—— 同上，先本地撤销，然后强制推送<code>git push origin -f</code>，<strong>「⚠️注意慎用！」</strong> 记得先<code>pull</code>获取更新。</li>
</ul>
<h3 id="91-版本回退命令">9.1 版本回退命令</h3>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>「指令」</strong></th>
<th style="text-align:left"><strong>「描述」</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git checkout .</td>
<td style="text-align:left">撤销工作区的（未暂存）修改，把暂存区恢复到工作区。不影响暂存区，如果没暂存，则撤销所有工作区修改</td>
</tr>
<tr>
<td style="text-align:left">git checkout [file]</td>
<td style="text-align:left">同上，<code>file</code>指定文件</td>
</tr>
<tr>
<td style="text-align:left">git checkout HEAD .</td>
<td style="text-align:left">撤销工作区、暂存区的修改，用<code>HEAD</code>指向的当前分支最新版本替换工作区、暂存区</td>
</tr>
<tr>
<td style="text-align:left">git checkout HEAD [file]</td>
<td style="text-align:left">同上，<code>file</code>指定文件</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">git reset</td>
<td style="text-align:left">撤销暂存区状态，同<code>git reset HEAD</code>，不影响工作区</td>
</tr>
<tr>
<td style="text-align:left">git reset HEAD [file]</td>
<td style="text-align:left">同上，指定文件<code>file</code>，<code>HEAD</code>可省略</td>
</tr>
<tr>
<td style="text-align:left">git reset [commit]</td>
<td style="text-align:left">回退到指定版本，清空暂存区，不影响工作区。工作区需要手动<code>git checkout</code>签出</td>
</tr>
<tr>
<td style="text-align:left">git reset &ndash;soft [commit]</td>
<td style="text-align:left">移动分支<code>master</code>、<code>HEAD</code>到指定的版本，不影响暂存区、工作区，需手动<code>git checkout</code>签出更新</td>
</tr>
<tr>
<td style="text-align:left">git reset &ndash;hard HEAD</td>
<td style="text-align:left">撤销工作区、暂存区的修改，用当前最新版</td>
</tr>
<tr>
<td style="text-align:left">git reset &ndash;hard HEAD~</td>
<td style="text-align:left">回退到上一个版本，并重置工作区、暂存区内容。</td>
</tr>
<tr>
<td style="text-align:left">git reset &ndash;hard [commit]</td>
<td style="text-align:left">回退到指定版本，并重置工作区、暂存区内容。</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">git <strong>「revert」</strong>[commit]</td>
<td style="text-align:left">撤销一个提交，会用一个新的提交（原提交的逆向操作）来完成撤销操作，如果已<code>push</code>则重新<code>push</code>即可</td>
</tr>
</tbody>
</table>
<ul>
<li><code>git checkout .</code>、<code>git checkout [file]</code> 会清除工作区中未添加到暂存区的修改，用暂存区内容替换工作区。</li>
<li><code>git checkout HEAD .</code>、<code>git checkout HEAD [file]</code> 会清除工作区、暂存区的修改，用HEAD指向的当前分支最新版本替换暂存区、工作区。</li>
</ul>
<h4 id="1-只撤销工作区的修改未暂存">1. 只撤销工作区的修改（未暂存）</h4>
<p>撤销工作区的（未暂存）修改，把暂存区恢复到工作区。不影响暂存区，如果没暂存，则撤销所有工作区修改。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<h4 id="2-撤销工作区暂存区的修改">2. 撤销工作区、暂存区的修改</h4>
<p>撤销工作区、暂存区的修改，用<code>HEAD</code>指向的当前分支最新版本替换工作区、暂存区</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<h3 id="92-reset">9.2 reset</h3>
<p><code>reset</code>是专门用来撤销修改、回退版本的指令，支持的场景比较多，多种撤销姿势，所以参数组合也比较多。简单理解就是移动<code>master</code>分支、<code>HEAD</code>的“指针”地址，理解这一点就基本掌握<code>reset</code>了。</p>
<p><code>reset</code>有三种模式，对应三种参数：<code>mixed</code>（默认模式）、<code>soft</code>、<code>hard</code>。三种参数的主要区别就是对工作区、暂存区的操作不同。</p>
<ul>
<li><code>mixed</code>为默认模式，参数可以省略。</li>
<li>只有<code>hard</code>模式会重置工作区、暂存区，一般用这个模式会多一点。</li>
</ul>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<table>
<thead>
<tr>
<th style="text-align:left">模式名称</th>
<th style="text-align:left"><strong>「描述」</strong></th>
<th style="text-align:left"><strong>「HEAD的位置」</strong></th>
<th style="text-align:left"><strong>「暂存区」</strong></th>
<th style="text-align:left"><strong>「工作区」</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>「soft」</strong></td>
<td style="text-align:left">回退到某一个版本，工作区不变，需手动<code>git checkout</code></td>
<td style="text-align:left">修改</td>
<td style="text-align:left">不修改</td>
<td style="text-align:left">不修改</td>
</tr>
<tr>
<td style="text-align:left"><strong>「mixed」</strong>(默认)</td>
<td style="text-align:left">撤销暂存区状态，不影响工作区，需手动<code>git checkout</code></td>
<td style="text-align:left">修改</td>
<td style="text-align:left">修改</td>
<td style="text-align:left">不修改</td>
</tr>
<tr>
<td style="text-align:left"><strong>「hard」</strong></td>
<td style="text-align:left">重置未提交修改（工作区、暂存区）</td>
<td style="text-align:left">修改</td>
<td style="text-align:left">修改</td>
<td style="text-align:left">修改</td>
</tr>
</tbody>
</table>
<p>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p>
<h4 id="1-撤销暂存区">1. 撤销暂存区</h4>
<p>这个其实跟刚刚的 <code>git checkout HEAD .</code>是一样的。</p>
<h4 id="2-撤销工作区暂存区修改">2. 撤销工作区、暂存区修改</h4>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git reset --hard HEAD</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="3-回退版本库到上一个版本并重置工作区暂存">3. 回退版本库到上一个版本，并重置工作区、暂存</h4>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git reset --hard HEAD~</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到他已经回到了我们上一个版本。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>通过git log 日志查看也没有了之前的记录，而是被HEAD指向到上一个版本。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<h4 id="4-回到原来的版本并重置工作区暂存">4. 回到原来的版本，并重置工作区、暂存</h4>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ git reset --hard 891350d</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到他又回到上上一步，也就是对上一步操作进行撤销。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<h4 id="5-查看所有历史提交记录">5. 查看所有历史提交记录</h4>
<div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git reflog</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<h2 id="10idea集成git">10.IDEA集成Git</h2>
<p>通过以上内容，我们对Git整个工作流程有了一些认识，以及知道如何使用Git进行平时的开发。</p>
<p>但是在真实的开发中，我们可能并不是使用命令行进行操作，而是在IDEA中进行图形化操作，我们写完代码即可进行提交。</p>
<p>我们打开IDEA，依次在settings &mdash;》Version Control &mdash;》 Git。</p>
<p>选择自己的Git安装路径，然后进行测试看是否成功。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>点击Test之后看到自己对应的Git版本号之后即可说明我们初步测试成功。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>然后就可以在IDEA中进行代码的编写。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
然后讲代码push到远程仓库。
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>相比于命令行，IDEA的图形化操作是不是让人更省心，简单易上手。</p>
<h2 id="11参考文献">11.参考文献</h2>
<ul>
<li><a href="https://git-scm.com/book/zh/v2"target="_blank" rel="external nofollow noopener noreferrer">https://git-scm.com/book/zh/v2<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://www.yuque.com/kanding/ktech/ccgylqhnb94ug4bu#LlJg3"target="_blank" rel="external nofollow noopener noreferrer">https://www.yuque.com/kanding/ktech/ccgylqhnb94ug4bu#LlJg3<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://javaguide.cn/tools/git/git-intro.html"target="_blank" rel="external nofollow noopener noreferrer">https://javaguide.cn/tools/git/git-intro.html<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://www.yiibai.com/git"target="_blank" rel="external nofollow noopener noreferrer">https://www.yiibai.com/git<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
</ul>
]]></description></item><item><title>Git 常用指令汇总</title><link>https://jianye0428.github.io/posts/introduction/</link><pubDate>Sun, 16 Jul 2023 10:13:29 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/introduction/</guid><description><![CDATA[<ul>
<li><strong>工作区</strong>：就是你在电脑里能看到的目录。</li>
<li><strong>暂存区</strong>：英文叫 stage, 或 index。一般存放在 &ldquo;.git 目录下&rdquo; 下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li>
<li><strong>版本库</strong>：工作区有一个隐藏目录。git，这个不算工作区，而是 Git 的版本库。</li>
</ul>
<h2 id="介绍">介绍</h2>
<blockquote>
<p><a href="https://git-scm.com/"target="_blank" rel="external nofollow noopener noreferrer">https://git-scm.com/<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<p>先通过几张图片来大致了解一下 Git 的工作原理吧！
文章开头的流程图已经简单明了地说明了 Git 常用操作的工作流程，下图换种风格再展示一次：
</p>
<p>提到 Git 就会联想到 github, 下图从 Git 的角度简单说明了一些 Github 常用操作的关系：
</p>
<p>下面这个图则展示了工作区、版本库中的暂存区和版本库之间的关系：
</p>
<p>图中左侧为工作区，右侧为版本库。在版本库中标记为 <code>&quot;index&quot;</code> 的区域是暂存区（stage, index），标记为 &ldquo;master&rdquo; 的是 master 分支所代表的目录树。
<strong>HEAD 指针：每个 git 仓库有且仅有一个 HEAD 指针，它通常指向當前某个活動的本地分支指针（最初本地仓库 master)。也可以是某个提交记录、某个 tag，但这会让其处于 detached HEAD（游离头）状态，此状态下的所有提交都无效。</strong>
图中我们可以看出此时 <code>&quot;HEAD&quot;</code> 实际是指向 master 分支的一个&quot;游标&quot;。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。
图中的<code>objects</code>标识的区域为 Git 的对象库，实际位于 <code>&quot;.git/objects&quot;</code> 目录下，里面包含了创建的各种对象及内容。
当对工作区修改（或新增）的文件执行 <code>&quot;git add&quot;</code>命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的 ID 被记录在暂存区的文件索引中。
当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。
当执行 <code>&quot;git reset HEAD&quot;</code> 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。
当执行 <code>&quot;git rm --cached &lt;file&gt;&quot;</code> 命令时，会直接从暂存区删除文件，工作区则不做出改变。
当执行 <code>&quot;git checkout .&quot;</code> 或者 <code>&quot;git checkout -- &lt;file&gt;&quot;</code> 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。
当执行 <code>&quot;git checkout HEAD .&quot;</code> 或者 <code>&quot;git checkout HEAD &lt;file&gt;&quot;</code> 命令时，会用 <code>HEAD</code> 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</p>
<h2 id="git-配置">Git 配置</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git config --global --list <span class="c1">#查看全局配置</span>
</span></span><span class="line"><span class="cl">git config --local --list <span class="c1">#查看本项目配置</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 第一次使用 git 的时候，需要设置用户信息和用户邮箱，用于辨识提交者身份</span>
</span></span><span class="line"><span class="cl">git config --global user.name <span class="s2">&#34;用户名&#34;</span>
</span></span><span class="line"><span class="cl">git config --global user.email <span class="s2">&#34;邮箱&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git config --global alias.cm commit
</span></span><span class="line"><span class="cl">git config --global alias.br branch <span class="c1"># 配置指令别名简写</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git config --global credential.helper store <span class="c1"># 输入一次账号密码后第二次就会记住账号密码</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git config --global core.ignorecase <span class="nb">false</span> <span class="c1"># 关闭忽略大小写</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git config --system core.longpaths <span class="nb">true</span> <span class="c1"># 配置长路径</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git config --global http.sslVerify <span class="nb">false</span> <span class="c1"># 禁用 SSL 验证</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git config --global core.protectNTFS <span class="nb">false</span> <span class="c1"># 关闭 NTFS 文件保护</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git config --global url.<span class="s2">&#34;https://&#34;</span>.insteadOf git:// <span class="c1"># git:// 报错</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="基本操作">基本操作</h3>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git init                    <span class="c1">## 把当前的目录变成可以用 git 进行版本控制的 git 仓库，生成隐藏。git 文件。</span>
</span></span><span class="line"><span class="cl">git add XX                  <span class="c1">## 把 xx 文件添加到暂存区去。</span>
</span></span><span class="line"><span class="cl">git add –A                  <span class="c1">## git add --all 的缩写，添加全部到暂存区</span>
</span></span><span class="line"><span class="cl">git add –u                  <span class="c1">## 把文件的删除和修改添加到暂存区（不包括新增）</span>
</span></span><span class="line"><span class="cl">git add .                   <span class="c1">## 监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区</span>
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;message&#34;</span>     <span class="c1">## 从暂存区提交到本地仓库</span>
</span></span><span class="line"><span class="cl">git commit -a -m <span class="s2">&#34;message&#34;</span>  <span class="c1">## 相当于省略 git add，但是无法提交新增的文件</span>
</span></span><span class="line"><span class="cl">git push origin master      <span class="c1">## Git 会把 master 分支推送到远程库对应的远程分支上</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-lightbulb fa-fw" aria-hidden="true"></i>Tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><a href="https://github.com/Lruihao/hugo-blog/wiki/Commit-message"target="_blank" rel="external nofollow noopener noreferrer">Commit Message<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> 内容尽量规范！
当某一次提交后，突然想起漏提交了文件，或不小心提交了不满意的代码时，
可以使用<code>git commit --amend -m &quot;message&quot;</code>指令。它可以在不增加一个新的 commit-id 的情况下将新修改的代码追加到前一次的 commit-id 中。提交之后 message 也将被本次的 message 覆盖，所以还需要再次添加上次的 message。</div>
    </div>
  </div>
<h3 id="push">push</h3>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git push origin branch-name
</span></span><span class="line"><span class="cl">git push –u origin master
</span></span><span class="line"><span class="cl">git push origin --delete branch-name     <span class="c1">## 删除远程分支</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>把当前 master 分支推送到远程库；<code>-u</code>表示记住分支和地址，下次使用<code>git push</code>即可。</p>
</blockquote>
<h3 id="remote">remote</h3>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git remote add origin reposityUrl     <span class="c1">## 关联一个远程库</span>
</span></span><span class="line"><span class="cl">git remote                            <span class="c1">## 查看远程库的信息</span>
</span></span><span class="line"><span class="cl">git remote –v                         <span class="c1">## 查看远程库的详细信息</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="clone">clone</h3>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone reposityUrl                   <span class="c1">## 从远程库中克隆</span>
</span></span><span class="line"><span class="cl">git clone -b branchName reposityUrl     <span class="c1">## 克隆指定分支</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="pull">pull</h3>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git pull</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>从远程仓库拉下来到本地库然后合并相当于<code>git fetch</code>+<code>git merge</code>。
一般 push 前先拉去最新版本，避免代码冲突，如果有冲突需要解决了冲突才能提交。</p>
</blockquote>
<p><strong>import repositories 同步更新</strong></p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git pull 原链接
</span></span><span class="line"><span class="cl">git push origin master</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="fetch">fetch</h3>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git fetch               <span class="c1">## 从远程库抓下最新版本，但是不合并</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>fetch 是从远程库到本地库，但是未在工作区，需要<code>git merge</code></p>
</blockquote>
<h3 id="merge">merge</h3>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git merge dev           <span class="c1">## 在当前的分支上合并 dev 分支</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>分支合并也是在本地完成 (<strong>从本地库到工作区</strong>)，新的分支只有在合并后才允许被删除。
如果分支合并是出现冲突需要解决了冲突才能合并，使用<code>git status</code>查看冲突文件。</p>
</blockquote>
<p></p>
<h3 id="branchcheckout">branch,checkout</h3>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git branch            <span class="c1">## 查看当前所有的分支</span>
</span></span><span class="line"><span class="cl">git branch name       <span class="c1">## 创建分支</span>
</span></span><span class="line"><span class="cl">git branch –r         <span class="c1">## 看远程所有分支</span>
</span></span><span class="line"><span class="cl">git branch –a         <span class="c1">## 查看本地远程分支</span>
</span></span><span class="line"><span class="cl">git branch –d name    <span class="c1">## 删除分支</span>
</span></span><span class="line"><span class="cl">git checkout name     <span class="c1">## 切换分支</span>
</span></span><span class="line"><span class="cl">git checkout –b name  <span class="c1">## 创建并切换到 name 分支上</span>
</span></span><span class="line"><span class="cl">git checkout -- file</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><code>git checkout -- file</code>相当于取消对文档的修改，将最新的本地版本库的本文件复制覆盖它。（比较危险！）</p>
</blockquote>
<h3 id="refloglog">reflog,log</h3>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git log               <span class="c1">## 显示所有提交过的版本信息：commit id，提交者，日期</span>
</span></span><span class="line"><span class="cl">git reflog            <span class="c1">## 查看历史记录的 commit id</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-lightbulb fa-fw" aria-hidden="true"></i>Tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>想看到自己的操作记录，则可以使用 log 与 reflog，它两个的区别如下：</p>
<ol>
<li><code>git log</code>命令可以显示所有提交过的版本信息；
如果感觉太繁琐，可以加上参数<code>--pretty=oneline</code>，只会显示版本号和提交时的备注信息。</li>
<li><code>git reflog</code>可以查看所有分支的所有操作记录。（包括已经被删除的 commit 记录和 reset 的操作）</li>
</ol></div>
    </div>
  </div>
<h3 id="reset">reset</h3>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git reset --hard HEAD^
</span></span><span class="line"><span class="cl">git reset --hard HEAD~        <span class="c1">## 回退到上一个版本</span>
</span></span><span class="line"><span class="cl">git reset --hard HEAD~100     <span class="c1">## 回退到 100 个版本</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git reset head -- file        <span class="c1">## 不加 file 则全部退回</span>
</span></span><span class="line"><span class="cl">git reset file                <span class="c1">## 将本地仓库的当前版本退回至暂存区，相当于取消暂存</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>版本退回是从本地仓库到暂存区，如果已经提交远程库，此时的版本是低于最新的版本的会拒绝提交，
需要用<code>git push -f origin master</code>强制提交。</p>
</blockquote>
<div class="details admonition danger open">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-skull-crossbones fa-fw" aria-hidden="true"></i>特别提醒<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>如果你<code>git reset --hard HEAD^</code>+<code>git push -f origin master</code>执行完，github 中的记录和本地文件都会回到退回的状态。<strong>简单来说就是一修改了一天的 bug, 完工后，你这一套操作直接打回原形。别慌（实际内心慌的一麻皮。）</strong></p>
<ol>
<li>通过<code>git log -g</code>命令来找到需要恢复的信息对应的 commitid，可以通过提交的时间和记录来辨别，
找到执行<code>reset --hard</code>之前的那个 commit 对应的 commit-id</li>
<li>通过<code>git branch recover_branch commit-id</code>来建立一个新的分支</li>
</ol>
<p><strong>这样，就把到 commitid 为止的代码、各种提交记录等信息都恢复到了 recover_branch 分支上了。</strong></p>
</div>
    </div>
  </div>
<h3 id="status">status</h3>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git status</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>查看你的文件在暂存区和工作目录的状态，默认是较为详细的显示，并提示你可以用何种命令完成你接下来可能要做的事情。</p>
</blockquote>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git status -s</span></span></code></pre></td></tr></table>
</div>
</div><p>较为简单的输出当前的状态，如：</p>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git status -s
</span></span><span class="line"><span class="cl">M  README.md
</span></span><span class="line"><span class="cl"> D hello.rb
</span></span><span class="line"><span class="cl">?? world.java</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>你可以看到，在简短输出中，有两栏。第一栏是暂存区的，第二栏则是工作目录的。这里表示：</p>
</blockquote>
<ul>
<li><code>README.md</code> 在暂存区中的状态是 <code>modify</code></li>
<li><code>hello.rb</code> 在工作目录中的状态是 <code>delete</code></li>
<li><code>world.java</code> 还未添加到版本控制。</li>
</ul>
<h3 id="diff">diff</h3>
<div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git diff XX         <span class="c1">## 查看 XX 文件修改了哪些内容</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git diff            <span class="c1">## 工作目录和暂存区</span>
</span></span><span class="line"><span class="cl">git diff --cached   <span class="c1">## 暂存区和本地仓库</span>
</span></span><span class="line"><span class="cl">git diff HEAD       <span class="c1">## 工作目录和本地仓库</span>
</span></span><span class="line"><span class="cl">git diff --stat     <span class="c1">## 显示信息摘要</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="rm-mv">rm, mv</h3>
<div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git rm                           <span class="c1">## 将文件从暂存区和工作目录删除，-f 为强制删除</span>
</span></span><span class="line"><span class="cl">git rm filename                  <span class="c1">## 删除文件</span>
</span></span><span class="line"><span class="cl">git rm –r dirname                <span class="c1">## 删除文件夹 –r 表示递归所有子目录</span>
</span></span><span class="line"><span class="cl">git rm --cached &lt;path&gt;           <span class="c1">## 将文件从暂存区中删除</span>
</span></span><span class="line"><span class="cl">git mv &lt;old_path&gt; &lt;new_path&gt;</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><code>git rm</code>用来删除文件、目录。<code>git mv</code>命令用于移动或重命名一个文件、目录。</p>
</blockquote>
<p>比如删除 photos 文件，本地删除后，远程仓库还会有，所以</p>
<div class="highlight" id="id-18"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git rm -r photos
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;删除相册&#34;</span>
</span></span><span class="line"><span class="cl">git push</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="submodule">submodule</h3>
<div class="highlight" id="id-19"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git submodule add         <span class="c1">## 添加子模组</span>
</span></span><span class="line"><span class="cl">git submodule init        <span class="c1">## 子模组初始化</span>
</span></span><span class="line"><span class="cl">git submodule update      <span class="c1">## 子模组更新</span>
</span></span><span class="line"><span class="cl">git submodule -help</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition Note open">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-pencil-alt fa-fw" aria-hidden="true"></i>Note<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">当一个远程库有子模组时，直接 clone 子模组只是一个空文件夹，需要进入子模组的空文件夹<code>init</code>和<code>update</code>才行。
或者使用递归克隆<code>git clone --recursive 远程库</code>
子模组更新后，父模组必须更新，因为需要更新 commit id。</div>
    </div>
  </div>
<h3 id="tag">tag</h3>
<div class="highlight" id="id-20"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git tag v1.0
</span></span><span class="line"><span class="cl">git tag -a v1.0                   <span class="c1">## 给最新一次提交打标签</span>
</span></span><span class="line"><span class="cl">git tag -a &lt;tagname&gt; -m <span class="s2">&#34;标签&#34;</span>    <span class="c1">## 指定标签信息命令</span>
</span></span><span class="line"><span class="cl">git show &lt;tagname&gt;                <span class="c1">## 显示标签信息</span>
</span></span><span class="line"><span class="cl">git tag                           <span class="c1">## 查看版本打的 Tag</span>
</span></span><span class="line"><span class="cl">git tag -d v1.0                   <span class="c1">## 删除本地标签</span>
</span></span><span class="line"><span class="cl">git push origin :refs/tags/v1.0   <span class="c1">## 删除远程标签</span>
</span></span><span class="line"><span class="cl">$ git push <span class="o">[</span>remote<span class="o">]</span> <span class="o">[</span>tag<span class="o">]</span>         <span class="c1">## 提交指定 tag</span>
</span></span><span class="line"><span class="cl">$ git push <span class="o">[</span>remote<span class="o">]</span> --tags        <span class="c1">## 提交所有 tag</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition Success open">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-pencil-alt fa-fw" aria-hidden="true"></i>Note<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">当你执行<code>git tag -a</code>命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。
如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。</div>
    </div>
  </div>
<p>例如，假设我们发布了提交 85fc7e7（最后一行），但是那时候忘了给它打标签。 我们现在也可以：</p>
<div class="highlight" id="id-21"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git tag -a v0.9 85fc7e7
</span></span><span class="line"><span class="cl">$ git log --oneline --decorate --graph
</span></span><span class="line"><span class="cl">*   d5e9fc2 <span class="o">(</span>HEAD -&gt; master<span class="o">)</span> Merge branch <span class="s1">&#39;change_site&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span><span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="p">|</span> * <span class="m">7774248</span> <span class="o">(</span>change_site<span class="o">)</span> changed the runoob.php
</span></span><span class="line"><span class="cl">* <span class="p">|</span> c68142b 修改代码
</span></span><span class="line"><span class="cl"><span class="p">|</span>/
</span></span><span class="line"><span class="cl">* c1501a2 removed test.txt、add runoob.php
</span></span><span class="line"><span class="cl">* 3e92c19 add test.txt
</span></span><span class="line"><span class="cl">* 3b58100 <span class="o">(</span>tag: v0.9<span class="o">)</span> 第一次版本提交</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="stash">stash</h3>
<div class="highlight" id="id-22"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git stash               <span class="c1">## 把当前的工作隐藏起来，等以后恢复现场后继续工作</span>
</span></span><span class="line"><span class="cl">git stash list          <span class="c1">## 查看所有被隐藏的文件列表</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="gitk">gitk</h3>
<div class="highlight" id="id-23"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gitk                    <span class="c1">## git 自带 GUI</span>
</span></span><span class="line"><span class="cl">gitk --all</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="githubgitea-等平台-issue-的常用标签">github,gitea 等平台 issue 的常用标签</h2>
<ul>
<li><code>bug</code> 描述的问题是一个 bug</li>
<li><code>enhancement</code> 功能增强，没有 feature 也可以指 New feature or request</li>
<li><code>feature</code> 新功能</li>
<li><code>duplicate</code> 问题重复</li>
<li><code>invalid</code> 可用的，不是 bug</li>
<li><code>question</code> 疑问，需要进一步的信息</li>
<li><code>wontfix</code> 不会修复此问题</li>
<li><code>help-wanted</code> 需要帮助</li>
<li><code>good first issue</code> Good for newcomers</li>
<li><a href="https://www.jianshu.com/p/48b935e36000"target="_blank" rel="external nofollow noopener noreferrer">更多标签<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
</ul>
<h2 id="license">license</h2>
<p></p>
<h2 id="其他">其他</h2>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html"target="_blank" rel="external nofollow noopener noreferrer">常用 Git 命令清单<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://blog.csdn.net/qq1332479771/article/details/56087333"target="_blank" rel="external nofollow noopener noreferrer">github 上 fork 了别人的项目后，再同步更新别人的提交<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://learngitbranching.js.org/"target="_blank" rel="external nofollow noopener noreferrer">Gearn Git Branching<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
</ul>]]></description></item><item><title>Git 命令记录</title><link>https://jianye0428.github.io/posts/gitnotes1/</link><pubDate>Sun, 16 Jul 2023 10:01:28 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/gitnotes1/</guid><description><![CDATA[<h2 id="git-命令汇总">Git 命令汇总</h2>
<h3 id="1-font-colorredgit-rebasefont">1. <strong><font color=red>git rebase</font></strong></h3>
<p>ref: <a href="https://git-scm.com/docs/git-rebase"target="_blank" rel="external nofollow noopener noreferrer">https://git-scm.com/docs/git-rebase<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<ul>
<li>
<p><strong>用法一:<code>git rebase &lt;branch-name&gt;</code></strong> 将topic分支的base由E改为master</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">        A---B---C topic
</span></span><span class="line"><span class="cl">        /
</span></span><span class="line"><span class="cl">D---E---F---G master</span></span></code></pre></td></tr></table>
</div>
</div><p>运行:</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git rebase master
</span></span><span class="line"><span class="cl">git rebase master topic</span></span></code></pre></td></tr></table>
</div>
</div><p>结果:</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">                A<span class="s1">&#39;--B&#39;</span>--C<span class="err">&#39;</span> topic
</span></span><span class="line"><span class="cl">                /
</span></span><span class="line"><span class="cl">D---E---F---G master</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>if upstream branch already has a change like below:</p>
</blockquote>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">        A---B---C topic
</span></span><span class="line"><span class="cl">        /
</span></span><span class="line"><span class="cl">D---E---A<span class="err">&#39;</span>---F master</span></span></code></pre></td></tr></table>
</div>
</div><p>then run the command <code>git rebase master</code>, you will get following result:</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">                B<span class="s1">&#39;---C&#39;</span> topic
</span></span><span class="line"><span class="cl">              /
</span></span><span class="line"><span class="cl">D---E---A<span class="err">&#39;</span>---F master</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>用法二:<code>git rebase --onto</code></strong>
assume <strong>topic</strong> is based on <strong>next</strong>, and <strong>next</strong> is based on master</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">    o---o---o---o---o  master
</span></span><span class="line"><span class="cl">        <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        o---o---o---o---o  next
</span></span><span class="line"><span class="cl">                        <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>                        o---o---o  topic</span></span></code></pre></td></tr></table>
</div>
</div><p>run the command below:</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git rebase --onto master next topic</span></span></code></pre></td></tr></table>
</div>
</div><p>then we get the result below:</p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">o---o---o---o---o  master
</span></span><span class="line"><span class="cl">    <span class="p">|</span>            <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="p">|</span>             o<span class="s1">&#39;--o&#39;</span>--o<span class="err">&#39;</span>  topic
</span></span><span class="line"><span class="cl">     <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>      o---o---o---o---o  next</span></span></code></pre></td></tr></table>
</div>
</div><p>Another example:
A range of commits could also be removed with rebase. If we have the following situation:</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">E---F---G---H---I---J  topicA</span></span></code></pre></td></tr></table>
</div>
</div><p>then the command</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git rebase --onto topicA~5 topicA~3 topicA</span></span></code></pre></td></tr></table>
</div>
</div><p>would result in the removal of commits F and G:</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">E---H<span class="s1">&#39;---I&#39;</span>---J<span class="err">&#39;</span>  topicA</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>用法三:<code>git rebase -i &lt;commit_id&gt; &lt;commit_id&gt;</code></strong> $\mathbb{\rightarrow}$ 将多个commit合并为一个。</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 执行git log，得到以下commit_ids</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt;21fd585
</span></span><span class="line"><span class="cl">&gt;&gt;&gt;45j3483
</span></span><span class="line"><span class="cl">&gt;&gt;&gt;9i8975d
</span></span><span class="line"><span class="cl">&gt;&gt;&gt;73c20ec</span></span></code></pre></td></tr></table>
</div>
</div><p>目标: 将<strong>21fd585</strong>、<strong>45j3483</strong>、<strong>9i8975d</strong> rebase 到 <strong>73c20ec</strong></p>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git rebase -i 73c20ec  21fd585</span></span></code></pre></td></tr></table>
</div>
</div><p>得到:</p>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pick
</span></span><span class="line"><span class="cl">pick
</span></span><span class="line"><span class="cl">pick
</span></span><span class="line"><span class="cl">pick</span></span></code></pre></td></tr></table>
</div>
</div><p>改为</p>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pick
</span></span><span class="line"><span class="cl">squash
</span></span><span class="line"><span class="cl">squash
</span></span><span class="line"><span class="cl">squash</span></span></code></pre></td></tr></table>
</div>
</div><p>最后，编辑commit内容，
得到</p>
<div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">&gt;&gt;&gt;b8bec33 <span class="c1"># 此处为新的commit</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt;73c20ec</span></span></code></pre></td></tr></table>
</div>
</div><p>推送到remote:</p>
<div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git push -f origin master</span></span></code></pre></td></tr></table>
</div>
</div><p>ref:</p>
<ol>
<li><a href="https://www.bilibili.com/video/BV15h411f74h/"target="_blank" rel="external nofollow noopener noreferrer">https://www.bilibili.com/video/BV15h411f74h/<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://blog.csdn.net/weixin_45953517/article/details/114362752"target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/weixin_45953517/article/details/114362752<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://blog.csdn.net/weixin_44691608/article/details/118740059#t7"target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/weixin_44691608/article/details/118740059#t7<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
</ol>
<blockquote>
<p>遇到detached HEAD的解决办法</p>
</blockquote>
<div class="highlight" id="id-18"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git branch b1
</span></span><span class="line"><span class="cl">git checkout master
</span></span><span class="line"><span class="cl">git merge b1
</span></span><span class="line"><span class="cl">git push origin master
</span></span><span class="line"><span class="cl">git branch -d b1</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="2-font-colorredgit-cherrypickfont">2. <strong><font color=red>git cherrypick</font></strong></h3>
<ul>
<li>将指定的提交用于其他分支
例如:
<div class="highlight" id="id-19"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">a - b - c - d   Master
</span></span><span class="line"><span class="cl">     <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>      e - f - g Feature</span></span></code></pre></td></tr></table>
</div>
</div>run the command below and apply commit(f) to master
<div class="highlight" id="id-20"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git checkout master
</span></span><span class="line"><span class="cl">git cherry-pick f</span></span></code></pre></td></tr></table>
</div>
</div>get the result
<div class="highlight" id="id-21"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">a - b - c - d - f   Master
</span></span><span class="line"><span class="cl">     <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>      e - f - g Feature</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>转移多个提交
<div class="highlight" id="id-22"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 将 A 和 B 两个提交应用到当前分支</span>
</span></span><span class="line"><span class="cl">git cherry-pick &lt;HashA&gt; &lt;HashB&gt;</span></span></code></pre></td></tr></table>
</div>
</div>或者
<div class="highlight" id="id-23"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 该命令可以转移从 A 到 B 的所有提交,它们必须按照正确的顺序放置：提交 A 必须早于提交 B，否则命令将失败，但不会报错。</span>
</span></span><span class="line"><span class="cl">git cherry-pick A..B</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight" id="id-24"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 使用上面的命令，提交 A 将不会包含在 Cherry pick 中， 如果要包含提交 A，可以使用下面的语法。</span>
</span></span><span class="line"><span class="cl">git cherry-pick A^..B</span></span></code></pre></td></tr></table>
</div>
</div>ref:https://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html</li>
</ul>
<h3 id="3-font-colorredgit-submodulefont">3. <strong><font color=red>git submodule</font></strong></h3>
<ul>
<li>将一个repo添加为submodule
<div class="highlight" id="id-25"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git submodule add https://github.com/chaconinc/DbConnector</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>克隆含有子模块的项目
<div class="highlight" id="id-26"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git clone https://github.com/chaconinc/MainProject <span class="c1">#此时包含子模块目录，但是其中没有任何文件</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> MainProject
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> DbConnector/
</span></span><span class="line"><span class="cl"><span class="c1"># 此时有DbConnector目录，但是文件夹是空的</span>
</span></span><span class="line"><span class="cl">git submodule init <span class="c1"># 用来初始化本地配置文件</span>
</span></span><span class="line"><span class="cl">git submodule update <span class="c1"># 从该项目中抓取并检出父项目中列出的合适的提交</span></span></span></code></pre></td></tr></table>
</div>
</div>或者
<div class="highlight" id="id-27"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git clone --recurse-submodules https://github.com/chaconinc/MainProject</span></span></code></pre></td></tr></table>
</div>
</div>或者已经克隆了项目，但是忘记<code>--recurse-submodule</code>, 则使用
<div class="highlight" id="id-28"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git submodule update --init --recursive</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="4-font-colorred拉取远程分支到本地font">4. <strong><font color=red>拉取远程分支到本地</font></strong></h3>
<ul>
<li>
<p>拉取某一个远程的分支，并在创建相应的本地分支名称</p>
<div class="highlight" id="id-29"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git fetch origin remote-branch-name
</span></span><span class="line"><span class="cl">git checkout -b local-branch-name origin/remote-branch-name</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="5-font-colorredgit-tagfont">5. <strong><font color=red>git tag</font></strong></h3>
<ul>
<li>用git tag打标签
<div class="highlight" id="id-30"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git tag -a v1.0
</span></span><span class="line"><span class="cl">git tag -a v0 85fc7e7 <span class="c1">#追加标签</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>git clone 按照tag拉取代码
<div class="highlight" id="id-31"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># git clone --branch [tags标签] [git地址]</span>
</span></span><span class="line"><span class="cl">git clone -b v5.2.0 --depth<span class="o">=</span><span class="m">1</span> http://gitlab地址</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="6-font-colorredgit-stashfont">6. <strong><font color=red>git stash</font></strong></h3>
<ul>
<li><code>git stash</code>:隐藏修改
<div class="highlight" id="id-32"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git stash <span class="c1"># 隐藏修改</span>
</span></span><span class="line"><span class="cl">git stash save <span class="s2">&#34;stash-name&#34;</span> <span class="c1">#给每一个stash取名字</span>
</span></span><span class="line"><span class="cl">git stash pop <span class="c1"># 恢复隐藏的修改</span>
</span></span><span class="line"><span class="cl">git stash list <span class="c1"># 列出所有的隐藏</span>
</span></span><span class="line"><span class="cl">git stash apply <span class="o">[</span>number<span class="o">]</span> <span class="c1"># 指定恢复使用哪一个隐藏修改</span>
</span></span><span class="line"><span class="cl">git stash drop <span class="c1"># 移除某一项修改</span>
</span></span><span class="line"><span class="cl">git stash clear <span class="c1"># 删除所有隐藏的修改</span>
</span></span><span class="line"><span class="cl">git stash show <span class="c1"># 查看隐藏的修改</span>
</span></span><span class="line"><span class="cl">git stash show -p
</span></span><span class="line"><span class="cl">git stash show --patch <span class="c1"># 查看特定的stash的diff</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="7-font-colorred代码回退-git-resetgit-revertfont">7. <strong><font color=red>代码回退: git reset/git revert</font></strong></h3>
<ul>
<li>
<p>ref:https://blog.csdn.net/weixin_35082950/article/details/113629326</p>
</li>
<li>
<p>本地分支版本回退的方法</p>
<div class="highlight" id="id-33"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git reflog <span class="c1"># 找回要回退的版本的commit_id</span>
</span></span><span class="line"><span class="cl">git reset --hard &lt;commit_id&gt;</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>自己的远程分支版本回退的方法</p>
<div class="highlight" id="id-34"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 如果你的错误提交已经推送到自己的远程分支了，那么就需要回滚远程分支了。</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1. 首先要回退本地分支：</span>
</span></span><span class="line"><span class="cl">git reflog
</span></span><span class="line"><span class="cl">git reset --hard &lt;commit_id&gt;
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 强制推送到远程分支</span>
</span></span><span class="line"><span class="cl">git push -f</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>公共远程分支版本回退的问题</p>
<blockquote>
<p>一个显而易见的问题：如果你回退公共远程分支，把别人的提交给丢掉了怎么办？</p>
</blockquote>
<p>假设你的远程master分支情况是这样的:</p>
<div class="highlight" id="id-35"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">A1–A2–B1 <span class="c1">#</span></span></span></code></pre></td></tr></table>
</div>
</div><p>其中A、B分别代表两个人，A1、A2、B1代表各自的提交。并且所有人的本地分支都已经更新到最新版本，和远程分支一致。</p>
<p>这个时候你发现A2这次提交有错误，你用reset回滚远程分支master到A1，那么理想状态是你的队友一拉代码git pull，他们的master分支也回滚了，然而现实却是，你的队友会看到下面的提示：</p>
<div class="highlight" id="id-36"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">   On branch master
</span></span><span class="line"><span class="cl">   Your branch is ahead of <span class="s1">&#39;origin/master&#39;</span> by <span class="m">2</span> commits.
</span></span><span class="line"><span class="cl">   <span class="o">(</span>use <span class="s2">&#34;git push&#34;</span> to publish your <span class="nb">local</span> commits<span class="o">)</span>
</span></span><span class="line"><span class="cl">   nothing to commit, working directory clean</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>也就是说，你的队友的分支并没有主动回退，而是比远程分支超前了两次提交，因为远程分支回退了嘛。</p>
</blockquote>
<div class="highlight" id="id-37"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git revert HEAD <span class="c1">#撤销最近一次提交</span>
</span></span><span class="line"><span class="cl">git revert HEAD~1 <span class="c1">#撤销上上次的提交，注意：数字从0开始</span>
</span></span><span class="line"><span class="cl">git revert 0ffaacc  <span class="c1">#撤销0ffaacc这次提交</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>git revert 命令意思是撤销某次提交。它会产生一个新的提交，虽然代码回退了，但是版本依然是向前的，所以，当你用revert回退之后，所有人pull之后，他们的代码也自动的回退了。
但是，要注意以下几点：</p>
<blockquote>
<p>1、revert 是撤销一次提交，所以后面的commit id是你需要回滚到的版本的前一次提交。
2、使用revert HEAD是撤销最近的一次提交，如果你最近一次提交是用revert命令产生的，那么你再执行一次，就相当于撤销了上次的撤销操作，换句话说，你连续执行两次revert HEAD命令，就跟没执行是一样的。
3、使用revert HEAD~1 表示撤销最近2次提交，这个数字是从0开始的，如果你之前撤销过产生了commi id，那么也会计算在内的。
4、如果使用 revert 撤销的不是最近一次提交，那么一定会有代码冲突，需要你合并代码，合并代码只需要把当前的代码全部去掉，保留之前版本的代码就可以了。</p>
</blockquote>
</blockquote>
</li>
</ul>
<blockquote>
<p>git revert 命令的好处就是不会丢掉别人的提交，即使你撤销后覆盖了别人的提交，他更新代码后，可以在本地用 reset 向前回滚，找到自己的代码，然后拉一下分支，再回来合并上去就可以找回被你覆盖的提交了。</p>
</blockquote>
<p><strong>revert 合并代码，解决冲突</strong>
使用revert命令，如果不是撤销的最近一次提交，那么一定会有冲突，如下所示：</p>
<div class="highlight" id="id-38"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">全部清空
</span></span><span class="line"><span class="cl">第一次提交</span></span></code></pre></td></tr></table>
</div>
</div><p>解决冲突很简单，因为我们只想回到某次提交，因此需要把当前最新的代码去掉即可，也就是HEAD标记的代码:</p>
<div class="highlight" id="id-39"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt; HEAD
</span></span><span class="line"><span class="cl">全部清空
</span></span><span class="line"><span class="cl"><span class="nv">第一次提交</span>
</span></span><span class="line"><span class="cl"><span class="o">=======</span></span></span></code></pre></td></tr></table>
</div>
</div><p>把上面部分代码去掉就可以了，然后再提交一次代码就可以解决冲突了。</p>
<h3 id="8-font-colorredgit-branchfont">8. <strong><font color=red>git branch</font></strong></h3>
<ul>
<li>将本地分支与远程分支关联:
<div class="highlight" id="id-40"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git branch --set-upstream<span class="o">=</span>origin/remote_branch your_branch</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="9-font-colorredgit-commitfont">9. <strong><font color=red>git commit</font></strong></h3>
<ul>
<li><code>git commit --amend</code>: 提交小修改但是不增加<code>commit_id</code>:
<div class="highlight" id="id-41"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git add .
</span></span><span class="line"><span class="cl">git commmit --amend <span class="c1"># 此除可以修改commit message</span>
</span></span><span class="line"><span class="cl">git push origin master</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="10-font-colorredgit-pullfont">10. <strong><font color=red>git pull</font></strong></h3>
<ul>
<li>示例:
<div class="highlight" id="id-42"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li><strong>Examples</strong>：
<ul>
<li>取回origin主机的next分支，与本地的master分支合并
<div class="highlight" id="id-43"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git pull origin next:master</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>远程分支(next)要与当前分支合并，则冒号后面的部分可以省略。
<div class="highlight" id="id-44"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git pull origin next</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名
<div class="highlight" id="id-45"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git pull origin</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>如果当前分支只有一个追踪分支，连远程主机名都可以省略
<div class="highlight" id="id-46"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
<h3 id="11-font-colorredgit-clonefont">11. <strong><font color=red>git clone</font></strong></h3>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA4NjkwOTQ2OA==&amp;mid=2459742421&amp;idx=1&amp;sn=48b3849c03a8e99aa4a557e9643a68d1&amp;chksm=89af6fd53c65887bd2c4a8ada2d5afabbffabf2b390477bc298e7ed11e7a563f3ba83fff9e13&amp;scene=132&amp;exptype=timeline_recommend_article_extendread_extendread_for_notrec#wechat_redirect"target="_blank" rel="external nofollow noopener noreferrer">https://mp.weixin.qq.com/s?__biz=MzA4NjkwOTQ2OA==&mid=2459742421&idx=1&sn=48b3849c03a8e99aa4a557e9643a68d1&chksm=89af6fd53c65887bd2c4a8ada2d5afabbffabf2b390477bc298e7ed11e7a563f3ba83fff9e13&scene=132&exptype=timeline_recommend_article_extendread_extendread_for_notrec#wechat_redirect<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>
<a href="https://blog.csdn.net/sunyctf/article/details/130587970"target="_blank" rel="external nofollow noopener noreferrer">git flow<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>
git pull</p>
]]></description></item><item><title>解决 SourceTree 提交时候 husky 命令失败问题</title><link>https://jianye0428.github.io/posts/sourcetree-husky/</link><pubDate>Mon, 12 Jun 2023 10:58:44 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/sourcetree-husky/</guid><description><![CDATA[<h2 id="问题描述">问题描述</h2>
<p>在使用 SourceTree 提交代码的时候，会出现 husky 命令失败的问题（通过命令行提交代码没有问题），如下图所示：</p>
<p></p>
<p>看错误，是一个 catch 参数的问题，在新版本的 Node 中，catch 参数是可以省略的，但是在旧版本中，catch 参数是必须的。</p>
<p>由于使用了 nvm 管理 Node 版本，项目中的 Node 是正常的，但是 SourceTree 使用的是系统的 Node，所以会出现这个问题。</p>
<h2 id="解决方案">解决方案</h2>
<p>知道了问题的原因，解决起来就很简单了，只需要将 SourceTree husky hook 阶段的 Node 版本切换到项目中的 Node 版本即可。</p>
<p>配置 <code>.huskyrc</code> 文件，内容如下：</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;export PATH=\&#34;</span><span class="k">$(</span>dirname <span class="k">$(</span>which node<span class="k">))</span><span class="s2">:\$PATH\&#34;&#34;</span> &gt; ~/.huskyrc</span></span></code></pre></td></tr></table>
</div>
</div><p>如果你使用了 <code>zsh</code> 和 <code>nvm</code>, 建议在 <code>$ZSH_CUSTOM</code> 目录下添加一个自定义 zsh 脚本。
这个脚本会在你进入包含了 <code>.nvmrc</code> 文件目录中自动切换 node 版本，切换版本后修正 <code>~/.huskyrc</code> 的 path 内容。</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">vim <span class="nv">$ZSH_CUSTOM</span>/nvm_custom.zsh</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="c1"># https://github.com/nvm-sh/nvm#manual-install</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">NVM_DIR</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$HOME</span><span class="s2">/.nvm&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> -s <span class="s2">&#34;</span><span class="nv">$NVM_DIR</span><span class="s2">/nvm.sh&#34;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="se">\.</span> <span class="s2">&#34;</span><span class="nv">$NVM_DIR</span><span class="s2">/nvm.sh&#34;</span>  <span class="c1"># This loads nvm</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> -s <span class="s2">&#34;</span><span class="nv">$NVM_DIR</span><span class="s2">/bash_completion&#34;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="se">\.</span> <span class="s2">&#34;</span><span class="nv">$NVM_DIR</span><span class="s2">/bash_completion&#34;</span>  <span class="c1"># This loads nvm bash_completion</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># https://github.com/nvm-sh/nvm#deeper-shell-integration</span>
</span></span><span class="line"><span class="cl">autoload -U add-zsh-hook
</span></span><span class="line"><span class="cl">load-nvmrc<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="nb">local</span> <span class="nv">node_version</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>nvm version<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">local</span> <span class="nv">nvmrc_path</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>nvm_find_nvmrc<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&#34;</span><span class="nv">$nvmrc_path</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">local</span> <span class="nv">nvmrc_node_version</span><span class="o">=</span><span class="k">$(</span>nvm version <span class="s2">&#34;</span><span class="k">$(</span>cat <span class="s2">&#34;</span><span class="si">${</span><span class="nv">nvmrc_path</span><span class="si">}</span><span class="s2">&#34;</span><span class="k">)</span><span class="s2">&#34;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$nvmrc_node_version</span><span class="s2">&#34;</span> <span class="o">=</span> <span class="s2">&#34;N/A&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">      nvm install
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$nvmrc_node_version</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;</span><span class="nv">$node_version</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">      nvm use
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl">  <span class="k">elif</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$node_version</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;</span><span class="k">$(</span>nvm version default<span class="k">)</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;Reverting to nvm default version&#34;</span>
</span></span><span class="line"><span class="cl">    nvm use default
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># fix husky hook</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># ref: https://github.com/typicode/husky/issues/390#issuecomment-762213421</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;export PATH=\&#34;</span><span class="k">$(</span>dirname <span class="k">$(</span>which node<span class="k">))</span><span class="s2">:\$PATH\&#34;&#34;</span> &gt; ~/.huskyrc
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">add-zsh-hook chpwd load-nvmrc
</span></span><span class="line"><span class="cl">load-nvmrc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># https://github.com/nvm-sh/nvm#use-a-mirror-of-node-binaries</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">NVM_NODEJS_ORG_MIRROR</span><span class="o">=</span>https://mirrors.ustc.edu.cn/node/</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考">参考</h2>
<ul>
<li><a href="https://wxhboy.cn/2022/04/12/%e8%a7%a3%e5%86%b3SourceTree%e6%8f%90%e4%ba%a4%e6%97%b6%e5%80%99husky%e5%91%bd%e4%bb%a4%e5%a4%b1%e8%b4%a5%e9%97%ae%e9%a2%98/"target="_blank" rel="external nofollow noopener noreferrer">https://wxhboy.cn/2022/04/12/解决SourceTree提交时候husky命令失败问题/<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://github.com/typicode/husky/issues/390#issuecomment-762213421"target="_blank" rel="external nofollow noopener noreferrer">https://github.com/typicode/husky/issues/390#issuecomment-762213421<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://github.com/typicode/husky/issues/904#issuecomment-862184954"target="_blank" rel="external nofollow noopener noreferrer">https://github.com/typicode/husky/issues/904#issuecomment-862184954<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://github.com/nvm-sh/nvm#deeper-shell-integration"target="_blank" rel="external nofollow noopener noreferrer">https://github.com/nvm-sh/nvm#deeper-shell-integration<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
</ul>
]]></description></item><item><title>Commit Message Spec</title><link>https://jianye0428.github.io/posts/commit-spec/</link><pubDate>Fri, 12 Aug 2022 15:37:44 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/commit-spec/</guid><description><![CDATA[<p>Commit messages are short descriptions of changes to a repository. We should follow certain standards to effectively describe changes, such as the <a href="https://www.conventionalcommits.org/en/v1.0.0-beta.4/"target="_blank" rel="external nofollow noopener noreferrer">Conventional Commits<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> specification based on the <a href="https://github.com/angular/angular/blob/68a6a07/CONTRIBUTING.md#commit"target="_blank" rel="external nofollow noopener noreferrer">Angular convention<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> that is most used on GitHub, or each development team can simplify and formulate their own commit specification. This is not only conducive to the automatic generation of Changelog in the later stage, but more importantly, when a bug occurs, the entire warehouse can be quickly checked, the problem point can be accurately located, and the version can be reverted.</p>
<h2 id="format">Format</h2>
<p><code>[{emoji} ]{type}[({module})]: {subject within 50 words}[ (#{issue/pull request})]</code></p>
<p>example:</p>
<ul>
<li>&#x1f389; Feat: add shortcode fixit-encryptor shortcode (#123)</li>
<li>&#x2b06;&#xfe0f; Chore(libs): update Artalk from 2.2.12 to 2.3.4 (#150)</li>
</ul>
<h2 id="emoji">Emoji</h2>
<ul>
<li><a href="https://gitmoji.dev"target="_blank" rel="external nofollow noopener noreferrer">https://gitmoji.dev<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://github.com/maixiaojie/git-emoji-zh.git"target="_blank" rel="external nofollow noopener noreferrer">vscode plugin<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li>utools plugin <code>GitEmoji</code></li>
</ul>
<h2 id="message">Message</h2>
<table>
<thead>
<tr>
<th style="text-align:left">Emoji</th>
<th style="text-align:left">Type</th>
<th style="text-align:left">Example</th>
<th style="text-align:left">Description (No Ambiguous)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&#x1f389; <br>&#x2728;</td>
<td style="text-align:left">Feat</td>
<td style="text-align:left">Feat: add {feature}</td>
<td style="text-align:left">new feature</td>
</tr>
<tr>
<td style="text-align:left">&#x1f69a;</td>
<td style="text-align:left"></td>
<td style="text-align:left">Feat: adjust/migrate {feature name}, {change details}</td>
<td style="text-align:left">For the adjustment feature, it is necessary to describe the current situation (before) and after adjustment (after)</td>
</tr>
<tr>
<td style="text-align:left">&#x1f525;</td>
<td style="text-align:left"></td>
<td style="text-align:left">Feat: delete {feature name}, {deletion reason}</td>
<td style="text-align:left">If the feature is deleted, the reason for deletion must be explained</td>
</tr>
<tr>
<td style="text-align:left">&#x1f41b; <br>&#x1f6a7; <br>&#x1f6a8;</td>
<td style="text-align:left">Fix</td>
<td style="text-align:left">Fix: fix {bug description}</td>
<td style="text-align:left">Fix known bugs</td>
</tr>
<tr>
<td style="text-align:left">&#x1f3a8; <br>&#x1f484; <br>&#x270f;&#xfe0f;</td>
<td style="text-align:left">Style</td>
<td style="text-align:left">Style: Typesetting/CSS style {optimizing content}</td>
<td style="text-align:left">Changes that do not affect code operation, such as code layout and style change</td>
</tr>
<tr>
<td style="text-align:left">&#x267b;&#xfe0f;</td>
<td style="text-align:left">Refactor</td>
<td style="text-align:left">Refactor: override {feature name}</td>
<td style="text-align:left">It is neither a new function nor a code change to fix a bug. Simply rewriting the code of a function does not affect the function result</td>
</tr>
<tr>
<td style="text-align:left">&#x26a1;</td>
<td style="text-align:left">Perf</td>
<td style="text-align:left">Perf: improve performance {function name}, {improve content}</td>
<td style="text-align:left">Optimize code performance</td>
</tr>
<tr>
<td style="text-align:left">&#x23ea;</td>
<td style="text-align:left">Revert</td>
<td style="text-align:left">Revert: restore version {commit message of restore version}</td>
<td style="text-align:left">Restore the version of one commit</td>
</tr>
<tr>
<td style="text-align:left">&#x1f4dd; <br>&#x270f;&#xfe0f;</td>
<td style="text-align:left">Docs</td>
<td style="text-align:left">Docs: revise comments/update documents</td>
<td style="text-align:left">Adjustment of documents and notes</td>
</tr>
<tr>
<td style="text-align:left">&#x1f527;</td>
<td style="text-align:left">Chore</td>
<td style="text-align:left">Chore: update plugin version</td>
<td style="text-align:left">Changes in the construction process or auxiliary tools</td>
</tr>
</tbody>
</table>]]></description></item><item><title>Hugo 使用 GitHub Actions 部署到 GithHb Pages 和 腾讯云 cos 桶</title><link>https://jianye0428.github.io/posts/github-actions/</link><pubDate>Mon, 04 Oct 2021 23:46:49 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/github-actions/</guid><description><![CDATA[<div class="details admonition quote open">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>解決痛點<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">Github Actions 真是靜態博客的福音，有了它 hugo, hexo 等博客構建過程可以丟給 Github 的服務器幫我們做了。<br>
也就是説實現了在線寫靜態博客的需求。</div>
    </div>
  </div>
<h2 id="準備">準備</h2>
<p>工作流程涉及到兩個倉庫和一個 cos 桶，例如：</p>
<blockquote>
<ul>
<li>Lruihao/hugo-blog # Blog source repository</li>
<li>Lruihao/lruihao.github.io # GitHub pages repository</li>
<li>blog-1256932288 # COS bucket</li>
</ul>
</blockquote>
<h2 id="github-actions">Github Actions</h2>
<h3 id="創建-workflows-任務">創建 workflows 任務</h3>
<p>創建 <code>hugo-site/.github/workflows/deploy.yml</code>, 這個文件會寫一些命令告訴 Github 在我們提交源碼的時候，它要幫我們做哪些事情。</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Auto Deploy hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">push]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">Explore-GitHub-Actions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Check out repository code</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="l">recursive</span><span class="w"> </span><span class="c"># Fetch Hugo themes (true OR recursive)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w"> </span><span class="c"># Fetch all history for .GitInfo and .Lastmod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup Hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-hugo@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="l">latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">extended</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build Hugo static files</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hugo --minify</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy to Github Pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-gh-pages@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">deploy_key</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GP_DEPLOY_KEY }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">external_repository</span><span class="p">:</span><span class="w"> </span><span class="l">Lruihao/lruihao.github.io</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">publish_branch</span><span class="p">:</span><span class="w"> </span><span class="l">main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">publish_dir</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">commit_message</span><span class="p">:</span><span class="w"> </span><span class="l">${{ github.event.head_commit.message }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Install coscmd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">sudo pip install coscmd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Configure coscmd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">COS_SECRET_ID</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.COS_SECRET_ID }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">COS_SECRET_KEY</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.COS_SECRET_KEY }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">COS_BUCKET_NAME</span><span class="p">:</span><span class="w"> </span><span class="l">blog-1256932288</span><span class="w"> </span><span class="c"># Change for yourself</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">COS_BUCKET_REGION</span><span class="p">:</span><span class="w"> </span><span class="l">ap-chengdu</span><span class="w"> </span><span class="c"># Change for yourself</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">coscmd config -a $COS_SECRET_ID -s $COS_SECRET_KEY -b $COS_BUCKET_NAME -r $COS_BUCKET_REGION</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy to COS Bucket</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">coscmd upload -r -s --delete -f public/ /</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="配置-github-pages-密鑰">配置 Github Pages 密鑰</h3>
<ol>
<li>為了讓 Lruihao/hugo-blog 提交代碼后自動部署到 Lruihao/lruihao.github.io, 需要生成一對 ssh key.
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ssh-keygen -t rsa -b <span class="m">4096</span> -C <span class="s2">&#34;</span><span class="k">$(</span>git config user.email<span class="k">)</span><span class="s2">&#34;</span> -f gh-pages -N <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># You will get 2 files:</span>
</span></span><span class="line"><span class="cl"><span class="c1"># gh-pages.pub (public key)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># gh-pages     (private key)</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>打開 Lruihao/hugo-blog 倉庫的 settings, 再点击 Secrets, 然後添加 private key, name 为 <code>GP_DEPLOY_KEY</code></li>
<li>打開 Lruihao/lruihao.github.io, 点击 Deploy keys, 添加 public key, name 隨意，<code>Allow write access</code> 一定要勾上，否則無法提交</li>
</ol>
<h3 id="配置-cos-密鑰">配置 COS 密鑰</h3>
<p>打開 Lruihao/hugo-blog 倉庫的 settings, 再点击 Secrets, 然後添加 COS 桶的 <code>secret_id</code> 和 <code>secret_key</code>:</p>
<ul>
<li>COS_SECRET_ID</li>
<li>COS_SECRET_KEY</li>
</ul>
<blockquote>
<p>至此，Github Pages 和 COS 都已經可以通過 Github Actions 自動部署了，有部署記錄后，<br>
打開 Lruihao/hugo-blog -&gt; Actions 可以看到構建過程和結果，構建失敗也會收到 Github 發給你的郵件。</p>
</blockquote>
<h2 id="cos-自動同步-備用">COS 自動同步 （備用）</h2>
<p>本小節內容和 Github Actions 無關，僅作為 COS 備用上傳方式。</p>
<ul>
<li>COSBrowser</li>
</ul>
<ol>
<li>下載 COS 官方軟件 COSBrowser</li>
<li>點開右上角 工具箱</li>
<li>選擇 文件同步</li>
<li>選擇 本地文件夹 eg. <code>hugo-site/public</code></li>
<li>選擇 存储桶目录</li>
<li>同步类型：單次同步、自動同步、定時同步</li>
</ol>
<blockquote>
<p>同步前先執行 hugo 構建命令，eg. <code>hugo --minify</code><br>
有 Github actions 選單次同步就好，在 Github 不好用時可用。</p>
</blockquote>]]></description></item><item><title>hexo 博客源码备份</title><link>https://jianye0428.github.io/posts/blog-backup/</link><pubDate>Sat, 03 Nov 2018 12:49:28 +0000</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/blog-backup/</guid><description><![CDATA[<div class="featured-image">
        <img src="/posts/blog-backup/images/1.png" referrerpolicy="no-referrer">
      </div><h2 id="备份-hexo-博客">备份 hexo 博客</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">//如果 themes/next（主题文件）下面有。git，请删除这个。git 文件夹。
</span></span><span class="line"><span class="cl">cd hexo
</span></span><span class="line"><span class="cl">git init  //初始化本地仓库
</span></span><span class="line"><span class="cl">git add source themes scaffolds _config.yml package.json package-lock.json  //将必要的文件依次添加
</span></span><span class="line"><span class="cl">git commit -m &#34;blog hexo&#34;
</span></span><span class="line"><span class="cl">git branch hexo  //新建 hexo 分支
</span></span><span class="line"><span class="cl">git checkout hexo  //切换到 hexo 分支上
</span></span><span class="line"><span class="cl">git remote add origin git@github.com:username/username.github.io.git  //将本地与 Github 项目对接
</span></span><span class="line"><span class="cl">git push origin hexo  //push 到 Github 项目的 hexo 分支上</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="在其他终端克隆和更新-hexo-博客">在其他终端克隆和更新 hexo 博客</h2>
<blockquote>
<p>nodejs,git,hexo 已经安装好，即搭建完成</p>
</blockquote>
<h3 id="克隆-hexo-博客备份">克隆 hexo 博客备份</h3>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git clone -b hexo git@github.com:username/username.github.io.git  //将 Github 中 hexo 分支 clone 到本地
</span></span><span class="line"><span class="cl">cd user.github.io
</span></span><span class="line"><span class="cl">npm install  //注意，这里一定要切换到刚刚 clone 的文件夹内执行，安装必要的所需组件，不用再 init</span></span></code></pre></td></tr></table>
</div>
</div><p>这样我们的备份文件就会原封不动的拷贝到本地。</p>
<h3 id="写新文章并备份和部署备用操作">写新文章并备份和部署（备用操作）</h3>
<blockquote>
<p>其实源码拷下来了，这步不做我们也知道怎么做了，完全没必要按照教程死搬硬套。灵活一点就行了。</p>
</blockquote>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">//进入 username.github.io 文件夹，应是 hexo 分支
</span></span><span class="line"><span class="cl">git pull origin hexo //本地和远端的融合
</span></span><span class="line"><span class="cl">hexo new post &#34;new post name&#34;  //写新文章
</span></span><span class="line"><span class="cl">git add source
</span></span><span class="line"><span class="cl">git commit -m &#34;xxx&#34;
</span></span><span class="line"><span class="cl">git push origin hexo  //备份
</span></span><span class="line"><span class="cl">hexo d -g  //部署</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://blog.csdn.net/Monkey_LZL/article/details/60870891"target="_blank" rel="external nofollow noopener noreferrer">参考<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
]]></description></item><item><title>使用 Git 上传代码到 github, coding 等仓库</title><link>https://jianye0428.github.io/posts/gituse/</link><pubDate>Fri, 26 Oct 2018 21:11:02 +0000</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/gituse/</guid><description><![CDATA[<h3 id="config">config</h3>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git config --global user.name <span class="s2">&#34;Your Name&#34;</span>
</span></span><span class="line"><span class="cl">git config --global user.email <span class="s2">&#34;email@example.com&#34;</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>第一次使用 git 的时候需要设置提交者信息。<br>
注意：<br>
如果用了 <code>--global</code> 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。<br>
如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 <code>--global</code> 选项重新配置即可，新的设定保存在当前项目的 <code>.git/config</code> 文件里。</p>
</blockquote>
<h3 id="生成-ssh">生成 ssh</h3>
<p>由于你的本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以我们需要配置验证信息：<br>
使用以下命令生成 SSH Key：</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ssh-keygen -t rsa -C &#34;youremail@example.com&#34;</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>后面的 <code>your_email@youremail.com</code> 改为你在 Github 上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在 <code>C:\Users\用户名、</code>或者<code>~/</code> 下生成 <code>.ssh</code>文件夹，进去，打开 <code>id_rsa.pub</code>，复制里面的 key。去 github、coding 等平台配置 SSH 公钥（根据自己情况）</p>
</blockquote>
<h3 id="创建本地代码库">创建本地代码库</h3>
<p>在本地创建一个文件夹，作为你上传代码的本地仓库，在这个文件夹内点击右键，选择 Git Bash Here，首先要初始化本地仓库：</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git init</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来进行远程代码库克隆（事先在 coding 等中建立一个项目，就是你需要链接的仓库）</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git clone https://github.com/Lruihao/Lruihao.github.io.git</span></span></code></pre></td></tr></table>
</div>
</div><p>克隆时会出现输入账号密码的环节正确输入即可。</p>
<h3 id="代码推送重点">代码推送（重点）</h3>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git status
</span></span><span class="line"><span class="cl">git add *
</span></span><span class="line"><span class="cl">git commit -m &#34;代码备注随便写&#34;
</span></span><span class="line"><span class="cl">git push origin master</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><a href="https://learngitbranching.js.org/"target="_blank" rel="external nofollow noopener noreferrer">Gearn Git Branching<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
</ul>
]]></description></item><item><title>linux/centos 下的安装 git</title><link>https://jianye0428.github.io/posts/linux-git/</link><pubDate>Sat, 22 Sep 2018 22:28:45 +0000</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/linux-git/</guid><description><![CDATA[<h3 id="下载-git">下载 git</h3>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">wget https://github.com/git/git/archive/v2.14.1.zip</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装依赖">安装依赖</h3>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo yum -y install zlib-devel openssl-devel cpio expat-devel gettext-devel curl-devel perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="解压-git">解压 git</h3>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">unzip v2.14.1.zip</span></span></code></pre></td></tr></table>
</div>
</div><p>注：
unzip 命令用不了，具体步骤如下：</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">#yum list | grep zip/unzip 
</span></span><span class="line"><span class="cl">#yum install zip
</span></span><span class="line"><span class="cl">#yum install unzip</span></span></code></pre></td></tr></table>
</div>
</div><p>基本完成，如果在编译的时候出现错误：<code>gcc : error trying to exec 'cc1plus': execvp : No sunch file or directory</code><br>
可以用<code>gcc -v/g++ -v</code> 来查看 gcc 版本，会发现没有安装。安装如下：</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">#yum list | grep gcc
</span></span><span class="line"><span class="cl">#yum install gcc-c++
</span></span><span class="line"><span class="cl">#yum install unzip</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="将-git-安装到usrlocal-上">将 git 安装到/usr/local 上</h3>
<p>先进入 git 文件夹<br>
编译<br>
安装</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cd git-2.14.1
</span></span><span class="line"><span class="cl">make prefix=/usr/local all
</span></span><span class="line"><span class="cl">make prefix=/usr/local install</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="验证是否安装完成">验证是否安装完成</h3>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git --version</span></span></code></pre></td></tr></table>
</div>
</div><p>&hellip;</p>
]]></description></item><item><title>git index.lock</title><link>https://jianye0428.github.io/posts/git-index-lock/</link><pubDate>Tue, 14 Aug 2018 19:21:23 +0000</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/git-index-lock/</guid><description><![CDATA[<p>在 git 没有运行完成之前强制关闭，下次提交的时候会产以下生错误，或者类似的。</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">fatal: Unable to create <span class="s1">&#39;/xxx/xx/.git/index.lock&#39;</span>: File exists.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">If no other git process is currently running, this probably means a
</span></span><span class="line"><span class="cl">git process crashed in this repository earlier. Make sure no other git
</span></span><span class="line"><span class="cl">process is running and remove the file manually to <span class="k">continue</span>.</span></span></code></pre></td></tr></table>
</div>
</div><p>原因是在你进行某些比较费时的 git 操作时自动生成，操作结束后自动删除，相当于一个锁定文件，目的在于防止对一个目录同时进行多个操作。</p>
<p>有时强制关闭进行中的 git 操作，这个文件没有被自动删除，之后你就无法进行其他操作，必须手动删除，进入。git 文件中删除，打开显示隐藏文件。如果没有看见。git 文件夹，可以直接用命令<code> rm -f ./.git/index.lock</code>。之后就可以正常使用。</p>
]]></description></item></channel></rss>