<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Pandas - 分类 - yejian's blog</title><link>https://lruihao.cn/categories/pandas/</link><description>Pandas - 分类 - yejian's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>18817571704@163.com (Jian YE)</managingEditor><webMaster>18817571704@163.com (Jian YE)</webMaster><lastBuildDate>Sat, 15 Jul 2023 19:09:21 +0800</lastBuildDate><atom:link href="https://lruihao.cn/categories/pandas/" rel="self" type="application/rss+xml"/><item><title>Pandas Notes 1</title><link>https://lruihao.cn/posts/pandasnotes1/</link><pubDate>Sat, 15 Jul 2023 19:09:21 +0800</pubDate><author>Jian YE</author><guid>https://lruihao.cn/posts/pandasnotes1/</guid><description><![CDATA[<h1 id="pandas-notes">Pandas Notes</h1>
<h2 id="inputoutput">Input/Output</h2>
<ol>
<li>
<p><strong><code>pd.read_csv(filepath)</code>: 读取csv文件</strong>
ref: <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html?highlight=read_csv"target="_blank" rel="external nofollow noopener noreferrer">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html?highlight=read_csv<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</li>
<li>
<p><strong><code>pd.read_pickle()</code>:读取pickle数据</strong></p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span>
</span></span><span class="line"><span class="cl"><span class="n">pandas</span><span class="o">.</span><span class="n">read_pickle</span><span class="p">(</span><span class="n">filepath_or_buffer</span><span class="p">,</span> <span class="n">compression</span><span class="o">=</span><span class="s1">&#39;infer&#39;</span><span class="p">,</span> <span class="n">storage_options</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>ref: <a href="https://pandas.pydata.org/docs/reference/api/pandas.read_pickle.html"target="_blank" rel="external nofollow noopener noreferrer">https://pandas.pydata.org/docs/reference/api/pandas.read_pickle.html<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>
Parameters:</p>
<ul>
<li><strong><code>filepath_or_buffer:</code></strong> 文件名或者文件路径
字符串、路径对象(实现 os.PathLike[str] )或 file-like 对象实现二进制 readlines() 函数。</li>
<li><strong><code>compression:</code></strong> <code>str or dict, default ‘infer’</code>
用于on-disk 数据的即时解压缩。如果 ‘infer’ 和 ‘filepath_or_buffer’ 是 path-like，则从以下扩展名检测压缩：“.gz”、“.bz2”、“.zip”、“.xz”或“.zst”(否则不压缩)。如果使用‘zip’，ZIP 文件必须只包含一个要读入的数据文件。设置为None 不解压缩。也可以是键 &lsquo;method&rsquo; 设置为 {<code>'zip'</code> , <code>'gzip'</code> , <code>'bz2'</code> , <code>'zstd'</code> } 之一的字典，其他键值对分别转发到 zipfile.ZipFile , gzip.GzipFile , bz2.BZ2File 或 zstandard.ZstdDecompressor 。例如，可以使用自定义压缩字典为 Zstandard 解压缩传递以下内容：<u>compression={&lsquo;method&rsquo;: &lsquo;zstd&rsquo;, &lsquo;dict_data&rsquo;: my_compression_dict}</u>。</li>
<li><strong><code>storage_options:</code></strong> <code>dict, optional</code>
对特定存储连接有意义的额外选项，例如主机、端口、用户名、密码等。对于 HTTP(S) URL，键值对作为标头选项转发到 urllib。对于其他 URL(例如以 “s3://” 和 “gcs://” 开头)，键值对被转发到fsspec 。有关详细信息，请参阅fsspec和urllib。</li>
</ul>
</li>
</ol>
<h2 id="general-functions-通用函数">General functions 通用函数</h2>
<h2 id="series">Series</h2>
<h2 id="dataframe">DataFrame</h2>
<p>DataFrame是一个【表格型】的数据结构，可以看做是【由Series组成的字典】（共用同一个索引）。DataFrame由按一定顺序排列的多列数据组成。设计初衷是将Series的使用场景从一维拓展到多维。</p>
<h3 id="constructor">Constructor</h3>
<ol>
<li><strong><code>DataFrame[data, index, columns, dtype, copy]</code>: 构造一个DataFrame对象</strong></li>
</ol>
<h3 id="attributes-and-underlying-data">Attributes and underlying data</h3>
<ol>
<li><strong><code>DataFrame.index</code>: 行标签(行信息)-&gt;第0列的信息</strong></li>
<li><strong><code>DataFrame.columns</code>: 列标签(列信息)-&gt; 第0行的信息</strong></li>
<li><strong><code>DataFrame.dtypes</code>: 返回DataFrame的数据类型</strong></li>
<li><strong><code>DataFrame.info([verbose, buf, max_cols, ...])</code>: 返回df的信息</strong></li>
<li><strong><code>DataFrame.select_dtypes([include, exclude])</code>: 返回DataFrame中根据columns筛选的部分数据</strong></li>
<li><strong><code>DataFrame.values</code>: 以numpy数组的形式返回数据</strong></li>
<li><strong><code>DataFrame.axes</code>: 返回一个list，其中是df的axes</strong></li>
<li><strong><code>DataFrame.ndim</code>: 返回int，代表axes/array的数量</strong></li>
<li><strong><code>DataFrame.shape</code>: 返回tuple, 代表df维度</strong></li>
<li><strong><code>DataFrame.memory_usage([index, deep])</code>: 返回数据内存使用情况</strong></li>
<li><strong><code>DataFrame.empty</code>: 判断df是否为空</strong></li>
<li><strong><code>DataFrame.set_flags(*[, copy, ...])</code>: 返回带有更新标记的df</strong>
DataFrame.set_flags(*, copy=False, allows_duplicate_labels=None)
<ul>
<li>参数：<code>allows_duplicate_labels</code>：布尔型，可选。返回的对象是否允许重复标签。</li>
<li>返回：Series或DataFrame, 与调用者相同的类型。</li>
<li>注意：此方法返回一个新对象，该对象是与输入数据相同的视图。改变输入或输出值将反映在另一个中。此方法旨在用于方法链中。“Flags” 与 “metadata” 不同。标志反映了 pandas 对象(Series 或 DataFrame)的属性。元数据是 index 据集的属性，应存储在 DataFrame.attrs 中。</li>
<li>demo:
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s2">&#34;A&#34;</span><span class="p">:[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]})</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">df</span><span class="o">.</span><span class="n">flags</span><span class="o">.</span><span class="n">allows_duplicate_labels</span>
</span></span><span class="line"><span class="cl"><span class="kc">True</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">df2</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">set_flags</span><span class="p">(</span><span class="n">allows_duplicate_labels</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">df2</span><span class="o">.</span><span class="n">flags</span><span class="o">.</span><span class="n">allows_duplicate_labels</span>
</span></span><span class="line"><span class="cl"><span class="kc">False</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li><strong><code>DataFrame.groupby()</code>:</strong></li>
</ol>
<h3 id="conversion">Conversion</h3>
<ol>
<li><strong><code>DataFrame.astype(dtype[,copy, errors])</code>:数据类型转换</strong></li>
<li><strong><code>DataFrame.convert_dtypes([infer_objects, ...])</code>:根据现存数据推断pd.NA数据类型</strong></li>
<li><strong><code>DataFrame.infer_objects()</code>:根据现有数据大部分数据推断类型</strong></li>
<li><strong><code>DataFrame.copy([deep])</code>:深度拷贝</strong>
<ul>
<li>demo</li>
</ul>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;a&#34;</span><span class="p">,</span><span class="s2">&#34;b&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">deep</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span><span class="c1"># 深拷贝</span>
</span></span><span class="line"><span class="cl"><span class="n">shallow</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">deep</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span> <span class="c1"># 浅拷贝</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li><strong><code>DataFrame.bool()</code>:判断数据是ture还是false，只针对单个元素对象</strong></li>
</ol>
<h3 id="indexingiteration">Indexing，iteration</h3>
<ol>
<li><strong><code>DataFrame.head([n])</code>: return the first n rows</strong></li>
<li><strong><code>DataFrame.at[4,'B']</code>: 用标签取值(行名为4，列名为B的值)</strong></li>
<li><strong><code>DataFrame.iat[1,2]</code>: 用行列的整数取值(第1行,第二列的值)</strong></li>
<li><strong><code>DataFrame.loc['cobra':'viper', 'max_speed']</code>: 取行名为&rsquo;cobra&rsquo;至&rsquo;viper&rsquo;, 列名为&rsquo;max_speed&rsquo;的值</strong></li>
<li><strong><code>DataFrame.iloc</code>: 通过行列的值取值</strong>
<ul>
<li><code>df.iloc[0]:取第0行，所有列的值，返回series类型</code></li>
<li><code>df.iloc[[0]]:取得第0行，所有列的值，返回df类型</code></li>
<li><code>df.iloc[[0,1]]:取得第0行和第1行的所有列的值</code></li>
<li><code>df.iloc[:3]:取得第0，1，2行的值</code></li>
<li><code>df.iloc[[True, False, True]]: 用True/False标记要取的行</code></li>
<li><code>df.iloc[lambda x:x.index % 2 == 0]: 用lambda标记要取的行</code></li>
<li><code>df.iloc[0,1]:取得第0行，第1列的值</code></li>
<li><code>df.iloc[[0,2],[1,3]]: 取得第0行，第2行，第1列，第3列的值</code></li>
<li><code>df.iloc[1:3, 0:3]: 取得第1行，第2行，第0列，第1列，第2列的值</code></li>
<li><code>df.iloc[:, [True,False,True,False]]:取所有的行，用True/False取相应的列</code></li>
<li><code>df.iloc[:,lambda df:[0,2]]: 取所有的行，取第0列，第2列</code></li>
</ul>
</li>
<li><strong><code>df.insert(loc, column, value, allow_duplicates=False):插入相应的列</code></strong>
<ul>
<li>loc:(int), 列的位置</li>
<li>column: 列的名字，一般类型为string</li>
<li>value: 列数据的值</li>
</ul>
</li>
<li><strong><code>df.drop()</code>:删除固定的行或者列</strong></li>
<li><strong><code>df.drop_duplicates(subset, keep, inplace=False,ignore_index=False):删除重复的行或者列</code></strong>
<ul>
<li>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"></code></pre></td></tr></table>
</div>
</div></li>
<li><code>subset: 根据某一列的值，删除行数据</code></li>
<li><code>keep: 设置保留第一次出现的数据或者最后一次出现的数据</code></li>
</ul>
</li>
<li></li>
<li></li>
</ol>
<h2 id="heading"></h2>
]]></description></item></channel></rss>