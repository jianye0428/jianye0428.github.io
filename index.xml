<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>yejian's blog</title><link>https://jianye0428.github.io/</link><description>Lruihao's Note 李瑞豪的博客：探索、分享、记录自己在工作生活学习到一些东西。人知道得越多，就就会发现无知的越多。有更广袤世界可以探索，真是莫大的快乐啊！</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>18817571704@163.com (Jian YE)</managingEditor><webMaster>18817571704@163.com (Jian YE)</webMaster><lastBuildDate>Fri, 02 Feb 2024 09:32:18 +0800</lastBuildDate><atom:link href="https://jianye0428.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Git 命令查询</title><link>https://jianye0428.github.io/posts/commandsheet/</link><pubDate>Fri, 02 Feb 2024 09:32:18 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/commandsheet/</guid><description><![CDATA[<h1 id="git-常用命令汇总">Git 常用命令汇总</h1>
<h2 id="常规操作">常规操作</h2>
<ul>
<li><code>git push origin test</code> 推送本地分支到远程仓库</li>
<li><code>git rm -r --cached</code> 文件/文件夹名字 取消文件被版本控制</li>
<li><code>git reflog</code> 获取执行过的命令</li>
<li><code>git log --graph</code> 查看分支合并图</li>
<li><code>git merge --no-ff -m '合并描述'</code> 分支名 不使用<code>Fast forward</code>方式合并，采用这种方式合并可以看到合并记录</li>
<li><code>git check-ignore -v 文件名</code> 查看忽略规则</li>
<li><code>git add -f 文件名</code> 强制将文件提交</li>
</ul>
<h3 id="git-创建项目仓库">Git 创建项目仓库</h3>
<ul>
<li><code>git init</code> 初始化</li>
<li><code>git remote add origin url</code> 关联远程仓库</li>
<li><code>git pull</code></li>
<li><code>git fetch</code> 获取远程仓库中所有的分支到本地</li>
</ul>
<h3 id="忽略已加入到版本库中的文件">忽略已加入到版本库中的文件</h3>
<ul>
<li><code>git update-index --assume-unchanged file</code> 忽略单个文件</li>
<li><code>git rm -r --cached 文件/文件夹名字</code> (. 忽略全部文件)</li>
</ul>
<h3 id="取消忽略文件">取消忽略文件</h3>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git update-index --no-assume-unchanged file</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="拉取上传免密码">拉取、上传免密码</h3>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git config --global credential.helper store</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="分支操作">分支操作</h2>
<p><code>git branch</code> 创建分支
<code>git branch -b</code> 创建并切换到新建的分支上
<code>git checkout</code> 切换分支
<code>git branch</code> 查看分支列表
<code>git branch -v</code> 查看所有分支的最后一次操作
<code>git branch -vv</code> 查看当前分支
<code>git branch -b 分支名 origin/分支名</code> 创建远程分支到本地
<code>git branch --merged</code> 查看别的分支和当前分支合并过的分支
<code>git branch --no-merged</code> 查看未与当前分支合并的分支
<code>git branch -d 分支名</code> 删除本地分支
<code>git branch -D 分支名</code> 强行删除分支
<code>git push origin --delete 分支名</code> 删除远程仓库分支
<code>git merge 分支名</code> 合并分支到当前分支上</p>
<h2 id="暂存操作">暂存操作</h2>
<ul>
<li><code>git stash</code> 暂存当前修改</li>
<li><code>git stash apply</code> 恢复最近的一次暂存</li>
<li><code>git stash pop</code> 恢复暂存并删除暂存记录</li>
<li><code>git stash list</code> 查看暂存列表</li>
<li><code>git stash drop 暂存名</code>(例：stash@{0}) 移除某次暂存</li>
<li><code>git stash clear</code> 清除暂存</li>
</ul>
<h2 id="回退操作">回退操作</h2>
<ul>
<li><code>git reset --hard HEAD^</code> 回退到上一个版本</li>
<li><code>git reset --hard commitId</code> 回退到某个版本</li>
<li><code>git checkout -- file</code>撤销修改的文件(如果文件加入到了暂存区，则回退到暂存区的，如果文件加入到了版本库，则还原至加入版本库之后的状态)</li>
<li><code>git reset HEAD file</code> 撤回暂存区的文件修改到工作区</li>
</ul>
<h2 id="标签操作">标签操作</h2>
<p><code>git tag 标签名</code> 添加标签(默认对当前版本)
<code>git tag 标签名 commitId</code> 对某一提交记录打标签
<code>git tag -a 标签名 -m '描述'</code> 创建新标签并增加备注
<code>git tag</code> 列出所有标签列表
<code>git show 标签名</code> 查看标签信息
<code>git tag -d 标签名</code> 删除本地标签
<code>git push origin 标签名</code> 推送标签到远程仓库
<code>git push origin --tags</code> 推送所有标签到远程仓库
<code>git push origin :refs/tags/标签名</code> 从远程仓库中删除标签</p>
<h2 id="远程仓库">远程仓库</h2>
<p><code>git remote -v</code>查看远程仓库地址
<code>git remote show origin</code>查看远程仓库详情信息</p>
<h2 id="查看某个-commit-提交属于哪个分支">查看某个 commit 提交属于哪个分支</h2>
<p><code>git branch -l --contains &lt;commit_id&gt;</code> 本地分支
<code>git branch -r --contains &lt;commit_id&gt;</code> 远程分支</p>
<ul>
<li><code>git branch --all --contains &lt;commit_id&gt;</code> 所有分支</li>
</ul>
]]></description></item><item><title>Git 核心知识点总结</title><link>https://jianye0428.github.io/posts/gitnotes2/</link><pubDate>Fri, 02 Feb 2024 08:13:18 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/gitnotes2/</guid><description><![CDATA[<h1 id="git核心知识总结">Git核心知识总结</h1>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">Git 总览</div>
</center>
<br>
<h2 id="1什么是git">1.什么是Git</h2>
<p>在了解Git之前，我们先了解一下版本控制这个概念。</p>
<h3 id="11-什么是版本控制">1.1 什么是版本控制</h3>
<p>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 除了项目源代码，你可以对任何类型的文件进行版本控制。</p>
<h3 id="12-为什么需要版本控制">1.2 为什么需要版本控制</h3>
<p>有了它你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态，你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致项目问题出现的原因，又是谁在何时报告了某个功能缺陷等等。</p>
<h3 id="13-本地版本控制系统">1.3 本地版本控制系统</h3>
<p>许多人习惯用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。 这么做唯一的好处就是简单，但是特别容易犯错。 有时候会混淆所在的工作目录，一不小心会写错文件或者覆盖意想外的文件。</p>
<p>为了解决这个问题，人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异。</p>
<p>Git是当前最先进、最主流的分布式版本控制系统，免费、开源！核心能力就是版本控制。再具体一点，就是面向代码文件的版本控制，代码的任何修改历史都会被记录管理起来，意味着可以恢复到到以前的任意时刻状态。支持跨区域多人协作编辑，是团队项目开发的必备基础，所以Git也就成了程序员的必备技能。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">本地版本控制系统</div>
</center>
<br>
<h2 id="2git的来源">2.Git的来源</h2>
<p>Git是一种分布式版本控制系统，它的设计和开发最初由林纳斯·托瓦兹（Linus Torvalds）领导，他也是Linux操作系统的创始人。Git的开发始于2005年，其背景和初始目的与Linux开发社区的需求密切相关。</p>
<h3 id="21-背景和初始动机">2.1 背景和初始动机</h3>
<p>在Git之前，Linux内核的开发使用的是一个名为BitKeeper的商业版本控制系统。这个系统对Linux社区是免费的，但在2005年，由于一些争议和许可问题，Linux社区失去了对BitKeeper的免费许可。这促使托瓦兹寻找一个新的工具来管理Linux内核的开发。</p>
<p>托瓦兹对版本控制系统有几个明确的需求和目标：</p>
<ol>
<li><strong>「性能」</strong>：由于Linux内核的庞大和复杂性，性能成为一个关键因素。Git需要高效地处理大型项目。</li>
<li><strong>「分布式架构」</strong>：Git被设计为分布式系统，意味着每个开发者的计算机上都有整个代码库的完整历史记录，这样可以减少对中央服务器的依赖。</li>
<li><strong>「数据完整性」</strong>：Git强调数据的完整性。它通过对文件内容和目录结构使用SHA-1哈希来确保代码历史不被篡改。</li>
<li><strong>「简单的分支和合并」</strong>：在Linux开发中，分支和合并操作非常频繁。Git被设计为使这些操作尽可能简单和高效。</li>
</ol>
<h3 id="22-git的发展">2.2 Git的发展</h3>
<p>Git最初是作为一个命令行工具发布的，但随着时间的推移，围绕Git开发了大量的图形界面工具和增强功能，使其更加用户友好。Git迅速在开源社区中获得了广泛的接受，并逐渐成为世界上最流行的版本控制系统。</p>
<h3 id="23-github和git的普及">2.3 GitHub和Git的普及</h3>
<p>Git的普及也与GitHub这样的平台紧密相关。GitHub是一个基于Web的Git版本库托管服务，它提供了图形界面，并增加了如分叉、拉取请求和社交网络功能等特性，这些都极大地促进了Git的普及和开源文化的发展。</p>
<h2 id="3git的特点">3.Git的特点</h2>
<p>开源免费，使用广泛。</p>
<ul>
<li>强大的文档（代码）的历史版本管理，直接记录完整快照（完整内容，而非差异），支持回滚、对比。</li>
<li>分布式多人协作的的代码协同开发，几乎所有操作都是本地执行的，支持代码合并、代码同步。</li>
<li>简单易用的分支管理，支持高效的创建分支、合并分支。</li>
</ul>
<h2 id="4git的基本概念">4.Git的基本概念</h2>
<h3 id="41-概念汇总">4.1 概念汇总</h3>
<table>
<thead>
<tr>
<th style="text-align:left">概念名称</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">工作区（Workspace）</td>
<td style="text-align:left">就是在电脑里能看到的代码库目录，是我们搬砖的地方，新增、修改的文件会提交到暂存区</td>
</tr>
<tr>
<td style="text-align:left">暂存区（stage 或 index）</td>
<td style="text-align:left">用于临时存放文件的修改，实际上上它只是一个文件（.git/index），保存待提交的文件列表信息。</td>
</tr>
<tr>
<td style="text-align:left">版本库/仓库（Repository）</td>
<td style="text-align:left">Git的管理仓库，管理版本的数据库，记录文件/目录状态的地方，所有内容的修改记录（版本）都在这里。</td>
</tr>
<tr>
<td style="text-align:left">服务端/远程仓库（origin 或 remote）</td>
<td style="text-align:left">服务端的版本库，专用的Git服务器，为多人共享提供服务，承担中心服务器的角色。本地版本库通过push指令把代码推送到服务端版本库。</td>
</tr>
<tr>
<td style="text-align:left">本地仓库</td>
<td style="text-align:left">用户机器上直接使用的版本库</td>
</tr>
<tr>
<td style="text-align:left">分支（Branch）</td>
<td style="text-align:left">分支是从主线分离出去的“副本”，可以独立操作而互不干扰，仓库初始化就有一个默认主分支master。</td>
</tr>
<tr>
<td style="text-align:left">头（HEAD）</td>
<td style="text-align:left">HEAD类似一个“指针”，指向当前活动分支的最新版本。</td>
</tr>
<tr>
<td style="text-align:left">提交（Commit）</td>
<td style="text-align:left">把暂存区的所有变更的内容提交到当前仓库的活动分支。</td>
</tr>
<tr>
<td style="text-align:left">推送（Push）</td>
<td style="text-align:left">将本地仓库的版本推送到服务端（远程）仓库，与他人共享。</td>
</tr>
<tr>
<td style="text-align:left">拉取（Pull）</td>
<td style="text-align:left">从服务端（远程）仓库获取更新到本地仓库，获取他人共享的更新。</td>
</tr>
<tr>
<td style="text-align:left">获取（Fetch）</td>
<td style="text-align:left">从服务端（远程）仓库更新，作用同拉取（Pull），区别是不会自动合并。</td>
</tr>
<tr>
<td style="text-align:left">冲突（Conflict）</td>
<td style="text-align:left">多人对同一文件的工作副本进行更改，并将这些更改合并到仓库时就会面临冲突，需要人工合并处理。</td>
</tr>
<tr>
<td style="text-align:left">合并（Merge）</td>
<td style="text-align:left">对有冲突的文件进行合并操作，Git会自动合并变更内容，无法自动处理的冲突内容会提示人工处理。</td>
</tr>
<tr>
<td style="text-align:left">标签（Tags）</td>
<td style="text-align:left">标签指的是某个分支某个特定时间点的状态，可以理解为提交记录的别名，常用来标记版本。</td>
</tr>
<tr>
<td style="text-align:left">master（或main）</td>
<td style="text-align:left">仓库的“master”分支，默认的主分支，初始化仓库就有了。Github上创建的仓库默认名字为“main”</td>
</tr>
<tr>
<td style="text-align:left">origin/master</td>
<td style="text-align:left">表示远程仓库（origin）的“master”分支</td>
</tr>
<tr>
<td style="text-align:left">origin/HEAD</td>
<td style="text-align:left">表示远程仓库（origin）的最新提交的位置，一般情况等于“origin/master”</td>
</tr>
</tbody>
</table>
<h3 id="42-工作区暂存区仓库">4.2 工作区/暂存区/仓库</h3>
<p>工作区（Workspace）就是在电脑里能看到的代码库目录，是我们搬砖的地方，新增、修改的文件会提交到暂存区。</p>
<ul>
<li>在这里新增文件、修改文件内容，或删除文件。</li>
</ul>
<p>暂存区（stage或index）用于临时存放文件的修改，实际上上它只是一个文件（.git/index），保存待提交的文件列表信息。</p>
<ul>
<li>用git add 命令将工作区的修改保存到暂存区。</li>
</ul>
<p>版本库/仓库（Repository仓库）Git的管理仓库，管理版本的数据库，记录文件/目录状态的地方，所有内容的修改记录（版本）都在这里。就是工作区目录下的隐藏文件夹.git，包含暂存区、分支、历史记录等信息。</p>
<ul>
<li>用git commit 命令将暂存区的内容正式提交到版本库。</li>
<li>master 为仓库的默认分支master，HEAD是一个“指针”指向当前分支的最新提交，默认指向最新的master。</li>
</ul>
<h3 id="43-git的基本流程">4.3 Git的基本流程</h3>
<p>Git的工作流程核心就下面几个步骤。</p>
<ol>
<li>准备仓库：创建或从服务端克隆一个仓库。</li>
<li>编写代码：在工作目录中添加、修改代码。</li>
<li>暂存（git add）：将需要进行版本管理的文件放入暂存区域。</li>
<li>提交（git commit）：将暂存区域的文件提交到Git仓库。</li>
<li>推送（git push）：将本地仓库推送到远程仓库，同步版本库。</li>
<li>获取更新（fetch/pull）：从服务端更新到本地，获取他人推送的更新，与他人协作、共享。</li>
</ol>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">Git 工作 流程</div>
</center>
<br>
<ul>
<li><code>git commit -a</code> 指令省略了add到暂存区的步骤，直接提交工作区的修改内容到版本库，不包括新增的文件。</li>
<li><code>git fetch</code>、<code>git pull</code> 都是从远程服务端获取最新记录，区别是git pull多了一个步骤，就是自动合并更新工作区。</li>
<li><code>git checkout .</code> 、<code>git checkout [file]</code> 会清除工作区中未添加到暂存区的修改，用暂存区内容替换工作区。</li>
<li><code>git checkout HEAD .</code>、 <code>git checkout HEAD [file]</code> 会清除工作区、暂存区的修改，用HEAD指向的当前分支最新版本替换暂存区、工作区。</li>
<li><code>git diff</code> 用来对比不同部分之间的区别，如暂存区、工作区，最新版本与未提交内容，不同版本之间等。</li>
<li><code>git reset</code> 是专门用来撤销修改、回退版本的指令，替代上面checkout的撤销功能。</li>
</ul>
<p><strong>「基本的 Git 工作流程如下：」</strong></p>
<ol>
<li>在工作目录中修改文件。</li>
<li>暂存文件，将文件的快照放入暂存区域。</li>
<li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</li>
</ol>
<h3 id="44-git的状态">4.4 Git的状态</h3>
<p>Git在执行提交的时候，不是直接将工作区的修改保存到仓库，而是将暂存区域的修改保存到仓库。要提交文件，首先需要把文件加入到暂存区域中。因此，Git管理的文件有三（+2）种状态：</p>
<ul>
<li><strong>「未跟踪(untracked)：」</strong> 新添加的文件，或被移除跟踪的文件，未建立跟踪，通过git add添加暂存并建立跟踪。</li>
<li><strong>「未修改：」</strong> 从仓库签出的文件默认状态，修改后就是“已修改”状态了。</li>
<li><strong>「已修改(modified)：」</strong> 文件被修改后的状态。</li>
<li><strong>「已暂存(staged)：」</strong> 修改、新增的文件添加到暂存区后的状态。</li>
<li><strong>「已提交(committed)：」</strong> 从暂存区提交到版本库。</li>
</ul>
<h2 id="5git的安装">5.Git的安装</h2>
<p>Git官网：https://www.git-scm.com/ 下载安装包进行安装。Git的使用有两种方式：</p>
<ul>
<li><strong>「命令行」</strong>：Git的命令通过系统命令行工具，或Git提供的命令行工具运行（<code>C:\Program Files\Git\git-bash.exe</code>）</li>
<li><strong>「GUI工具」</strong>：Windows(GUI)、Mac(GUI)工具，需单独安装，使用更简单、更易上手。</li>
</ul>
<p><strong>「下一步傻瓜式安装即可。」</strong></p>
<p>指令<code>git --version</code>查看安装版本号</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ git --version
</span></span><span class="line"><span class="cl">git version 2.39.2.windows.1</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="6git快速入门">6.Git快速入门</h2>
<h3 id="61-创建仓库">6.1 创建仓库</h3>
<p>创建仓库的方式有两种。</p>
<ol>
<li>一种是创建全新的仓库，基于<code>git init</code>命令来，会在当前目录初始化创建仓库。</li>
<li>一种是通过<code>git clone + 仓库地址</code>的方式，一般叫做克隆远程仓库。</li>
</ol>
<p>首先准备一个本地的工作目录：GitRepo</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">新建本地仓库</div>
</center>
<br>
然后gitbash打开，初始化为git仓库。
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ git init
</span></span><span class="line"><span class="cl">Initialized empty Git repository in D:/IDEA Workplace/GitRepo/.git/</span></span></code></pre></td></tr></table>
</div>
</div><p>创建完多出了一个被隐藏的<code>.git</code>目录，这就是本地仓库Git的工作目录。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">生成.git文件夹</div>
</center>
<br>
<p>克隆远程仓库，如在gitee上创建的仓库 <code>https://gitee.com/gaoziman/vue3-doc.git</code></p>
<p>通过以下命令进行克隆：</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git clone https://gitee.com/gaoziman/vue3-doc.git</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">拉取远程代码</div>
</center>
<br>
<p>可以看到远程仓库就出现在我们的本地工作空间</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">远程代码出现在本地仓库</div>
</center>
<br>
<h3 id="62-暂存区add">6.2 暂存区add</h3>
<p><code>git add</code>命令就是把要提交的所有修改放到 <strong>「暂存区（Stage）」</strong>，然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到仓库。</p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>「指令」</strong></th>
<th style="text-align:left"><strong>「描述」</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git add [file1] [file2]</td>
<td style="text-align:left">添加文件到暂存区，包括修改的文件、新增的文件</td>
</tr>
<tr>
<td style="text-align:left">git add [dir]</td>
<td style="text-align:left">同上，添加目录到暂存区，包括子目录</td>
</tr>
<tr>
<td style="text-align:left">git add .</td>
<td style="text-align:left">同上，添加**「所有」**修改、新增文件（未跟踪）到暂存区</td>
</tr>
<tr>
<td style="text-align:left">git rm [file]</td>
<td style="text-align:left">删除工作区文件，并且将这次删除放入暂存区</td>
</tr>
</tbody>
</table>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 查看仓库状态</span>
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Your branch is up to date with <span class="s1">&#39;origin/master&#39;</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Changes not staged <span class="k">for</span> commit:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git add &lt;file&gt;...&#34;</span> to update what will be committed<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git restore &lt;file&gt;...&#34;</span> to discard changes in working directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">        modified:   Nodejs.md
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">no changes added to commit <span class="o">(</span>use <span class="s2">&#34;git add&#34;</span> and/or <span class="s2">&#34;git commit -a&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Administrator@WIN-20231112VVY MINGW64 /d/IDEA Workplace/GitRepo/vue3-doc/01-环境 <span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 添加到指定文件到暂存区</span>
</span></span><span class="line"><span class="cl">$ git add Nodejs.md
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Administrator@WIN-20231112VVY MINGW64 /d/IDEA Workplace/GitRepo/vue3-doc/01-环境 <span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 继续查看仓库状态</span>
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Your branch is up to date with <span class="s1">&#39;origin/master&#39;</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Changes to be committed:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git restore --staged &lt;file&gt;...&#34;</span> to unstage<span class="o">)</span>
</span></span><span class="line"><span class="cl">        modified:   Nodejs.md</span></span></code></pre></td></tr></table>
</div>
</div><p>修改之后通过 <code>git add 文件名</code> 即可把文件提交至暂存区</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">把文件提交至暂存区</div>
</center>
<br>
<h3 id="63-commit提交">6.3 commit提交</h3>
<p><code>git commit</code>提交是以时间顺序排列被保存到数据库中的，就如游戏关卡一样，每一次提交（commit）就会产生一条记录：<code>id + 描述 + 快照内容</code>。</p>
<ul>
<li><strong>「commit id」</strong>：根据修改的文件内容采用摘要算法（SHA1）计算出不重复的40位字符，这么长是因为Git是分布式的，要保证唯一性、完整性，一般本地指令中可以只用前几位（6）。即使多年以后，依然可通过<code>id</code>找到曾经的任何内容和变动，再也不用担心丢失了。</li>
<li><strong>「描述」</strong>：针对本次提交的描述说明，建议**「准确」**填写，就跟代码中的注释一样，很重要。</li>
<li><strong>「快照」</strong>：就是完整的版本文件，以对象树的结构存在仓库下<code>\.git\objects</code>目录里，这也是Git效率高的秘诀之一。</li>
</ul>
<p>我们可以通过 <code>git reflog</code> 查看所有的提交记录包括回退记录。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">查看回退记录</div>
</center>
<br>
<p>我们可以通过提交所有的指令到仓库。</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"> git commit -a -m<span class="s1">&#39;修改README的版权信息&#39;</span></span></span></code></pre></td></tr></table>
</div>
</div><p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 <code>--amend</code> 选项的提交命令尝试重新提交：</p>
<p>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git commit --amend -m <span class="o">[</span>message<span class="o">]</span></span></span></code></pre></td></tr></table>
</div>
</div><p>取消暂存的文件</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git reset filename</span></span></code></pre></td></tr></table>
</div>
</div><p>撤消对文件的修改:</p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git checkout -- filename</span></span></code></pre></td></tr></table>
</div>
</div><p>用参数 <code>--oneline</code> 可以让日志输出更简洁（一行）</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">git log --oneline 输出</div>
</center>
<br>
<p><strong>「🔥指令：」</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>「指令」</strong></th>
<th style="text-align:left"><strong>「描述」</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git commit -m &lsquo;说明&rsquo;</td>
<td style="text-align:left">提交变更，参数<code>-m</code>设置提交的描述信息，应该正确提交，不带该参数会进入说明编辑模式</td>
</tr>
<tr>
<td style="text-align:left">git commit -a</td>
<td style="text-align:left">参数<code>-a</code>，表示直接从工作区提交到版本库，略过了<code>git add</code>步骤，不包括新增的文件</td>
</tr>
<tr>
<td style="text-align:left">git commit [file]</td>
<td style="text-align:left">提交暂存区的指定文件到仓库区</td>
</tr>
<tr>
<td style="text-align:left">git commit &ndash;amend -m</td>
<td style="text-align:left">使用一次新的<code>commit</code>，替代上一次提交，会修改<code>commit</code>的<code>hash</code>值（id）</td>
</tr>
<tr>
<td style="text-align:left">git log -n20</td>
<td style="text-align:left">查看日志(最近20条)，不带参数<code>-n</code>则显示所有日志</td>
</tr>
<tr>
<td style="text-align:left">git log -n20 &ndash;oneline</td>
<td style="text-align:left">参数“<code>--oneline</code>”可以让日志输出更简洁（一行）</td>
</tr>
<tr>
<td style="text-align:left">git log -n20 &ndash;graph</td>
<td style="text-align:left">参数“<code>--graph</code>”可视化显示分支关系</td>
</tr>
<tr>
<td style="text-align:left">git log &ndash;follow [file]</td>
<td style="text-align:left">显示某个文件的版本历史</td>
</tr>
<tr>
<td style="text-align:left">git blame [file]</td>
<td style="text-align:left">以列表形式显示指定文件的修改记录</td>
</tr>
<tr>
<td style="text-align:left">git <strong>「reflog」</strong></td>
<td style="text-align:left">查看所有可用的历史版本记录（实际是HEAD变更记录），包含被回退的记录（<strong>「重要」</strong>）</td>
</tr>
<tr>
<td style="text-align:left">git status</td>
<td style="text-align:left">查看本地仓库状态，比较常用的指令，加参数<code>-s</code>简洁模式</td>
</tr>
</tbody>
</table>
<h3 id="64-提交的唯一标识id">6.4 提交的唯一标识ID</h3>
<p>每一个提交都有一个唯一标识，主要就是提交的<code>hash</code>值<code>commit id</code>，在很多指令中会用到，如版本回退、拣选提交等，需要指定一个提交。那标识唯一提交有两种方式：</p>
<ul>
<li>首先就是<code>commit id</code>，一个40位编码，指令中使用的时候可以只输入前几位（6位）即可。</li>
<li>还有一种就是HEAD~n，是基于当前<code>HEAD</code>位置的一个相对坐标。
<ul>
<li><code>HEAD</code> 表示当前分支的最新版本，是比较常用的参数。</li>
<li><code>HEAD^</code>上一个版本，<code>HEAD^^</code> 上上一个版本。</li>
<li><code>HEAD~</code> 或<code>HEAD~1</code> 表示上一个版本，以此类推，<code>HEAD^10</code> 为最近第10个版本。</li>
<li><code>HEAD@{2}</code>在<code>git reflog</code>日志中标记的提交记录索引。</li>
</ul>
</li>
</ul>
<p>通过<code>git log</code>、<code>git reflog</code>可以查看历史日志，可以看每次提交的唯一编号（hash）。区别是<code>git reflog</code>可以查看所有操作的记录（实际是HEAD变更记录），包括被撤销回退的提交记录。</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git reflog -n10
</span></span><span class="line"><span class="cl">5acc914 <span class="o">(</span>HEAD -&gt; main<span class="o">)</span> HEAD@<span class="o">{</span>0<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">738748b <span class="o">(</span>dev<span class="o">)</span> HEAD@<span class="o">{</span>1<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">9312c3e HEAD@<span class="o">{</span>2<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">db03fcb HEAD@<span class="o">{</span>3<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">1b81fb3 HEAD@<span class="o">{</span>4<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">41ea423 HEAD@<span class="o">{</span>5<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">d3e15f9 HEAD@<span class="o">{</span>6<span class="o">}</span>: reset: moving to d3e15f9
</span></span><span class="line"><span class="cl">1b81fb3 HEAD@<span class="o">{</span>7<span class="o">}</span>: reset: moving to HEAD~1
</span></span><span class="line"><span class="cl">41ea423 HEAD@<span class="o">{</span>8<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">d3e15f9 HEAD@<span class="o">{</span>9<span class="o">}</span>: reset: moving to HEAD~</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">查看变更记录</div>
</center>
<br>
<h3 id="65-diff比较">6.5 diff比较</h3>
<p><code>git diff</code>用来比较不同文件版本之间的差异。</p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>「指令」</strong></th>
<th style="text-align:left"><strong>「描述」</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>「git diff」</strong></td>
<td style="text-align:left">查看暂存区和工作区的差异</td>
</tr>
<tr>
<td style="text-align:left">git diff [file]</td>
<td style="text-align:left">同上，指定文件</td>
</tr>
<tr>
<td style="text-align:left">git diff &ndash;cached</td>
<td style="text-align:left">查看已暂存的改动，就是暂存区与新版本<code>HEAD</code>进行比较</td>
</tr>
<tr>
<td style="text-align:left">git diff &ndash;staged</td>
<td style="text-align:left">同上</td>
</tr>
<tr>
<td style="text-align:left">git diff &ndash;cached [file]</td>
<td style="text-align:left">同上，指定文件</td>
</tr>
<tr>
<td style="text-align:left">git diff HEAD</td>
<td style="text-align:left">查看已暂存的+未暂存的所有改动，就是与最新版本<code>HEAD</code>进行比较</td>
</tr>
<tr>
<td style="text-align:left">git diff HEAD~</td>
<td style="text-align:left">同上，与上一个版本比较。<code>HEAD~</code>表示上一个版本，<code>HEAD~10</code>为最近第10个版本</td>
</tr>
<tr>
<td style="text-align:left">git diff [id] [id]</td>
<td style="text-align:left">查看两次提交之间的差异</td>
</tr>
<tr>
<td style="text-align:left">git diff [branch]</td>
<td style="text-align:left">查看工作区和分支直接的差异</td>
</tr>
</tbody>
</table>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 查看文件的修改</span>
</span></span><span class="line"><span class="cl">$ git diff README.md
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看两次提交的差异</span>
</span></span><span class="line"><span class="cl">$ git diff 8f4244 1da22
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示今天你写了多少行代码：工作区+暂存区</span>
</span></span><span class="line"><span class="cl">$ git diff --shortstat <span class="s2">&#34;@{10 day ago}&#34;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="7远程仓库">7.远程仓库</h2>
<p>Git作为分布式的版本管理系统，我们每个本地终端都有属于自己的Git仓库。但团队协作还需一个中间仓库，作为控制中心，同步各个仓库。于是服务端（远程）仓库就来承担这个职责，服务端不仅有仓库，还配套相关管理功能，这就是所谓的 <strong>「远程仓库」</strong> 。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">远程仓库</div>
</center>
<br>
远程仓库有好几种，大致分为下面几种。
<ul>
<li>公共Git服务器，如Github、码云Gitee、腾讯Coding等。</li>
<li>搭建私有Git服务器，如开源的Gitlab、Gitea、等。</li>
</ul>
<h3 id="71-远程仓库指令">7.1 远程仓库指令</h3>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>「指令」</strong></th>
<th style="text-align:left"><strong>「描述」</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git clone [git地址]</td>
<td style="text-align:left">从远程仓库克隆到本地（当前目录）</td>
</tr>
<tr>
<td style="text-align:left">git remote -v</td>
<td style="text-align:left">查看所有远程仓库，不带参数<code>-v</code>只显示名称</td>
</tr>
<tr>
<td style="text-align:left">git remote show [remote]</td>
<td style="text-align:left">显示某个远程仓库的信息</td>
</tr>
<tr>
<td style="text-align:left">git remote add [name] [url]</td>
<td style="text-align:left">增加一个新的远程仓库，并命名</td>
</tr>
<tr>
<td style="text-align:left">git remote rename [old] [new]</td>
<td style="text-align:left">修改远程仓库名称</td>
</tr>
<tr>
<td style="text-align:left"><strong>「git pull [remote] [branch]」</strong></td>
<td style="text-align:left">取回远程仓库的变化，并与本地版本合并</td>
</tr>
<tr>
<td style="text-align:left"><strong>「git pull」</strong></td>
<td style="text-align:left">同上，针对当前分支</td>
</tr>
<tr>
<td style="text-align:left">git fetch [remote]</td>
<td style="text-align:left">获取远程仓库的所有变动到本地仓库，不会自动合并！需要手动合并</td>
</tr>
<tr>
<td style="text-align:left"><strong>「git push」</strong></td>
<td style="text-align:left">推送当前分支到远程仓库</td>
</tr>
<tr>
<td style="text-align:left">git push [remote] [branch]</td>
<td style="text-align:left">推送本地当前分支到远程仓库的指定分支</td>
</tr>
<tr>
<td style="text-align:left">git push [remote] &ndash;force/-f</td>
<td style="text-align:left">强行推送当前分支到远程仓库，即使有冲突，⚠️很危险！</td>
</tr>
<tr>
<td style="text-align:left">git push [remote] &ndash;all</td>
<td style="text-align:left">推送所有分支到远程仓库</td>
</tr>
<tr>
<td style="text-align:left">git push –u</td>
<td style="text-align:left">参数<code>–u</code>表示与远程分支建立关联，第一次执行的时候用，后面就不需要了</td>
</tr>
<tr>
<td style="text-align:left">git remote rm [remote-name]</td>
<td style="text-align:left">删除远程仓库</td>
</tr>
<tr>
<td style="text-align:left">git pull &ndash;rebase</td>
<td style="text-align:left">使用rebase的模式进行合并</td>
</tr>
</tbody>
</table>
<h3 id="72-push和pull">7.2 push和pull</h3>
<p><code>git push</code>、<code>git pull</code>是团队协作中最常用的指令，用于同步本地、服务端的更新，与他人协作。</p>
<p><strong>「🔸推送」</strong>（push）：推送本地仓库到远程仓库。</p>
<ul>
<li>如果推送的更新与服务端存在冲突，则会被拒绝，<code>push</code>失败。一般是有其他人推送了代码，导致文件冲突，可以先<code>pull</code>代码，在本地进行合并，然后再<code>push</code>。</li>
</ul>
<p><strong>「🔸拉取」</strong>（pull）：从服务端（远程）仓库更新到本地仓库。</p>
<ul>
<li><code>git pull</code>：拉取服务端的最新提交到本地，并与本地合并，合并过程同分支的合并。</li>
<li><code>git fetch</code>：拉取服务端的最新提交到本地，不会自动合并，也不会更新工作区。</li>
</ul>
<h3 id="74-fetch和pull有什么区别">7.4 fetch和pull有什么区别</h3>
<h4 id="1-git-fetch">1. Git Fetch</h4>
<p><code>git fetch</code>命令用于从另一个仓库（例如，远程仓库）下载新的分支和数据，但不会自动合并或修改你当前工作目录下的文件或分支。<code>fetch</code> 命令会把远程仓库的所有信息拉取到本地仓库，但这些改动不会反映在你的当前工作分支上，除非你明确地进行合并。</p>
<p>换句话说，<code>git fetch</code>是一种安全的方式来查看别人已经做了哪些工作，而这些变更在你用<code>git fetch</code>之后不会影响你当前的工作状态。如果你想要让这些变更影响你的当前分支，你需要用<code>git merge</code>手动合并，如<code>git merge origin/master</code>（如果你是从<code>master</code>分支上fetch的）。</p>
<h4 id="2-git-pull">2. Git Pull</h4>
<p><code>git pull</code>命令实际上是<code>git fetch</code>加上<code>git merge</code>命令的组合。当你执行<code>git pull</code>，Git会从远程仓库获取最新的版本信息，然后尝试自动合并到你当前的分支。通常情况下，这意味着它将远程的更新内容合并到你当前分支的本地副本中。</p>
<p>在简单的情况下，<code>git pull</code>会顺利地将远程变更合并到你的本地分支，你的工作流程可以无缝继续。然而，如果在fetch的数据与你本地的修改存在冲突时，你可能需要手动解决这些冲突。</p>
<h4 id="3-使用场景对比">3. 使用场景对比</h4>
<p>在不清楚远程分支的情况下，你可能更倾向于首先使用<code>git fetch</code>来查看有哪些更新，待检查完更新内容后再决定是否合并到当前分支。这是一种更为谨慎的做法，尤其适用于复杂的合并操作，或者当你不希望自动将更改应用到本地仓库时使用。</p>
<p>另一方面，如果你相信远程的变更不会引起任何问题，并且希望你的本地分支保持与远程分支的同步，可以直接使用<code>git pull</code>。</p>
<h4 id="4案例">4.案例</h4>
<p>获取远程仓库的更新数据，但不合并到当前分支：</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git fetch origin</span></span></code></pre></td></tr></table>
</div>
</div><p>获取远程仓库的更新数据并自动合并到当前分支：</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git pull origin master  # 拉取origin远程仓库的master分支并合并到当前分支</span></span></code></pre></td></tr></table>
</div>
</div><p><code>git fetch</code>用于安全地查看远程变更，而<code>git pull</code>则用于获取并立刻应用这些变更。两者合适的使用取决于你想如何管理远程数据和本地分支的关系。</p>
<h2 id="8分支">8.分支</h2>
<p>几乎每一种版本控制系统都以某种形式支持分支，一个分支代表一条独立的开发线。</p>
<p>使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">分支示意</div>
</center>
<br>
<p>Git 分支实际上是指向更改快照的指针。</p>
<p>有人把 Git 的分支模型称为**「必杀技特性」**，而正是因为它，将 <strong>「Git」</strong> 从版本控制系统家族里区分出来。</p>
<h3 id="81-branch">8.1 branch</h3>
<p>加入，准备1月份发布新版本，要新开发一些新功能，占领市场。你和小伙伴 <strong>「张三」</strong> 一起负责开发一个新功能A，开发周期2周，在这两周你们的代码不能影响其他人，不影响主分支。这个时候就可以为这个新功能创建一个分支，你们两在这个分支上干活，2周后代码开发完了、测试通过，就可以合并进要发版的开发分支了。安全、高效，不影响其他人工作，完美！</p>
<p>实际开发中，我们可能会有多个分支进行开发。</p>
<ul>
<li><strong>「master」</strong>：作为主分支，存放稳定的代码，就是开发后测试通过的代码，不允许随便修改和合并。</li>
<li><strong>「开发分支」</strong>：用于团队日常开发用，比如团队计划12月份开发10个功能并发版，则在此分支上进行，不影响主分支的稳定，如果我们开发到一个成熟阶段，依然可以合并到master主分支。</li>
</ul>
<blockquote>
<p>❝</p>
<p>**「分支」**就是指向某一个提交记录的“指针”引用，因此创建分支是非常快的，不管仓库多大。当我们运行<code>git branch dev</code>创建了一个名字为<code>dev</code>的分支，Git实际上是在<code>.git\refs\heads</code>下创建一个<code>dev</code>的引用文件（没有扩展名）。</p>
<p>❞</p>
</blockquote>
<h3 id="82-分支命令">8.2 分支命令</h3>
<p>我这里讲这些命令总结为思维导图，大家可以参考一下。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">branch 分支示意导图</div>
</center>
<br>
<p>列出了当前的所有分支，星号“*”开头的“main”为当前活动分支。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">列出当前的所有分支</div>
</center>
<br>
<h3 id="83-分支冲突">8.3 分支冲突</h3>
<p>把两个分支的修改内容合并到一起，常用的合并指令<code>git merge [branch]</code>，将分支<code>[branch]</code>合并到当前分支。根据要合并的内容的不同，具体合并过程就会有多种情况。</p>
<p>首先我们准备一个案例项目，我已经在gitee准备好了，非常简单，只有三个简单的文件。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">gitee 代码</div>
</center>
<br>
<h4 id="1-快速合并">1. 快速合并</h4>
<p>合并<code>dev</code>到<code>master</code>，注意要先切换到<code>master</code>分支，然后执行<code>git merge dev</code>，把<code>dev</code>合并到当前分支。</p>
<p>首先创建dev分支并切换到dev分支上去。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">创建dev分支</div>
</center>
<br>
<p>然后再dev分支上面创建一个b.txt文件，随之提交到远程仓库中。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>可以看到我们远程仓库的dev分支上面已经有了b.txt这个文件。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>然后切换到master分支上面，把dev分支合并到我们的master主分支上面。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>同时可以看到我们远程仓库中master分支也同步到了dev分支的b.txt文件。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<h4 id="2-普通合并">2. 普通合并</h4>
<p>如果<code>master</code>有变更，存在分支交叉，则会把两边的变更合并成一个提交。</p>
<ul>
<li>如果两边变更的文件不同，没有什么冲突，就自动合并了。</li>
<li>如果有修改同一个文件，则会存在冲突，到底该采用哪边的，程序无法判断，就换产生冲突。冲突内容需要人工修改后再重新提交，才能完成最终的合并。</li>
</ul>
<p>我们在远程仓库master分支中手动更改a.txt文件来演示。</p>
<h5 id="1-第一种情况">1. 第一种情况</h5>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时我们在本地仓库中更改其他文件，只要不是a.txt即可，然后push到远程。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时发现我们当前本地仓库的版本号与远程仓库master分支的版本号不一致，导致提交不上去。</p>
<p>这种情况还是比较简单的，只需要通过 <code>git pull</code> 命令将本地版本与远程版本同步即可</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时会进行自动合并到本地分支，并当做一次提交，提交信息大家也可以进行更改，我这里默认即可。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时再次提交即可成功提交到远程仓库中。</p>
<h5 id="2-第二种情况">2. 第二种情况</h5>
<p>上面那种方式处理起来比较简单，因为是处理不同的文件。</p>
<p>下面我来演示一下对于同一个文件冲突情况进行解决。</p>
<p>我们在远程仓库手动添加了以下这句话进行对b.txt文件的修改。(可以理解为程序员A修改了b.txt文件并提交到远程仓库中去。)</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时程序员B也在本地修改了b.txt文件。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>然后通过一系列命令提交至远程仓库。</p>
<p>可以发现出现冲突之后，我们立即通过git pull 命令进行了同步，但是初始我们的这里发生了很多变化，变成了**「master | MENERGING」**。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时这种情况就是因为在自动合并的时候出现了冲突，git无法帮助我们解决，需要我们自己手动解决冲突。</p>
<p>然后我们在本地打开b.txt文件。</p>
<p>可以看到确实也把远程更改的内容同步过来了，这里就需要我们手动解决，由我们和另外一个程序员协商到底是保留谁的内容或者是都保留。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
此时我们觉得都进行保留，然后删除其他多余内容。
<p>然后进行代码提交。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时可以发现远程仓库b.txt文件内容已经发现了改变，并且是由我们手动解决并提交的。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>大功告成!!</p>
<h2 id="9git的版本回退">9.Git的版本回退</h2>
<p>如果发现我们编写代码中写错了要怎么办，但又分好几种情况，我们依次往下看。</p>
<ul>
<li>❓还没提交的怎么撤销？ &ndash; checkout
<ul>
<li>还未提交的修改（工作区、暂存区）不想要了，用签出指令（checkout）进行撤销清除。</li>
<li>或者用<code>checkout</code>的新版回滚指令<code>reset</code>。</li>
</ul>
</li>
<li>❓**「已提交但么有push的提交如何撤销？」**—— <code>reset</code>、<code>revert</code></li>
<li>❓**「已push的提交如何撤销？」<strong>—— 同上，先本地撤销，然后强制推送<code>git push origin -f</code>，</strong>「⚠️注意慎用！」** 记得先<code>pull</code>获取更新。</li>
</ul>
<h3 id="91-版本回退命令">9.1 版本回退命令</h3>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>「指令」</strong></th>
<th style="text-align:left"><strong>「描述」</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git checkout .</td>
<td style="text-align:left">撤销工作区的（未暂存）修改，把暂存区恢复到工作区。不影响暂存区，如果没暂存，则撤销所有工作区修改</td>
</tr>
<tr>
<td style="text-align:left">git checkout [file]</td>
<td style="text-align:left">同上，<code>file</code>指定文件</td>
</tr>
<tr>
<td style="text-align:left">git checkout HEAD .</td>
<td style="text-align:left">撤销工作区、暂存区的修改，用<code>HEAD</code>指向的当前分支最新版本替换工作区、暂存区</td>
</tr>
<tr>
<td style="text-align:left">git checkout HEAD [file]</td>
<td style="text-align:left">同上，<code>file</code>指定文件</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">git reset</td>
<td style="text-align:left">撤销暂存区状态，同<code>git reset HEAD</code>，不影响工作区</td>
</tr>
<tr>
<td style="text-align:left">git reset HEAD [file]</td>
<td style="text-align:left">同上，指定文件<code>file</code>，<code>HEAD</code>可省略</td>
</tr>
<tr>
<td style="text-align:left">git reset [commit]</td>
<td style="text-align:left">回退到指定版本，清空暂存区，不影响工作区。工作区需要手动<code>git checkout</code>签出</td>
</tr>
<tr>
<td style="text-align:left">git reset &ndash;soft [commit]</td>
<td style="text-align:left">移动分支<code>master</code>、<code>HEAD</code>到指定的版本，不影响暂存区、工作区，需手动<code>git checkout</code>签出更新</td>
</tr>
<tr>
<td style="text-align:left">git reset &ndash;hard HEAD</td>
<td style="text-align:left">撤销工作区、暂存区的修改，用当前最新版</td>
</tr>
<tr>
<td style="text-align:left">git reset &ndash;hard HEAD~</td>
<td style="text-align:left">回退到上一个版本，并重置工作区、暂存区内容。</td>
</tr>
<tr>
<td style="text-align:left">git reset &ndash;hard [commit]</td>
<td style="text-align:left">回退到指定版本，并重置工作区、暂存区内容。</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">git <strong>「revert」</strong>[commit]</td>
<td style="text-align:left">撤销一个提交，会用一个新的提交（原提交的逆向操作）来完成撤销操作，如果已<code>push</code>则重新<code>push</code>即可</td>
</tr>
</tbody>
</table>
<ul>
<li><code>git checkout .</code>、<code>git checkout [file]</code> 会清除工作区中未添加到暂存区的修改，用暂存区内容替换工作区。</li>
<li><code>git checkout HEAD .</code>、<code>git checkout HEAD [file]</code> 会清除工作区、暂存区的修改，用HEAD指向的当前分支最新版本替换暂存区、工作区。</li>
</ul>
<h4 id="1-只撤销工作区的修改未暂存">1. 只撤销工作区的修改（未暂存）</h4>
<p>撤销工作区的（未暂存）修改，把暂存区恢复到工作区。不影响暂存区，如果没暂存，则撤销所有工作区修改。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<h4 id="2-撤销工作区暂存区的修改">2. 撤销工作区、暂存区的修改</h4>
<p>撤销工作区、暂存区的修改，用<code>HEAD</code>指向的当前分支最新版本替换工作区、暂存区</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<h3 id="92-reset">9.2 reset</h3>
<p><code>reset</code>是专门用来撤销修改、回退版本的指令，支持的场景比较多，多种撤销姿势，所以参数组合也比较多。简单理解就是移动<code>master</code>分支、<code>HEAD</code>的“指针”地址，理解这一点就基本掌握<code>reset</code>了。</p>
<p><code>reset</code>有三种模式，对应三种参数：<code>mixed</code>（默认模式）、<code>soft</code>、<code>hard</code>。三种参数的主要区别就是对工作区、暂存区的操作不同。</p>
<ul>
<li><code>mixed</code>为默认模式，参数可以省略。</li>
<li>只有<code>hard</code>模式会重置工作区、暂存区，一般用这个模式会多一点。</li>
</ul>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<table>
<thead>
<tr>
<th style="text-align:left">模式名称</th>
<th style="text-align:left"><strong>「描述」</strong></th>
<th style="text-align:left"><strong>「HEAD的位置」</strong></th>
<th style="text-align:left"><strong>「暂存区」</strong></th>
<th style="text-align:left"><strong>「工作区」</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>「soft」</strong></td>
<td style="text-align:left">回退到某一个版本，工作区不变，需手动<code>git checkout</code></td>
<td style="text-align:left">修改</td>
<td style="text-align:left">不修改</td>
<td style="text-align:left">不修改</td>
</tr>
<tr>
<td style="text-align:left"><strong>「mixed」</strong>(默认)</td>
<td style="text-align:left">撤销暂存区状态，不影响工作区，需手动<code>git checkout</code></td>
<td style="text-align:left">修改</td>
<td style="text-align:left">修改</td>
<td style="text-align:left">不修改</td>
</tr>
<tr>
<td style="text-align:left"><strong>「hard」</strong></td>
<td style="text-align:left">重置未提交修改（工作区、暂存区）</td>
<td style="text-align:left">修改</td>
<td style="text-align:left">修改</td>
<td style="text-align:left">修改</td>
</tr>
</tbody>
</table>
<p>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p>
<h4 id="1-撤销暂存区">1. 撤销暂存区</h4>
<p>这个其实跟刚刚的 <code>git checkout HEAD .</code>是一样的。</p>
<h4 id="2-撤销工作区暂存区修改">2. 撤销工作区、暂存区修改</h4>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git reset --hard HEAD</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="3-回退版本库到上一个版本并重置工作区暂存">3. 回退版本库到上一个版本，并重置工作区、暂存</h4>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git reset --hard HEAD~</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到他已经回到了我们上一个版本。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>通过git log 日志查看也没有了之前的记录，而是被HEAD指向到上一个版本。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<h4 id="4-回到原来的版本并重置工作区暂存">4. 回到原来的版本，并重置工作区、暂存</h4>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ git reset --hard 891350d</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到他又回到上上一步，也就是对上一步操作进行撤销。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<h4 id="5-查看所有历史提交记录">5. 查看所有历史提交记录</h4>
<div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git reflog</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<h2 id="10idea集成git">10.IDEA集成Git</h2>
<p>通过以上内容，我们对Git整个工作流程有了一些认识，以及知道如何使用Git进行平时的开发。</p>
<p>但是在真实的开发中，我们可能并不是使用命令行进行操作，而是在IDEA中进行图形化操作，我们写完代码即可进行提交。</p>
<p>我们打开IDEA，依次在settings &mdash;》Version Control &mdash;》 Git。</p>
<p>选择自己的Git安装路径，然后进行测试看是否成功。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>点击Test之后看到自己对应的Git版本号之后即可说明我们初步测试成功。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>然后就可以在IDEA中进行代码的编写。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
然后讲代码push到远程仓库。
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>相比于命令行，IDEA的图形化操作是不是让人更省心，简单易上手。</p>
<h2 id="11参考文献">11.参考文献</h2>
<ul>
<li><a href="https://git-scm.com/book/zh/v2"target="_blank" rel="external nofollow noopener noreferrer">https://git-scm.com/book/zh/v2<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://www.yuque.com/kanding/ktech/ccgylqhnb94ug4bu#LlJg3"target="_blank" rel="external nofollow noopener noreferrer">https://www.yuque.com/kanding/ktech/ccgylqhnb94ug4bu#LlJg3<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://javaguide.cn/tools/git/git-intro.html"target="_blank" rel="external nofollow noopener noreferrer">https://javaguide.cn/tools/git/git-intro.html<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://www.yiibai.com/git"target="_blank" rel="external nofollow noopener noreferrer">https://www.yiibai.com/git<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
</ul>
]]></description></item><item><title>CMake 笔记 | [45] 使用Doxygen构建文档</title><link>https://jianye0428.github.io/posts/cmake_note_45/</link><pubDate>Thu, 01 Feb 2024 13:11:17 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_45/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><strong>文档在所有的软件项目都是有必要的：</strong></p>
<ul>
<li><strong>对于用户来说，了解如何获得并构建代码，并且如何有效地使用源代码或库；</strong></li>
<li><strong>对于开发人员来说，文档可用来描述你源码细节，并帮助其他程序员参与其中为该项目作出贡献。</strong></li>
</ul>
<p><strong><code>Doxygen</code>是非常流行的源代码文档工具。可以在代码中添加文档标记作为注释，而后运行<code>Doxygen</code>提取这些注释，并以<code>Doxyfile</code>配置文件中定义的格式创建文档。<code>Doxygen</code>可以输出<code>HTML</code>、<code>XML</code>，甚至<code>LaTeX</code>或<code>PDF</code>。本篇，将使用CMake来构建<code>Doxygen</code>文档。</strong></p>
</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── cmake
</span></span><span class="line"><span class="cl">│   └── UseDoxygenDoc.cmake
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── docs
</span></span><span class="line"><span class="cl">│   ├── Doxyfile.in
</span></span><span class="line"><span class="cl">│   └── front_page.md
</span></span><span class="line"><span class="cl">└── src
</span></span><span class="line"><span class="cl">    ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">    ├── hello_world.cpp
</span></span><span class="line"><span class="cl">    ├── message.cpp
</span></span><span class="line"><span class="cl">    └── message.hpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter10/01"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter10/01<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">GNUInstallDirs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_LIBRARY_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_RUNTIME_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list</span><span class="p">(</span><span class="n">APPEND</span> <span class="n">CMAKE_MODULE_PATH</span> <span class="s">&#34;${CMAKE_SOURCE_DIR}/cmake&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">UseDoxygenDoc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_doxygen_doc</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">BUILD_DIR</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">_build</span>
</span></span><span class="line"><span class="cl">  <span class="n">DOXY_FILE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">docs</span><span class="o">/</span><span class="n">Doxyfile</span><span class="p">.</span><span class="n">in</span>
</span></span><span class="line"><span class="cl">  <span class="n">TARGET_NAME</span>
</span></span><span class="line"><span class="cl">    <span class="n">docs</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMENT</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;HTML documentation&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_doxygen_doc</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">BUILD_DIR</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">_build</span>
</span></span><span class="line"><span class="cl">  <span class="n">DOXY_FILE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">docs</span><span class="o">/</span><span class="n">Doxyfile</span><span class="p">.</span><span class="n">in</span>
</span></span><span class="line"><span class="cl">  <span class="n">TARGET_NAME</span>
</span></span><span class="line"><span class="cl">    <span class="n">docs</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMENT</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;HTML documentation&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这是一个自定义函数，该函数在<code>cmake/UseDoxygenDox.cmake</code>中被定义。有四个参数：<code>BUILD_DIR</code>,<code>DOXY_FILE</code>,<code>TARGET_NAME</code>以及<code>COMMENT</code>。具体使用方法，请参考下面的介绍。</p>
<p>当然，为了能够使用<code>Doxygen</code>需要事先执行以下命令安装：</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo apt install doxygen</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>cmake/UseDoxygenDoc.cmake</strong></p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">Perl</span> <span class="n">REQUIRED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">Doxygen</span> <span class="n">REQUIRED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">function</span><span class="p">(</span><span class="n">add_doxygen_doc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">oneValueArgs</span> <span class="n">BUILD_DIR</span> <span class="n">DOXY_FILE</span> <span class="n">TARGET_NAME</span> <span class="n">COMMENT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">multiValueArgs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">cmake_parse_arguments</span><span class="p">(</span><span class="n">DOXY_DOC</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;${options}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;${oneValueArgs}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;${multiValueArgs}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">ARGN</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">configure_file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">DOXY_DOC_DOXY_FILE</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">DOXY_DOC_BUILD_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">Doxyfile</span>
</span></span><span class="line"><span class="cl">    <span class="err">@</span><span class="n">ONLY</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">add_custom_target</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">DOXY_DOC_TARGET_NAME</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMAND</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">DOXYGEN_EXECUTABLE</span><span class="p">}</span> <span class="n">Doxyfile</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORKING_DIRECTORY</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">DOXY_DOC_BUILD_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMENT</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;Building ${DOXY_DOC_COMMENT} with Doxygen&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">VERBATIM</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Added ${DOXY_DOC_TARGET_NAME} [Doxygen] target to build documentation&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endfunction</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>set(options)</code>: 定义一个变量<code>options</code>，在这里没有列出任何选项，表示该函数没有不带值的选项参数。</li>
<li><code>set(oneValueArgs BUILD_DIR DOXY_FILE TARGET_NAME COMMENT)</code>: 定义了接受单个值的参数。这里列出了四个参数：<code>BUILD_DIR</code>是文档构建的目录，<code>DOXY_FILE</code>是Doxygen的配置文件，<code>TARGET_NAME</code>是CMake目标的名字，<code>COMMENT</code>是构建时显示的注释。</li>
<li><code>set(multiValueArgs)</code>: 定义了接受多个值的参数，但在此脚本中未使用。</li>
<li><code>cmake_parse_arguments(DOXY_DOC ...)</code>: 用于解析调用函数时传入的参数，并将解析后的值存储到<code>DOXY_DOC</code>变量中。</li>
<li><code>configure_file(...)</code>: 用于处理配置文件。它将<code>DOXY_DOC_DOXY_FILE</code>参数指定的Doxygen配置文件复制到<code>DOXY_DOC_BUILD_DIR</code>参数指定的构建目录，并替换其中的变量。</li>
<li><code>add_custom_target(...)</code>: 添加了一个自定义的目标到CMake，执行这个目标时，它会在<code>DOXY_DOC_BUILD_DIR</code>目录下运行Doxygen来生成文档。</li>
<li><code>COMMAND ${DOXYGEN_EXECUTABLE} Doxyfile</code>: 这是实际调用Doxygen命令的部分。</li>
<li><code>WORKING_DIRECTORY ${DOXY_DOC_BUILD_DIR}</code>: 指定了Doxygen命令运行的工作目录。</li>
<li><code>COMMENT &quot;Building ${DOXY_DOC_COMMENT} with Doxygen&quot;</code>: 设置了当执行这个CMake目标时显示的注释。</li>
<li><code>VERBATIM</code>: 保证了命令行在所有平台上以字面意义执行，没有任何变化。</li>
<li><code>message(STATUS &quot;Added ${DOXY_DOC_TARGET_NAME} [Doxygen] target to build documentation&quot;)</code>: 这行打印一条状态消息，告诉用户已经添加了一个名为<code>${DOXY_DOC_TARGET_NAME}</code>的目标，用于构建文档。</li>
</ul>
<p><strong>docs/Doxyfile.in</strong></p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span><span class="lnt">267
</span><span class="lnt">268
</span><span class="lnt">269
</span><span class="lnt">270
</span><span class="lnt">271
</span><span class="lnt">272
</span><span class="lnt">273
</span><span class="lnt">274
</span><span class="lnt">275
</span><span class="lnt">276
</span><span class="lnt">277
</span><span class="lnt">278
</span><span class="lnt">279
</span><span class="lnt">280
</span><span class="lnt">281
</span><span class="lnt">282
</span><span class="lnt">283
</span><span class="lnt">284
</span><span class="lnt">285
</span><span class="lnt">286
</span><span class="lnt">287
</span><span class="lnt">288
</span><span class="lnt">289
</span><span class="lnt">290
</span><span class="lnt">291
</span><span class="lnt">292
</span><span class="lnt">293
</span><span class="lnt">294
</span><span class="lnt">295
</span><span class="lnt">296
</span><span class="lnt">297
</span><span class="lnt">298
</span><span class="lnt">299
</span><span class="lnt">300
</span><span class="lnt">301
</span><span class="lnt">302
</span><span class="lnt">303
</span><span class="lnt">304
</span><span class="lnt">305
</span><span class="lnt">306
</span><span class="lnt">307
</span><span class="lnt">308
</span><span class="lnt">309
</span><span class="lnt">310
</span><span class="lnt">311
</span><span class="lnt">312
</span><span class="lnt">313
</span><span class="lnt">314
</span><span class="lnt">315
</span><span class="lnt">316
</span><span class="lnt">317
</span><span class="lnt">318
</span><span class="lnt">319
</span><span class="lnt">320
</span><span class="lnt">321
</span><span class="lnt">322
</span><span class="lnt">323
</span><span class="lnt">324
</span><span class="lnt">325
</span><span class="lnt">326
</span><span class="lnt">327
</span><span class="lnt">328
</span><span class="lnt">329
</span><span class="lnt">330
</span><span class="lnt">331
</span><span class="lnt">332
</span><span class="lnt">333
</span><span class="lnt">334
</span><span class="lnt">335
</span><span class="lnt">336
</span><span class="lnt">337
</span><span class="lnt">338
</span><span class="lnt">339
</span><span class="lnt">340
</span><span class="lnt">341
</span><span class="lnt">342
</span><span class="lnt">343
</span><span class="lnt">344
</span><span class="lnt">345
</span><span class="lnt">346
</span><span class="lnt">347
</span><span class="lnt">348
</span><span class="lnt">349
</span><span class="lnt">350
</span><span class="lnt">351
</span><span class="lnt">352
</span><span class="lnt">353
</span><span class="lnt">354
</span><span class="lnt">355
</span><span class="lnt">356
</span><span class="lnt">357
</span><span class="lnt">358
</span><span class="lnt">359
</span><span class="lnt">360
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="c1"># Doxyfile 1.8.14</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Project related configuration options</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">DOXYFILE_ENCODING</span>      <span class="o">=</span> <span class="n">UTF</span><span class="o">-</span><span class="mi">8</span>
</span></span><span class="line"><span class="cl"><span class="n">PROJECT_NAME</span>           <span class="o">=</span> <span class="n">recipe</span><span class="o">-</span><span class="mi">01</span>
</span></span><span class="line"><span class="cl"><span class="n">PROJECT_NUMBER</span>         <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">PROJECT_BRIEF</span>          <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">PROJECT_LOGO</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">OUTPUT_DIRECTORY</span>       <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">CREATE_SUBDIRS</span>         <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">OUTPUT_LANGUAGE</span>        <span class="o">=</span> <span class="n">English</span>
</span></span><span class="line"><span class="cl"><span class="n">BRIEF_MEMBER_DESC</span>      <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">REPEAT_BRIEF</span>           <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">ABBREVIATE_BRIEF</span>       <span class="o">=</span> <span class="s2">&#34;The $name class&#34;</span> \
</span></span><span class="line"><span class="cl">                         <span class="s2">&#34;The $name widget&#34;</span> \
</span></span><span class="line"><span class="cl">                         <span class="s2">&#34;The $name file&#34;</span> \
</span></span><span class="line"><span class="cl">                         <span class="n">is</span> \
</span></span><span class="line"><span class="cl">                         <span class="n">provides</span> \
</span></span><span class="line"><span class="cl">                         <span class="n">specifies</span> \
</span></span><span class="line"><span class="cl">                         <span class="n">contains</span> \
</span></span><span class="line"><span class="cl">                         <span class="n">represents</span> \
</span></span><span class="line"><span class="cl">                         <span class="n">a</span> \
</span></span><span class="line"><span class="cl">                         <span class="n">an</span> \
</span></span><span class="line"><span class="cl">                         <span class="n">the</span>
</span></span><span class="line"><span class="cl"><span class="n">ALWAYS_DETAILED_SEC</span>    <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">INLINE_INHERITED_MEMB</span>  <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">FULL_PATH_NAMES</span>        <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">STRIP_FROM_PATH</span>        <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">STRIP_FROM_INC_PATH</span>    <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">SHORT_NAMES</span>            <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">JAVADOC_AUTOBRIEF</span>      <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">QT_AUTOBRIEF</span>           <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">MULTILINE_CPP_IS_BRIEF</span> <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">INHERIT_DOCS</span>           <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">SEPARATE_MEMBER_PAGES</span>  <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">TAB_SIZE</span>               <span class="o">=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl"><span class="n">ALIASES</span>                <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">TCL_SUBST</span>              <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">OPTIMIZE_OUTPUT_FOR_C</span>  <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">OPTIMIZE_OUTPUT_JAVA</span>   <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">OPTIMIZE_FOR_FORTRAN</span>   <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">OPTIMIZE_OUTPUT_VHDL</span>   <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTENSION_MAPPING</span>      <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">MARKDOWN_SUPPORT</span>       <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">AUTOLINK_SUPPORT</span>       <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">BUILTIN_STL_SUPPORT</span>    <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">CPP_CLI_SUPPORT</span>        <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">SIP_SUPPORT</span>            <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">IDL_PROPERTY_SUPPORT</span>   <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">DISTRIBUTE_GROUP_DOC</span>   <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">SUBGROUPING</span>            <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">INLINE_GROUPED_CLASSES</span> <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">INLINE_SIMPLE_STRUCTS</span>  <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">TYPEDEF_HIDES_STRUCT</span>   <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">LOOKUP_CACHE_SIZE</span>      <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Build related configuration options</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTRACT_ALL</span>            <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTRACT_PRIVATE</span>        <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTRACT_PACKAGE</span>        <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTRACT_STATIC</span>         <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTRACT_LOCAL_CLASSES</span>  <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTRACT_LOCAL_METHODS</span>  <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTRACT_ANON_NSPACES</span>   <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">HIDE_UNDOC_MEMBERS</span>     <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">HIDE_UNDOC_CLASSES</span>     <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">HIDE_FRIEND_COMPOUNDS</span>  <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">HIDE_IN_BODY_DOCS</span>      <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">INTERNAL_DOCS</span>          <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">CASE_SENSE_NAMES</span>       <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">HIDE_SCOPE_NAMES</span>       <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">SHOW_INCLUDE_FILES</span>     <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">SHOW_GROUPED_MEMB_INC</span>  <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">FORCE_LOCAL_INCLUDES</span>   <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">INLINE_INFO</span>            <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">SORT_MEMBER_DOCS</span>       <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">SORT_BRIEF_DOCS</span>        <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">SORT_MEMBERS_CTORS_1ST</span> <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">SORT_GROUP_NAMES</span>       <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">SORT_BY_SCOPE_NAME</span>     <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">STRICT_PROTO_MATCHING</span>  <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_TODOLIST</span>      <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_TESTLIST</span>      <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_BUGLIST</span>       <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_DEPRECATEDLIST</span><span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">ENABLED_SECTIONS</span>       <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">MAX_INITIALIZER_LINES</span>  <span class="o">=</span> <span class="mi">30</span>
</span></span><span class="line"><span class="cl"><span class="n">SHOW_USED_FILES</span>        <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">SHOW_FILES</span>             <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">SHOW_NAMESPACES</span>        <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">FILE_VERSION_FILTER</span>    <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">LAYOUT_FILE</span>            <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">CITE_BIB_FILES</span>         <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to warning and progress messages</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">QUIET</span>                  <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">WARNINGS</span>               <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">WARN_IF_UNDOCUMENTED</span>   <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">WARN_IF_DOC_ERROR</span>      <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">WARN_NO_PARAMDOC</span>       <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">WARN_FORMAT</span>            <span class="o">=</span> <span class="s2">&#34;$file:$line: $text&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">WARN_LOGFILE</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the input files</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">INPUT</span>                  <span class="o">=</span> <span class="err">@</span><span class="n">PROJECT_SOURCE_DIR</span><span class="err">@</span><span class="o">/</span><span class="n">src</span> \
</span></span><span class="line"><span class="cl">                         <span class="err">@</span><span class="n">PROJECT_SOURCE_DIR</span><span class="err">@</span><span class="o">/</span><span class="n">docs</span>
</span></span><span class="line"><span class="cl"><span class="n">INPUT_ENCODING</span>         <span class="o">=</span> <span class="n">UTF</span><span class="o">-</span><span class="mi">8</span>
</span></span><span class="line"><span class="cl"><span class="n">FILE_PATTERNS</span>          <span class="o">=</span> <span class="o">*.</span><span class="n">c</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">cc</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">cxx</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">cpp</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">c</span><span class="o">++</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">java</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">ii</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">ixx</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">ipp</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">i</span><span class="o">++</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">inl</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">idl</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">ddl</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">odl</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">h</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">hh</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">hxx</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">hpp</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">h</span><span class="o">++</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">cs</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">d</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">php</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">php4</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">php5</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">phtml</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">inc</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">m</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">markdown</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">md</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">mm</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">dox</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">py</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">pyw</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">f90</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">f95</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">f03</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">f08</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">f</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="k">for</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">tcl</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">vhd</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">vhdl</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">ucf</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">qsf</span>
</span></span><span class="line"><span class="cl"><span class="n">RECURSIVE</span>              <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">EXCLUDE</span>                <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">EXCLUDE_SYMLINKS</span>       <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">EXCLUDE_PATTERNS</span>       <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">EXCLUDE_SYMBOLS</span>        <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">EXAMPLE_PATH</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">EXAMPLE_PATTERNS</span>       <span class="o">=</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="n">EXAMPLE_RECURSIVE</span>      <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">IMAGE_PATH</span>             <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">INPUT_FILTER</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">FILTER_PATTERNS</span>        <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">FILTER_SOURCE_FILES</span>    <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">FILTER_SOURCE_PATTERNS</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">USE_MDFILE_AS_MAINPAGE</span> <span class="o">=</span> <span class="n">front_page</span><span class="o">.</span><span class="n">md</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to source browsing</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">SOURCE_BROWSER</span>         <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">INLINE_SOURCES</span>         <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">STRIP_CODE_COMMENTS</span>    <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">REFERENCED_BY_RELATION</span> <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">REFERENCES_RELATION</span>    <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">REFERENCES_LINK_SOURCE</span> <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">SOURCE_TOOLTIPS</span>        <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">USE_HTAGS</span>              <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">VERBATIM_HEADERS</span>       <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the alphabetical class index</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">ALPHABETICAL_INDEX</span>     <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">COLS_IN_ALPHA_INDEX</span>    <span class="o">=</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="n">IGNORE_PREFIX</span>          <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the HTML output</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_HTML</span>          <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_OUTPUT</span>            <span class="o">=</span> <span class="n">html</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_FILE_EXTENSION</span>    <span class="o">=</span> <span class="o">.</span><span class="n">html</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_HEADER</span>            <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_FOOTER</span>            <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_STYLESHEET</span>        <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_EXTRA_STYLESHEET</span>  <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_EXTRA_FILES</span>       <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_COLORSTYLE_HUE</span>    <span class="o">=</span> <span class="mi">220</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_COLORSTYLE_SAT</span>    <span class="o">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_COLORSTYLE_GAMMA</span>  <span class="o">=</span> <span class="mi">80</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_TIMESTAMP</span>         <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_DYNAMIC_SECTIONS</span>  <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_INDEX_NUM_ENTRIES</span> <span class="o">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_DOCSET</span>        <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">DOCSET_FEEDNAME</span>        <span class="o">=</span> <span class="s2">&#34;Doxygen generated docs&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">DOCSET_BUNDLE_ID</span>       <span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="n">doxygen</span><span class="o">.</span><span class="n">Project</span>
</span></span><span class="line"><span class="cl"><span class="n">DOCSET_PUBLISHER_ID</span>    <span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="n">doxygen</span><span class="o">.</span><span class="n">Publisher</span>
</span></span><span class="line"><span class="cl"><span class="n">DOCSET_PUBLISHER_NAME</span>  <span class="o">=</span> <span class="n">Publisher</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_HTMLHELP</span>      <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">CHM_FILE</span>               <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">HHC_LOCATION</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_CHI</span>           <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">CHM_INDEX_ENCODING</span>     <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">BINARY_TOC</span>             <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">TOC_EXPAND</span>             <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_QHP</span>           <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">QCH_FILE</span>               <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">QHP_NAMESPACE</span>          <span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="n">doxygen</span><span class="o">.</span><span class="n">Project</span>
</span></span><span class="line"><span class="cl"><span class="n">QHP_VIRTUAL_FOLDER</span>     <span class="o">=</span> <span class="n">doc</span>
</span></span><span class="line"><span class="cl"><span class="n">QHP_CUST_FILTER_NAME</span>   <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">QHP_CUST_FILTER_ATTRS</span>  <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">QHP_SECT_FILTER_ATTRS</span>  <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">QHG_LOCATION</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_ECLIPSEHELP</span>   <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">ECLIPSE_DOC_ID</span>         <span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="n">doxygen</span><span class="o">.</span><span class="n">Project</span>
</span></span><span class="line"><span class="cl"><span class="n">DISABLE_INDEX</span>          <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_TREEVIEW</span>      <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">ENUM_VALUES_PER_LINE</span>   <span class="o">=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl"><span class="n">TREEVIEW_WIDTH</span>         <span class="o">=</span> <span class="mi">250</span>
</span></span><span class="line"><span class="cl"><span class="n">EXT_LINKS_IN_WINDOW</span>    <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">FORMULA_FONTSIZE</span>       <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="n">FORMULA_TRANSPARENT</span>    <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">USE_MATHJAX</span>            <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">MATHJAX_FORMAT</span>         <span class="o">=</span> <span class="n">HTML</span><span class="o">-</span><span class="n">CSS</span>
</span></span><span class="line"><span class="cl"><span class="n">MATHJAX_RELPATH</span>        <span class="o">=</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">cdnjs</span><span class="o">.</span><span class="n">cloudflare</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">ajax</span><span class="o">/</span><span class="n">libs</span><span class="o">/</span><span class="n">mathjax</span><span class="o">/</span><span class="mf">2.7</span><span class="o">.</span><span class="mi">2</span><span class="o">/</span>
</span></span><span class="line"><span class="cl"><span class="n">MATHJAX_EXTENSIONS</span>     <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">MATHJAX_CODEFILE</span>       <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">SEARCHENGINE</span>           <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">SERVER_BASED_SEARCH</span>    <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTERNAL_SEARCH</span>        <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">SEARCHENGINE_URL</span>       <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">SEARCHDATA_FILE</span>        <span class="o">=</span> <span class="n">searchdata</span><span class="o">.</span><span class="n">xml</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTERNAL_SEARCH_ID</span>     <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTRA_SEARCH_MAPPINGS</span>  <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the LaTeX output</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_LATEX</span>         <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">LATEX_OUTPUT</span>           <span class="o">=</span> <span class="n">latex</span>
</span></span><span class="line"><span class="cl"><span class="n">LATEX_CMD_NAME</span>         <span class="o">=</span> <span class="n">latex</span>
</span></span><span class="line"><span class="cl"><span class="n">MAKEINDEX_CMD_NAME</span>     <span class="o">=</span> <span class="n">makeindex</span>
</span></span><span class="line"><span class="cl"><span class="n">COMPACT_LATEX</span>          <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">PAPER_TYPE</span>             <span class="o">=</span> <span class="n">a4</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTRA_PACKAGES</span>         <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">LATEX_HEADER</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">LATEX_FOOTER</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">LATEX_EXTRA_FILES</span>      <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">PDF_HYPERLINKS</span>         <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">USE_PDFLATEX</span>           <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">LATEX_BATCHMODE</span>        <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">LATEX_HIDE_INDICES</span>     <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">LATEX_SOURCE_CODE</span>      <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">LATEX_BIB_STYLE</span>        <span class="o">=</span> <span class="n">plain</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the RTF output</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_RTF</span>           <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">RTF_OUTPUT</span>             <span class="o">=</span> <span class="n">rtf</span>
</span></span><span class="line"><span class="cl"><span class="n">COMPACT_RTF</span>            <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">RTF_HYPERLINKS</span>         <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">RTF_STYLESHEET_FILE</span>    <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">RTF_EXTENSIONS_FILE</span>    <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the man page output</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_MAN</span>           <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">MAN_OUTPUT</span>             <span class="o">=</span> <span class="n">man</span>
</span></span><span class="line"><span class="cl"><span class="n">MAN_EXTENSION</span>          <span class="o">=</span> <span class="o">.</span><span class="mi">3</span>
</span></span><span class="line"><span class="cl"><span class="n">MAN_LINKS</span>              <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the XML output</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_XML</span>           <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">XML_OUTPUT</span>             <span class="o">=</span> <span class="n">xml</span>
</span></span><span class="line"><span class="cl"><span class="n">XML_PROGRAMLISTING</span>     <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the DOCBOOK output</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_DOCBOOK</span>       <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">DOCBOOK_OUTPUT</span>         <span class="o">=</span> <span class="n">docbook</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options for the AutoGen Definitions output</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_AUTOGEN_DEF</span>   <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the Perl module output</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_PERLMOD</span>       <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">PERLMOD_LATEX</span>          <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">PERLMOD_PRETTY</span>         <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">PERLMOD_MAKEVAR_PREFIX</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the preprocessor</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">ENABLE_PREPROCESSING</span>   <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">MACRO_EXPANSION</span>        <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">EXPAND_ONLY_PREDEF</span>     <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">SEARCH_INCLUDES</span>        <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">INCLUDE_PATH</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">INCLUDE_FILE_PATTERNS</span>  <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">PREDEFINED</span>             <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">EXPAND_AS_DEFINED</span>      <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">SKIP_FUNCTION_MACROS</span>   <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to external references</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">TAGFILES</span>               <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_TAGFILE</span>       <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">ALLEXTERNALS</span>           <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTERNAL_GROUPS</span>        <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTERNAL_PAGES</span>         <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">PERL_PATH</span>              <span class="o">=</span> <span class="err">@</span><span class="n">PERL_EXECUTABLE</span><span class="err">@</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the dot tool</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">CLASS_DIAGRAMS</span>         <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">MSCGEN_PATH</span>            <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">DIA_PATH</span>               <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">HIDE_UNDOC_RELATIONS</span>   <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">HAVE_DOT</span>               <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">DOT_NUM_THREADS</span>        <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">DOT_FONTNAME</span>           <span class="o">=</span> <span class="n">Helvetica</span>
</span></span><span class="line"><span class="cl"><span class="n">DOT_FONTSIZE</span>           <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="n">DOT_FONTPATH</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">CLASS_GRAPH</span>            <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">COLLABORATION_GRAPH</span>    <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">GROUP_GRAPHS</span>           <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">UML_LOOK</span>               <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">UML_LIMIT_NUM_FIELDS</span>   <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="n">TEMPLATE_RELATIONS</span>     <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">INCLUDE_GRAPH</span>          <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">INCLUDED_BY_GRAPH</span>      <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">CALL_GRAPH</span>             <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">CALLER_GRAPH</span>           <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">GRAPHICAL_HIERARCHY</span>    <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">DIRECTORY_GRAPH</span>        <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">DOT_IMAGE_FORMAT</span>       <span class="o">=</span> <span class="n">png</span>
</span></span><span class="line"><span class="cl"><span class="n">INTERACTIVE_SVG</span>        <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">DOT_PATH</span>               <span class="o">=</span> <span class="err">@</span><span class="n">DOXYGEN_DOT_PATH</span><span class="err">@</span>
</span></span><span class="line"><span class="cl"><span class="n">DOTFILE_DIRS</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">MSCFILE_DIRS</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">DIAFILE_DIRS</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">DOT_GRAPH_MAX_NODES</span>    <span class="o">=</span> <span class="mi">50</span>
</span></span><span class="line"><span class="cl"><span class="n">MAX_DOT_GRAPH_DEPTH</span>    <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">DOT_TRANSPARENT</span>        <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">DOT_MULTI_TARGETS</span>      <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_LEGEND</span>        <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">DOT_CLEANUP</span>            <span class="o">=</span> <span class="n">YES</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这是一个<code>Doxygen</code>的模板！</p>
</div>
    </div>
  </div>
<p><strong>src/CMakeLists.txt</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_library</span><span class="p">(</span><span class="n">message</span> <span class="n">STATIC</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">hello_world</span> <span class="n">hello_world</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">hello_world</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/message.hpp</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iosfwd&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @file message.hpp
</span></span></span><span class="line"><span class="cl"><span class="cm"> **/</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @class Message
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @brief Forwards string to screen
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @author jiangli
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @date 2024
</span></span></span><span class="line"><span class="cl"><span class="cm"> **/</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Message</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">   * @brief Constructor from a string
</span></span></span><span class="line"><span class="cl"><span class="cm">   * @param[in] m a message
</span></span></span><span class="line"><span class="cl"><span class="cm">   **/</span>
</span></span><span class="line"><span class="cl">  <span class="n">Message</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">)</span> <span class="o">:</span> <span class="n">message_</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">   * @brief Constructor from a character array
</span></span></span><span class="line"><span class="cl"><span class="cm">   * @param[in] m a message
</span></span></span><span class="line"><span class="cl"><span class="cm">   **/</span>
</span></span><span class="line"><span class="cl">  <span class="n">Message</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">m</span><span class="p">)</span> <span class="o">:</span> <span class="n">message_</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="n">m</span><span class="p">))</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">,</span> <span class="n">Message</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">obj</span><span class="p">.</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">os</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// The message to be forwarded to screen
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">message_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">   * @brief Function to forward message to screen
</span></span></span><span class="line"><span class="cl"><span class="cm">   * @param[in, out] os output stream
</span></span></span><span class="line"><span class="cl"><span class="cm">   **/</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/message.cpp</strong></p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;message.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">Message</span><span class="o">::</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;This is my very nice message: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">message_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">os</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/hello_world.cpp</strong></p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;message.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Message</span> <span class="n">say_hello</span><span class="p">(</span><span class="s">&#34;Hello, CMake World!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">say_hello</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">Message</span> <span class="n">say_goodbye</span><span class="p">(</span><span class="s">&#34;Goodbye, CMake World&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">say_goodbye</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir build <span class="p">&amp;</span> <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake ..
</span></span><span class="line"><span class="cl">cmake --build . --target docs</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">doxygen 文档</div>
</center>
<br>
<p>![Image](data:image/svg+xml,%3C%3Fxml version=&lsquo;1.0&rsquo; encoding=&lsquo;UTF-8&rsquo;%3F%3E%3Csvg width=&lsquo;1px&rsquo; height=&lsquo;1px&rsquo; viewBox=&lsquo;0 0 1 1&rsquo; version=&lsquo;1.1&rsquo; xmlns=&lsquo;<a href="http://www.w3.org/2000/svg%27"target="_blank" rel="external nofollow noopener noreferrer">http://www.w3.org/2000/svg'<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> xmlns:xlink=&lsquo;<a href="http://www.w3.org/1999/xlink%27%3E%3Ctitle%3E%3C/title%3E%3Cg"target="_blank" rel="external nofollow noopener noreferrer">http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> stroke=&lsquo;none&rsquo; stroke-width=&lsquo;1&rsquo; fill=&lsquo;none&rsquo; fill-rule=&lsquo;evenodd&rsquo; fill-opacity=&lsquo;0&rsquo;%3E%3Cg transform=&lsquo;translate(-249.000000, -126.000000)&rsquo; fill=&rsquo;%23FFFFFF&rsquo;%3E%3Crect x=&lsquo;249&rsquo; y=&lsquo;126&rsquo; width=&lsquo;1&rsquo; height=&lsquo;1&rsquo;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>
<p>![Image](data:image/svg+xml,%3C%3Fxml version=&lsquo;1.0&rsquo; encoding=&lsquo;UTF-8&rsquo;%3F%3E%3Csvg width=&lsquo;1px&rsquo; height=&lsquo;1px&rsquo; viewBox=&lsquo;0 0 1 1&rsquo; version=&lsquo;1.1&rsquo; xmlns=&lsquo;<a href="http://www.w3.org/2000/svg%27"target="_blank" rel="external nofollow noopener noreferrer">http://www.w3.org/2000/svg'<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> xmlns:xlink=&lsquo;<a href="http://www.w3.org/1999/xlink%27%3E%3Ctitle%3E%3C/title%3E%3Cg"target="_blank" rel="external nofollow noopener noreferrer">http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> stroke=&lsquo;none&rsquo; stroke-width=&lsquo;1&rsquo; fill=&lsquo;none&rsquo; fill-rule=&lsquo;evenodd&rsquo; fill-opacity=&lsquo;0&rsquo;%3E%3Cg transform=&lsquo;translate(-249.000000, -126.000000)&rsquo; fill=&rsquo;%23FFFFFF&rsquo;%3E%3Crect x=&lsquo;249&rsquo; y=&lsquo;126&rsquo; width=&lsquo;1&rsquo; height=&lsquo;1&rsquo;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>
<p>cmake45</p>
<p>cmake · 目录</p>
<p>上一篇CMake:验证自己生成的库</p>
<p>People who liked this content also liked</p>
<p>CMake:超级构建模式</p>
<p>Hope Hut</p>
<p>不喜欢</p>
<p>不看的原因</p>
<p>OK</p>
<ul>
<li>内容质量低</li>
<li>不看此公众号</li>
</ul>
<p></p>
<p>值得苦练的100道Python经典练手题，（附详细答案）建议收藏</p>
<p>编程课代表</p>
<p>不喜欢</p>
<p>不看的原因</p>
<p>OK</p>
<ul>
<li>内容质量低</li>
<li>不看此公众号</li>
</ul>
<p></p>
<p>Deno 1.40、Shikiji 0.10、Mantine 7.5、Bun for Windows、Rsdoctor、Zed</p>
<p>前端仓库</p>
<p>不喜欢</p>
<p>不看</p>
]]></description></item><item><title>CMake 笔记 | [44] 验证自己生成的库</title><link>https://jianye0428.github.io/posts/cmake_note_44/</link><pubDate>Thu, 01 Feb 2024 13:11:14 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_44/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>经过上一篇（<a href="https://mp.weixin.qq.com/s?__biz=MzkxMzI5Mjk4Mg==&amp;mid=2247485493&amp;idx=1&amp;sn=153d11f6db08ef0f70ce8bb95d7e0417&amp;scene=21#wechat_redirect"target="_blank" rel="external nofollow noopener noreferrer">CMake:输出库（像其他优秀的库一样优雅）<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>），我们已经构建出了优雅的库。本篇，我们将基于上一篇的内容，写一个简单的使用demo进行验证！</strong></div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">└── use_message.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter9/04"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter9/04<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.5</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">use</span><span class="o">-</span><span class="n">message</span>
</span></span><span class="line"><span class="cl">  <span class="n">LANGUAGES</span> <span class="n">CXX</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_PREFIX_PATH</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">jiangli</span><span class="o">/</span><span class="n">repo</span><span class="o">/</span><span class="n">tutorials</span><span class="o">/</span><span class="n">cmake</span><span class="o">-</span><span class="n">tutorial</span><span class="o">/</span><span class="n">chapter9</span><span class="o">/</span><span class="mo">03</span><span class="o">/</span><span class="n">output</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">cmake</span><span class="o">/</span><span class="n">example</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">message</span> <span class="n">REQUIRED</span> <span class="n">CONFIG</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">message_FOUND</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Found message: (found version ${message_VERSION})&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include_directories</span><span class="p">(</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">jiangli</span><span class="o">/</span><span class="n">repo</span><span class="o">/</span><span class="n">tutorials</span><span class="o">/</span><span class="n">cmake</span><span class="o">-</span><span class="n">tutorial</span><span class="o">/</span><span class="n">chapter9</span><span class="o">/</span><span class="mo">03</span><span class="o">/</span><span class="n">output</span><span class="o">/</span><span class="n">include</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">use_message</span> <span class="n">use_message</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">use_message</span> <span class="n">message</span><span class="o">::</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>这里，我们没有对我们的库添加到环境变量中，所以为了使<code>find_package</code>命令能够找到我们的库，需要在<code>find_package</code>命令前设置库所在的<code>cmake</code>文件路径。</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">set(CMAKE_PREFIX_PATH /home/jiangli/repo/tutorials/cmake-tutorial/chapter9/03/output/share/cmake/example)</span></span></code></pre></td></tr></table>
</div>
</div><p>如果我们把生成的库设置到环境变量中，那么我们就可以省略掉这一步骤！</p>
</div>
    </div>
  </div>
<p><strong>use_message.cpp</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;message/message.hpp&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Message</span> <span class="n">say_hello</span><span class="p">(</span><span class="s">&#34;Hello, CMake World!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">say_hello</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">Message</span> <span class="n">say_goodbye</span><span class="p">(</span><span class="s">&#34;Goodbye, CMake World&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">say_goodbye</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir build <span class="p">&amp;</span> <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake ..
</span></span><span class="line"><span class="cl">make .
</span></span><span class="line"><span class="cl">./use_message</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">验证生成的库</div>
</center>
<br>
<p>![Image](data:image/svg+xml,%3C%3Fxml version=&lsquo;1.0&rsquo; encoding=&lsquo;UTF-8&rsquo;%3F%3E%3Csvg width=&lsquo;1px&rsquo; height=&lsquo;1px&rsquo; viewBox=&lsquo;0 0 1 1&rsquo; version=&lsquo;1.1&rsquo; xmlns=&lsquo;<a href="http://www.w3.org/2000/svg%27"target="_blank" rel="external nofollow noopener noreferrer">http://www.w3.org/2000/svg'<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> xmlns:xlink=&lsquo;<a href="http://www.w3.org/1999/xlink%27%3E%3Ctitle%3E%3C/title%3E%3Cg"target="_blank" rel="external nofollow noopener noreferrer">http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> stroke=&lsquo;none&rsquo; stroke-width=&lsquo;1&rsquo; fill=&lsquo;none&rsquo; fill-rule=&lsquo;evenodd&rsquo; fill-opacity=&lsquo;0&rsquo;%3E%3Cg transform=&lsquo;translate(-249.000000, -126.000000)&rsquo; fill=&rsquo;%23FFFFFF&rsquo;%3E%3Crect x=&lsquo;249&rsquo; y=&lsquo;126&rsquo; width=&lsquo;1&rsquo; height=&lsquo;1&rsquo;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>
<p>![Image](data:image/svg+xml,%3C%3Fxml version=&lsquo;1.0&rsquo; encoding=&lsquo;UTF-8&rsquo;%3F%3E%3Csvg width=&lsquo;1px&rsquo; height=&lsquo;1px&rsquo; viewBox=&lsquo;0 0 1 1&rsquo; version=&lsquo;1.1&rsquo; xmlns=&lsquo;<a href="http://www.w3.org/2000/svg%27"target="_blank" rel="external nofollow noopener noreferrer">http://www.w3.org/2000/svg'<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> xmlns:xlink=&lsquo;<a href="http://www.w3.org/1999/xlink%27%3E%3Ctitle%3E%3C/title%3E%3Cg"target="_blank" rel="external nofollow noopener noreferrer">http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> stroke=&lsquo;none&rsquo; stroke-width=&lsquo;1&rsquo; fill=&lsquo;none&rsquo; fill-rule=&lsquo;evenodd&rsquo; fill-opacity=&lsquo;0&rsquo;%3E%3Cg transform=&lsquo;translate(-249.000000, -126.000000)&rsquo; fill=&rsquo;%23FFFFFF&rsquo;%3E%3Crect x=&lsquo;249&rsquo; y=&lsquo;126&rsquo; width=&lsquo;1&rsquo; height=&lsquo;1&rsquo;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>
<p>cmake45</p>
<p>cmake · 目录</p>
<p>上一篇CMake:输出库（像其他优秀的库一样优雅）下一篇CMake:使用Doxygen构建文档</p>
<p>People who liked this content also liked</p>
<p>CMake:超级构建模式</p>
<p>Hope Hut</p>
<p>不喜欢</p>
<p>不看的原因</p>
<p>OK</p>
<ul>
<li>内容质量低</li>
<li>不看此公众号</li>
</ul>
<p></p>
<p>CMake:使用函数和宏重用代码</p>
<p>Hope Hut</p>
<p>不喜欢</p>
<p>不看的原因</p>
<p>OK</p>
<ul>
<li>内容质量低</li>
<li>不看此公众号</li>
</ul>
<p></p>
<p>CMake:使用Doxygen构建文档</p>
<p>Hope Hut</p>
<p>不喜欢</p>
<p>不看的原因</p>
<p>OK</p>
<ul>
<li>内容质量低</li>
<li>不看此公众号</li>
</ul>
<p></p>
<p></p>
<p>Scan to Follow</p>
<p>people underline</p>
]]></description></item><item><title>CMake 笔记 | [43] 输出库</title><link>https://jianye0428.github.io/posts/cmake_note_43/</link><pubDate>Thu, 01 Feb 2024 13:11:11 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_43/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>前面的笔记中（<a href="https://mp.weixin.qq.com/s?__biz=MzkxMzI5Mjk4Mg==&amp;mid=2247484287&amp;idx=1&amp;sn=df3b9fb1c0e4c2497b114cdebb6ac2bf&amp;scene=21#wechat_redirect"target="_blank" rel="external nofollow noopener noreferrer">CMake：静态库和动态库的详解(Linux/Windows)<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>），展示了如何输出动态库和静态库，但是存在一些问题，如只输出了其头文件、符号表和库文件，但实际我们希望，当其他人编译并安装了我们的库，库就能更容易找到，如配置完环境变换或者指定库的路径。这篇笔记将展示CMake如何让我们导出目标，以便其他使用CMake的项目可以轻松地获取它们。</strong></div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── cmake
</span></span><span class="line"><span class="cl">│   └── messageConfig.cmake.in
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">│   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   ├── hello_world.cpp
</span></span><span class="line"><span class="cl">│   ├── message.cpp
</span></span><span class="line"><span class="cl">│   └── message.hpp
</span></span><span class="line"><span class="cl">└── <span class="nb">test</span>
</span></span><span class="line"><span class="cl">    └── CMakeLists.txt</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter9/03"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter9/03<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp"># CMake 3.6 needed for IMPORTED_TARGET option
</span></span></span><span class="line"><span class="cl"><span class="cp"># to pkg_search_module
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.6</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example</span>
</span></span><span class="line"><span class="cl">  <span class="n">LANGUAGES</span> <span class="n">CXX</span>
</span></span><span class="line"><span class="cl">  <span class="n">VERSION</span> <span class="mf">1.0.0</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># &lt;&lt;&lt; General set up &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cp"># 检查是否已经设置了安装前缀
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">if</span><span class="p">(</span><span class="n">CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="cp"># 设置安装目录为项目源目录下的output文件夹
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="n">set</span><span class="p">(</span><span class="n">CMAKE_INSTALL_PREFIX</span> <span class="s">&#34;${CMAKE_SOURCE_DIR}/output/&#34;</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;...&#34;</span> <span class="n">FORCE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Project will be installed to ${CMAKE_INSTALL_PREFIX}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">CMAKE_BUILD_TYPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">CMAKE_BUILD_TYPE</span> <span class="n">Release</span> <span class="n">CACHE</span> <span class="n">STRING</span> <span class="s">&#34;Build type&#34;</span> <span class="n">FORCE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Build type set to ${CMAKE_BUILD_TYPE}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">GNUInstallDirs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_LIBRARY_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_RUNTIME_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># Offer the user the choice of overriding the installation directories
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_LIBDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for libraries&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_BINDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for executables&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_INCLUDEDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_INCLUDEDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for header files&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">WIN32</span> <span class="n">AND</span> <span class="n">NOT</span> <span class="n">CYGWIN</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">DEF_INSTALL_CMAKEDIR</span> <span class="n">CMake</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">DEF_INSTALL_CMAKEDIR</span> <span class="n">share</span><span class="o">/</span><span class="n">cmake</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_CMAKEDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">DEF_INSTALL_CMAKEDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for CMake files&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># Report to user
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">foreach</span><span class="p">(</span><span class="n">p</span> <span class="n">LIB</span> <span class="n">BIN</span> <span class="n">INCLUDE</span> <span class="n">CMAKE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">file</span><span class="p">(</span><span class="n">TO_NATIVE_PATH</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_PREFIX</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_</span><span class="err">$</span><span class="p">{</span><span class="n">p</span><span class="p">}</span><span class="n">DIR</span><span class="p">}</span> <span class="n">_path</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Installing ${p} components to ${_path}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">unset</span><span class="p">(</span><span class="n">_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endforeach</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">enable_testing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">test</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>上述cmake在上一篇<a href="https://mp.weixin.qq.com/s?__biz=MzkxMzI5Mjk4Mg==&amp;mid=2247485469&amp;idx=1&amp;sn=24c81bc819c02b4c01367c593117276a&amp;scene=21#wechat_redirect"target="_blank" rel="external nofollow noopener noreferrer">cmake:导出头文件<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>相关代码详细分析过了，请移步到上一篇参考。</p>
<p><strong>cmake/messageConfig.cmake.in</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="err">@</span><span class="n">PACKAGE_INIT</span><span class="err">@</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="s">&#34;${CMAKE_CURRENT_LIST_DIR}/messageTargets.cmake&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">check_required_components</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;message-shared&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;message-static&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;message-hello-world_wDSO&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;message-hello-world_wAR&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># Remove dependency on UUID if on Windows
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">WIN32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">TARGET</span> <span class="n">PkgConfig</span><span class="o">::</span><span class="n">UUID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">find_package</span><span class="p">(</span><span class="n">PkgConfig</span> <span class="n">REQUIRED</span> <span class="n">QUIET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">pkg_search_module</span><span class="p">(</span><span class="n">UUID</span> <span class="n">REQUIRED</span> <span class="n">uuid</span> <span class="n">IMPORTED_TARGET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="err">@</span><span class="n">PACKAGE_INIT</span><span class="err">@</span></span></span></code></pre></td></tr></table>
</div>
</div><p>占位符将使用<code>configure_package_config_file</code>命令进行替换。如果项目成功构建，那么将在<code>messageConfig.cmake</code>文件中进行替换：</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">get_filename_component</span><span class="p">(</span><span class="n">PACKAGE_PREFIX_DIR</span> <span class="s">&#34;${CMAKE_CURRENT_LIST_DIR}/../../../&#34;</span> <span class="n">ABSOLUTE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">macro</span><span class="p">(</span><span class="n">set_and_check</span> <span class="n">_var</span> <span class="n">_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">_var</span><span class="p">}</span> <span class="s">&#34;${_file}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">EXISTS</span> <span class="s">&#34;${_file}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">FATAL_ERROR</span> <span class="s">&#34;File or directory ${_file} referenced by variable ${_var} does not exist !&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endmacro</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">macro</span><span class="p">(</span><span class="n">check_required_components</span> <span class="n">_NAME</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">foreach</span><span class="p">(</span><span class="n">comp</span> <span class="err">$</span><span class="p">{</span><span class="err">$</span><span class="p">{</span><span class="n">_NAME</span><span class="p">}</span><span class="n">_FIND_COMPONENTS</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="err">$</span><span class="p">{</span><span class="n">_NAME</span><span class="p">}</span><span class="n">_</span><span class="err">$</span><span class="p">{</span><span class="n">comp</span><span class="p">}</span><span class="n">_FOUND</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">_NAME</span><span class="p">}</span><span class="n">_FIND_REQUIRED_</span><span class="err">$</span><span class="p">{</span><span class="n">comp</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">        <span class="n">set</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">_NAME</span><span class="p">}</span><span class="n">_FOUND</span> <span class="n">FALSE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">endforeach</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endmacro</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="s">&#34;${CMAKE_CURRENT_LIST_DIR}/messageTargets.cmake&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>包含为目标自动生成的导出文件。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">check_required_components</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;message-shared&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;message-static&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;message-hello-world_wDSO&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;message-hello-world_wAR&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>检查静态库和动态库，以及两个<code>Hello, World</code>可执行文件是否带有<code>CMake</code>提供的<code>check_required_components</code>函数。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">WIN32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">TARGET</span> <span class="n">PkgConfig</span><span class="o">::</span><span class="n">UUID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">find_package</span><span class="p">(</span><span class="n">PkgConfig</span> <span class="n">REQUIRED</span> <span class="n">QUIET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">pkg_search_module</span><span class="p">(</span><span class="n">UUID</span> <span class="n">REQUIRED</span> <span class="n">uuid</span> <span class="n">IMPORTED_TARGET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>检查目标<code>PkgConfig::UUID</code>是否存在。如果没有，再次搜索<code>UUID</code>库(只在非Windows操作系统下有效)。</p></div>
    </div>
  </div>
<p><strong>src/CMakeLists.txt</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp"># Search for pkg-config and UUID
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">find_package</span><span class="p">(</span><span class="n">PkgConfig</span> <span class="n">QUIET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">PKG_CONFIG_FOUND</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">pkg_search_module</span><span class="p">(</span><span class="n">UUID</span> <span class="n">uuid</span> <span class="n">IMPORTED_TARGET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">TARGET</span> <span class="n">PkgConfig</span><span class="o">::</span><span class="n">UUID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Found libuuid&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">UUID_FOUND</span> <span class="n">TRUE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># &lt;&lt;&lt; Build targets &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp"># SHARED library
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_library</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span> <span class="n">SHARED</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">GenerateExportHeader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">generate_export_header</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">BASE_NAME</span> <span class="s">&#34;message&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EXPORT_MACRO_NAME</span> <span class="s">&#34;MESSAGE_LIB_API&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EXPORT_FILE_NAME</span> <span class="s">&#34;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/message_export.h&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">STATIC_DEFINE</span> <span class="s">&#34;MESSAGE_STATIC_DEFINE&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">DEFINE_NO_DEPRECATED</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">message</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_compile_definitions</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">HAVE_UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="n">INTERFACE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="nl">INSTALL_INTERFACE</span><span class="p">:</span><span class="n">USING_MESSAGE</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="nl">BUILD_INTERFACE</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_INCLUDEDIR</span><span class="p">}</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="nl">INSTALL_INTERFACE</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_INCLUDEDIR</span><span class="p">}</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">PkgConfig</span><span class="o">::</span><span class="n">UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_target_properties</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">POSITION_INDEPENDENT_CODE</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">CXX_VISIBILITY_PRESET</span> <span class="n">hidden</span>
</span></span><span class="line"><span class="cl">    <span class="n">VISIBILITY_INLINES_HIDDEN</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">SOVERSION</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_VERSION_MAJOR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_NAME</span> <span class="s">&#34;message&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DEBUG_POSTFIX</span> <span class="s">&#34;_d&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">PUBLIC_HEADER</span> <span class="s">&#34;message.hpp;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/message_export.h&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">MACOSX_RPATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># STATIC library
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_library</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span> <span class="n">STATIC</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">message</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_compile_definitions</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="n">message_STATIC_DEFINE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">HAVE_UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="n">INTERFACE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="nl">INSTALL_INTERFACE</span><span class="p">:</span><span class="n">USING_MESSAGE</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="nl">BUILD_INTERFACE</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_INCLUDEDIR</span><span class="p">}</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="nl">INSTALL_INTERFACE</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_INCLUDEDIR</span><span class="p">}</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">PkgConfig</span><span class="o">::</span><span class="n">UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_target_properties</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">POSITION_INDEPENDENT_CODE</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">ARCHIVE_OUTPUT_NAME</span> <span class="s">&#34;message&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DEBUG_POSTFIX</span> <span class="s">&#34;_sd&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">RELEASE_POSTFIX</span> <span class="s">&#34;_s&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">PUBLIC_HEADER</span> <span class="s">&#34;message.hpp;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/message_export.h&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># EXECUTABLES
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_executable</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span> <span class="n">hello_world</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wAR</span> <span class="n">hello_world</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wAR</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># &lt;&lt;&lt; Install and export targets &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">install</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">TARGETS</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">    <span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span>
</span></span><span class="line"><span class="cl">    <span class="n">hello</span><span class="o">-</span><span class="n">world_wAR</span>
</span></span><span class="line"><span class="cl">  <span class="n">EXPORT</span>
</span></span><span class="line"><span class="cl">    <span class="n">messageTargets</span>
</span></span><span class="line"><span class="cl">  <span class="n">ARCHIVE</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_LIBDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">lib</span>
</span></span><span class="line"><span class="cl">  <span class="n">RUNTIME</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_BINDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">bin</span>
</span></span><span class="line"><span class="cl">  <span class="n">LIBRARY</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_LIBDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">lib</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC_HEADER</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_INCLUDEDIR</span><span class="p">}</span><span class="o">/</span><span class="n">message</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">dev</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">install</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">EXPORT</span>
</span></span><span class="line"><span class="cl">    <span class="n">messageTargets</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAMESPACE</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;message::&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">DESTINATION</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_CMAKEDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMPONENT</span>
</span></span><span class="line"><span class="cl">    <span class="n">dev</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">CMakePackageConfigHelpers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">write_basic_package_version_file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">messageConfigVersion</span><span class="p">.</span><span class="n">cmake</span>
</span></span><span class="line"><span class="cl">  <span class="n">VERSION</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_VERSION</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMPATIBILITY</span> <span class="n">SameMajorVersion</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">configure_package_config_file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">cmake</span><span class="o">/</span><span class="n">messageConfig</span><span class="p">.</span><span class="n">cmake</span><span class="p">.</span><span class="n">in</span>
</span></span><span class="line"><span class="cl">  <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">messageConfig</span><span class="p">.</span><span class="n">cmake</span>
</span></span><span class="line"><span class="cl">  <span class="n">INSTALL_DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_CMAKEDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">install</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">FILES</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">messageConfig</span><span class="p">.</span><span class="n">cmake</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">messageConfigVersion</span><span class="p">.</span><span class="n">cmake</span>
</span></span><span class="line"><span class="cl">  <span class="n">DESTINATION</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_CMAKEDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">install</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">EXPORT</span>
</span></span><span class="line"><span class="cl">    <span class="n">messageTargets</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAMESPACE</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;message::&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">DESTINATION</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_CMAKEDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMPONENT</span>
</span></span><span class="line"><span class="cl">    <span class="n">dev</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong><code>EXPORT messageTargets</code></strong>:
<ul>
<li>这里指定要安装的导出集名称。<code>messageTargets</code> 是一个之前定义的导出集，其中包含了项目中的一些目标（例如库或可执行文件）。</li>
<li>这些目标是在 CMake 构建过程中定义并构建的，<code>EXPORT</code> 关键字用于指明这些目标在安装时应当被导出为一组。本篇是将动态库、静态库以及对应的头文件打包成了一组（messageTargets）</li>
</ul>
</li>
<li><strong><code>NAMESPACE &quot;message::&quot;</code></strong>:
<ul>
<li>这个命令为导出的目标设置了一个命名空间前缀。在这种情况下，任何导出的目标都将被前缀 <code>message::</code> 所标记。</li>
<li>如，如果有一个名为 <code>message-shared</code> 的库，在其他项目中通过 <code>find_package</code> 查找和链接时，可以使用 <code>message::message-shared</code> 来引用它。</li>
</ul>
</li>
<li><strong><code>DESTINATION ${INSTALL_CMAKEDIR}</code></strong>:
<ul>
<li>指定导出的目标（<code>messageTargets</code>）应当被安装到的目标文件夹。</li>
<li><code>${INSTALL_CMAKEDIR}</code> 是一个变量，它在主 <code>CMakeLists.txt</code>中定义了。</li>
</ul>
</li>
<li><strong><code>COMPONENT dev</code></strong>:
<ul>
<li><code>COMPONENT</code> 关键字用于指定这部分安装属于哪个组件。在这里，组件被命名为 <code>dev</code>。</li>
<li>在 CMake 中，可以将安装分成多个组件，例如库文件、头文件、文档等，以便在安装时可以选择性地安装特定的组件。<code>dev</code> 组件可能包含开发相关的文件，比如 CMake 配置和库文件。</li>
</ul>
</li>
</ul>
</div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">CMakePackageConfigHelpers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">write_basic_package_version_file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">messageConfigVersion</span><span class="p">.</span><span class="n">cmake</span>
</span></span><span class="line"><span class="cl">  <span class="n">VERSION</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_VERSION</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMPATIBILITY</span> <span class="n">SameMajorVersion</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">configure_package_config_file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">cmake</span><span class="o">/</span><span class="n">messageConfig</span><span class="p">.</span><span class="n">cmake</span><span class="p">.</span><span class="n">in</span>
</span></span><span class="line"><span class="cl">  <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">messageConfig</span><span class="p">.</span><span class="n">cmake</span>
</span></span><span class="line"><span class="cl">  <span class="n">INSTALL_DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_CMAKEDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">install</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">FILES</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">messageConfig</span><span class="p">.</span><span class="n">cmake</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">messageConfigVersion</span><span class="p">.</span><span class="n">cmake</span>
</span></span><span class="line"><span class="cl">  <span class="n">DESTINATION</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_CMAKEDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong><code>include(CMakePackageConfigHelpers)</code></strong>:
<ul>
<li>命令包含了 CMake 模块 <code>CMakePackageConfigHelpers</code>，该模块提供了一些辅助宏和函数，用于生成和配置包配置文件。</li>
<li>这些辅助工具简化了创建兼容不同项目的配置文件的过程。</li>
</ul>
</li>
<li><strong><code>write_basic_package_version_file</code></strong>:
<ul>
<li>生成一个包版本文件，该文件包含了关于包版本和兼容性的信息。</li>
<li><code>${CMAKE_CURRENT_BINARY_DIR}/messageConfigVersion.cmake</code> 指定生成文件的路径和名称。</li>
<li><code>VERSION ${PROJECT_VERSION}</code> 指定了包的当前版本，<code>${PROJECT_VERSION}</code> 是在 CMake 中定义的项目版本变量。</li>
<li><code>COMPATIBILITY SameMajorVersion</code> 指定了版本兼容性规则。在本篇，它表明包是与同一主要版本号的其他版本兼容的。</li>
</ul>
</li>
<li><strong><code>configure_package_config_file</code></strong>:
<ul>
<li>命令用于从一个 <code>.in</code> 模板文件生成一个包配置文件。</li>
<li><code>${PROJECT_SOURCE_DIR}/cmake/messageConfig.cmake.in</code> 是模板文件的路径，这个文件通常包含了配置信息，如库的位置、依赖项等。</li>
<li><code>${CMAKE_CURRENT_BINARY_DIR}/messageConfig.cmake</code> 是输出文件的路径和名称。</li>
<li><code>INSTALL_DESTINATION ${INSTALL_CMAKEDIR}</code> 指定了安装时配置文件的目标目录。</li>
</ul>
</li>
<li><strong><code>install</code> 命令</strong>:
<ul>
<li>这个 <code>install</code> 命令用于安装前面生成的配置文件。</li>
<li><code>FILES</code> 关键字后面列出了要安装的文件：生成的 <code>messageConfig.cmake</code> 和 <code>messageConfigVersion.cmake</code> 文件。</li>
<li><code>DESTINATION ${INSTALL_CMAKEDIR}</code> 指定了这些文件的安装目录。</li>
</ul>
</li>
</ul>
</div>
    </div>
  </div>
<p><strong>src/message.hpp</strong></p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iosfwd&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;message_export.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">class</span> <span class="nc">MESSAGE_LIB_API</span> <span class="n">Message</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">Message</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">)</span> <span class="o">:</span> <span class="n">message_</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">,</span> <span class="n">Message</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">obj</span><span class="p">.</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">os</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">message_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GetUUID</span><span class="p">();</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/message.cpp</strong></p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;message.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#ifdef HAVE_UUID
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;uuid/uuid.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">Message</span><span class="o">::</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;This is my very nice message: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">message_</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;...and here is its UUID: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">GetUUID</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">os</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#ifdef HAVE_UUID
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GetUUID</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_t</span> <span class="n">uuid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_generate</span><span class="p">(</span><span class="n">uuid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">uuid_str</span><span class="p">[</span><span class="mi">37</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_unparse_lower</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">uuid_str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_clear</span><span class="p">(</span><span class="n">uuid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">uuid_cxx</span><span class="p">(</span><span class="n">uuid_str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">uuid_cxx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">#else
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GetUUID</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s">&#34;Ooooops, no UUID for you!&#34;</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/hello_world.cpp</strong></p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;message.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Message</span> <span class="n">say_hello</span><span class="p">(</span><span class="s">&#34;Hello, CMake World!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">say_hello</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">Message</span> <span class="n">say_goodbye</span><span class="p">(</span><span class="s">&#34;Goodbye, CMake World&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">say_goodbye</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>test/CMakeLists.txt</strong></p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">test_shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">test_static</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wAR</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p build
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">$ cmake ..
</span></span><span class="line"><span class="cl">$ cmake --build . --target install</span></span></code></pre></td></tr></table>
</div>
</div><p>安装树结构：</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">output
</span></span><span class="line"><span class="cl">   ├── bin
</span></span><span class="line"><span class="cl">   │   ├── hello-world_wAR
</span></span><span class="line"><span class="cl">   │   └── hello-world_wDSO
</span></span><span class="line"><span class="cl">   ├── include
</span></span><span class="line"><span class="cl">   │   └── message
</span></span><span class="line"><span class="cl">   │       ├── message_export.h
</span></span><span class="line"><span class="cl">   │       └── message.hpp
</span></span><span class="line"><span class="cl">   ├── lib
</span></span><span class="line"><span class="cl">   │   ├── libmessage_s.a
</span></span><span class="line"><span class="cl">   │   ├── libmessage.so -&gt; libmessage.so.1
</span></span><span class="line"><span class="cl">   │   └── libmessage.so.1
</span></span><span class="line"><span class="cl">   └── share
</span></span><span class="line"><span class="cl">       └── cmake
</span></span><span class="line"><span class="cl">           └── example
</span></span><span class="line"><span class="cl">               ├── messageConfig.cmake
</span></span><span class="line"><span class="cl">               ├── messageConfigVersion.cmake
</span></span><span class="line"><span class="cl">               ├── messageTargets.cmake
</span></span><span class="line"><span class="cl">               └── messageTargets-release.cmake</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>CMake 笔记 | [42] 导出头文件</title><link>https://jianye0428.github.io/posts/cmake_note_42/</link><pubDate>Thu, 01 Feb 2024 13:11:08 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_42/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><strong>其实，本篇的相关内容已经在</strong><a href="https://mp.weixin.qq.com/s?__biz=MzkxMzI5Mjk4Mg==&amp;mid=2247484287&amp;idx=1&amp;sn=df3b9fb1c0e4c2497b114cdebb6ac2bf&amp;scene=21#wechat_redirect"target="_blank" rel="external nofollow noopener noreferrer"><strong>CMake：静态库和动态库的详解(Linux/Windows)</strong><i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a><strong>笔记中已经详细介绍了具体使用方法，且展示了<code>CMake</code>提供了与平台无关的方式实现的功能。但是，没有处理符号可见性的问题。关于符号的可见性的最佳方式是规定动态库只公开最小的符号，从而限制代码中定义的对象和函数对外的可见性。</strong></p>
<p><strong>我们希望在默认情况下，动态库定义的所有符号都对外隐藏。这将使得项目的贡献者，能够清楚地划分库和外部代码之间的接口，因为他们必须显式地标记所有要在项目外部使用的符号。</strong></p>
</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">│   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   ├── hello_world.cpp
</span></span><span class="line"><span class="cl">│   ├── message.cpp
</span></span><span class="line"><span class="cl">│   └── message.hpp
</span></span><span class="line"><span class="cl">└── <span class="nb">test</span>
</span></span><span class="line"><span class="cl">    └── CMakeLists.txt</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter9/02"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter9/02<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp"># CMake 3.6 needed for IMPORTED_TARGET option
</span></span></span><span class="line"><span class="cl"><span class="cp"># to pkg_search_module
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.6</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">example</span>
</span></span><span class="line"><span class="cl">  <span class="n">LANGUAGES</span> <span class="n">CXX</span>
</span></span><span class="line"><span class="cl">  <span class="n">VERSION</span> <span class="mf">1.0.0</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># &lt;&lt;&lt; General set up &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># 检查是否已经设置了安装前缀
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">if</span><span class="p">(</span><span class="n">CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="cp"># 设置安装目录为项目源目录下的output文件夹
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="n">set</span><span class="p">(</span><span class="n">CMAKE_INSTALL_PREFIX</span> <span class="s">&#34;${CMAKE_SOURCE_DIR}/output/&#34;</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;...&#34;</span> <span class="n">FORCE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Project will be installed to ${CMAKE_INSTALL_PREFIX}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">CMAKE_BUILD_TYPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">CMAKE_BUILD_TYPE</span> <span class="n">Release</span> <span class="n">CACHE</span> <span class="n">STRING</span> <span class="s">&#34;Build type&#34;</span> <span class="n">FORCE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Build type set to ${CMAKE_BUILD_TYPE}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">GNUInstallDirs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_LIBRARY_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_RUNTIME_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># Offer the user the choice of overriding the installation directories
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_LIBDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for libraries&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_BINDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for executables&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_INCLUDEDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_INCLUDEDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for header files&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">WIN32</span> <span class="n">AND</span> <span class="n">NOT</span> <span class="n">CYGWIN</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">DEF_INSTALL_CMAKEDIR</span> <span class="n">CMake</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">DEF_INSTALL_CMAKEDIR</span> <span class="n">share</span><span class="o">/</span><span class="n">cmake</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_CMAKEDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">DEF_INSTALL_CMAKEDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for CMake files&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># Report to user
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">foreach</span><span class="p">(</span><span class="n">p</span> <span class="n">LIB</span> <span class="n">BIN</span> <span class="n">INCLUDE</span> <span class="n">CMAKE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">file</span><span class="p">(</span><span class="n">TO_NATIVE_PATH</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_PREFIX</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_</span><span class="err">$</span><span class="p">{</span><span class="n">p</span><span class="p">}</span><span class="n">DIR</span><span class="p">}</span> <span class="n">_path</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Installing ${p} components to ${_path}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">unset</span><span class="p">(</span><span class="n">_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endforeach</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">enable_testing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">test</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/CMakeLists.txt</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp"># Search for pkg-config and UUID
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">find_package</span><span class="p">(</span><span class="n">PkgConfig</span> <span class="n">QUIET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">PKG_CONFIG_FOUND</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">pkg_search_module</span><span class="p">(</span><span class="n">UUID</span> <span class="n">uuid</span> <span class="n">IMPORTED_TARGET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">TARGET</span> <span class="n">PkgConfig</span><span class="o">::</span><span class="n">UUID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Found libuuid&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">UUID_FOUND</span> <span class="n">TRUE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># &lt;&lt;&lt; Build targets &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp"># SHARED library
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_library</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span> <span class="n">SHARED</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">message</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_compile_definitions</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">HAVE_UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">PkgConfig</span><span class="o">::</span><span class="n">UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_target_properties</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">POSITION_INDEPENDENT_CODE</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">CXX_VISIBILITY_PRESET</span> <span class="n">hidden</span>
</span></span><span class="line"><span class="cl">    <span class="n">VISIBILITY_INLINES_HIDDEN</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">SOVERSION</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_VERSION_MAJOR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_NAME</span> <span class="s">&#34;message&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DEBUG_POSTFIX</span> <span class="s">&#34;_d&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">PUBLIC_HEADER</span> <span class="s">&#34;message.hpp;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/message_export.h&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">MACOSX_RPATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">GenerateExportHeader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">generate_export_header</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">BASE_NAME</span> <span class="s">&#34;message&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EXPORT_MACRO_NAME</span> <span class="s">&#34;MESSAGE_LIB_API&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EXPORT_FILE_NAME</span> <span class="s">&#34;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/message_export.h&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">STATIC_DEFINE</span> <span class="s">&#34;MESSAGE_STATIC_DEFINE&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">DEFINE_NO_DEPRECATED</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_INCLUDEDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># STATIC library
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_library</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span> <span class="n">STATIC</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">message</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_compile_definitions</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="n">MESSAGE_STATIC_DEFINE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">HAVE_UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_INCLUDEDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">PkgConfig</span><span class="o">::</span><span class="n">UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_target_properties</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">POSITION_INDEPENDENT_CODE</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">ARCHIVE_OUTPUT_NAME</span> <span class="s">&#34;message&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DEBUG_POSTFIX</span> <span class="s">&#34;_sd&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">RELEASE_POSTFIX</span> <span class="s">&#34;_s&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">PUBLIC_HEADER</span> <span class="s">&#34;message.hpp;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/message_export.h&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># EXECUTABLES
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_executable</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span> <span class="n">hello_world</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># Prepare RPATH
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">file</span><span class="p">(</span><span class="n">RELATIVE_PATH</span> <span class="n">_rel</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_PREFIX</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_BINDIR</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_PREFIX</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">APPLE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">_rpath</span> <span class="s">&#34;@loader_path/${_rel}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">_rpath</span> <span class="s">&#34;\$ORIGIN/${_rel}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">file</span><span class="p">(</span><span class="n">TO_NATIVE_PATH</span> <span class="s">&#34;${_rpath}/${INSTALL_LIBDIR}&#34;</span> <span class="n">message_RPATH</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_target_properties</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">MACOSX_RPATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl">    <span class="n">SKIP_BUILD_RPATH</span> <span class="n">OFF</span>
</span></span><span class="line"><span class="cl">    <span class="n">BUILD_WITH_INSTALL_RPATH</span> <span class="n">OFF</span>
</span></span><span class="line"><span class="cl">    <span class="n">INSTALL_RPATH</span> <span class="s">&#34;${message_RPATH}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">INSTALL_RPATH_USE_LINK_PATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wAR</span> <span class="n">hello_world</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wAR</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># &lt;&lt;&lt; Install and export targets &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">install</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">TARGETS</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">    <span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span>
</span></span><span class="line"><span class="cl">    <span class="n">hello</span><span class="o">-</span><span class="n">world_wAR</span>
</span></span><span class="line"><span class="cl">  <span class="n">ARCHIVE</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_LIBDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">lib</span>
</span></span><span class="line"><span class="cl">  <span class="n">RUNTIME</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_BINDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">bin</span>
</span></span><span class="line"><span class="cl">  <span class="n">LIBRARY</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_LIBDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">lib</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC_HEADER</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_INCLUDEDIR</span><span class="p">}</span><span class="o">/</span><span class="n">message</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">dev</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set_target_properties</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">POSITION_INDEPENDENT_CODE</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">CXX_VISIBILITY_PRESET</span> <span class="n">hidden</span>
</span></span><span class="line"><span class="cl">    <span class="n">VISIBILITY_INLINES_HIDDEN</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">SOVERSION</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_VERSION_MAJOR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_NAME</span> <span class="s">&#34;message&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DEBUG_POSTFIX</span> <span class="s">&#34;_d&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">PUBLIC_HEADER</span> <span class="s">&#34;message.hpp;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/message_export.h&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">MACOSX_RPATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>CXX_VISIBILITY_PRESET hidden</strong>: 设置了默认的符号可见性。在这里，它被设置为隐藏，这意味着除非显式指定，否则所有符号都不会被导出。有助于减小最终的二进制文件大小，提高加载速度，并提供一定程度的封装。</li>
<li><strong>VISIBILITY_INLINES_HIDDEN 1</strong>: 当使用隐藏可见性时，这个选项也隐藏了内联函数的符号。这进一步减少了导出符号的数量。</li>
<li><strong>OUTPUT_NAME “message”</strong>: 这指定了目标的输出名称。在这种情况下，不管目标的实际名称是什么（在这里是 <code>message-shared</code>），生成的文件将被命名为 <code>message</code>。</li>
<li><strong>PUBLIC_HEADER message.hpp;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/message_export.h</strong>: 指定了公共头文件。这些文件在安装目标时会被特别对待，通常被复制到包含目录中。</li>
<li><strong>MACOSX_RPATH ON</strong>: 这是一个特定于macOS的选项，启用了相对路径（rpath）的使用。RPath是运行时搜索共享库的一种机制，这对于确保应用程序可以找到其依赖的共享库非常重要。</li>
</ul>
</div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">generate_export_header</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">BASE_NAME</span> <span class="s">&#34;message&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EXPORT_MACRO_NAME</span> <span class="s">&#34;MESSAGE_LIB_API&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EXPORT_FILE_NAME</span> <span class="s">&#34;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/message_export.h&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">STATIC_DEFINE</span> <span class="s">&#34;MESSAGE_STATIC_DEFINE&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">DEFINE_NO_DEPRECATED</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>BASE_NAME “message”</strong>: 这指定了生成的宏的基础名称。生成的宏将基于 “message” 这个名称，例如 <code>MESSAGE_EXPORT</code>。</li>
<li><strong>EXPORT_MACRO_NAME “MESSAGE_LIB_API”</strong>: 这定义了用于导出符号的宏名称。可以使用 <code>MESSAGE_LIB_API</code> 来标记那些需要导出的类、函数或变量。</li>
<li><strong>EXPORT_FILE_NAME “${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/message_export.h”</strong>: 指定了生成的头文件的名称和位置。此头文件将包含必要的预处理器指令，用于根据是正在编译库本身还是正在使用库来改变宏的行为。</li>
<li><strong>STATIC_DEFINE “MESSAGE_STATIC_DEFINE”</strong>: 当库被静态链接时，这个宏将被定义。这对于在静态和共享链接之间透明地切换非常有用。</li>
<li><strong>DEFINE_NO_DEPRECATED</strong>: 这将定义一个宏，用于禁用库中已弃用函数的警告。这对于维护旧代码库非常有用，因为它允许开发者在不触发弃用警告的情况下编译旧代码(当然这个宏可以不使用)。</li>
</ul>
</div>
    </div>
  </div>
<p><strong>src/message.hpp</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iosfwd&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;message_export.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">class</span> <span class="nc">MESSAGE_LIB_API</span> <span class="n">Message</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">Message</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">)</span> <span class="o">:</span> <span class="n">message_</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">,</span> <span class="n">Message</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">obj</span><span class="p">.</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">os</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">message_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GetUUID</span><span class="p">();</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/hello_world.cpp</strong></p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;message.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#ifdef HAVE_UUID
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;uuid/uuid.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">Message</span><span class="o">::</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;This is my very nice message: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">message_</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;...and here is its UUID: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">GetUUID</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">os</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#ifdef HAVE_UUID
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GetUUID</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_t</span> <span class="n">uuid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_generate</span><span class="p">(</span><span class="n">uuid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">uuid_str</span><span class="p">[</span><span class="mi">37</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_unparse_lower</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">uuid_str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_clear</span><span class="p">(</span><span class="n">uuid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">uuid_cxx</span><span class="p">(</span><span class="n">uuid_str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">uuid_cxx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">#else
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GetUUID</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s">&#34;Ooooops, no UUID for you!&#34;</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>test/CMakeLists.txt</strong></p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">test_shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">test_static</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wAR</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="p">&amp;</span> mkdir build
</span></span><span class="line"><span class="cl"><span class="p">&amp;</span> <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl"><span class="p">&amp;</span> cmake ..
</span></span><span class="line"><span class="cl"><span class="p">&amp;</span> cmake --build . --target install
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Scanning dependencies of target message-static
</span></span><span class="line"><span class="cl"><span class="o">[</span> 12%<span class="o">]</span> Building CXX object src/CMakeFiles/message-static.dir/message.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 25%<span class="o">]</span> Linking CXX static library ../lib/libmessage_s.a
</span></span><span class="line"><span class="cl"><span class="o">[</span> 25%<span class="o">]</span> Built target message-static
</span></span><span class="line"><span class="cl">Scanning dependencies of target hello-world_wAR
</span></span><span class="line"><span class="cl"><span class="o">[</span> 37%<span class="o">]</span> Building CXX object src/CMakeFiles/hello-world_wAR.dir/hello_world.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 50%<span class="o">]</span> Linking CXX executable ../bin/hello-world_wAR
</span></span><span class="line"><span class="cl"><span class="o">[</span> 50%<span class="o">]</span> Built target hello-world_wAR
</span></span><span class="line"><span class="cl">Scanning dependencies of target message-shared
</span></span><span class="line"><span class="cl"><span class="o">[</span> 62%<span class="o">]</span> Building CXX object src/CMakeFiles/message-shared.dir/message.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 75%<span class="o">]</span> Linking CXX shared library ../lib/libmessage.so
</span></span><span class="line"><span class="cl"><span class="o">[</span> 75%<span class="o">]</span> Built target message-shared
</span></span><span class="line"><span class="cl">Scanning dependencies of target hello-world_wDSO
</span></span><span class="line"><span class="cl"><span class="o">[</span> 87%<span class="o">]</span> Building CXX object src/CMakeFiles/hello-world_wDSO.dir/hello_world.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span>100%<span class="o">]</span> Linking CXX executable ../bin/hello-world_wDSO
</span></span><span class="line"><span class="cl"><span class="o">[</span>100%<span class="o">]</span> Built target hello-world_wDSO
</span></span><span class="line"><span class="cl">Install the project...
</span></span><span class="line"><span class="cl">-- Install configuration: <span class="s2">&#34;Release&#34;</span>
</span></span><span class="line"><span class="cl">-- Installing: /home/jiangli/repo/tutorials/cmake-tutorial/chapter9/02/output/lib/libmessage.so.1
</span></span><span class="line"><span class="cl">-- Up-to-date: /home/jiangli/repo/tutorials/cmake-tutorial/chapter9/02/output/lib/libmessage.so
</span></span><span class="line"><span class="cl">-- Up-to-date: /home/jiangli/repo/tutorials/cmake-tutorial/chapter9/02/output/include/message/message.hpp
</span></span><span class="line"><span class="cl">-- Installing: /home/jiangli/repo/tutorials/cmake-tutorial/chapter9/02/output/include/message/message_export.h
</span></span><span class="line"><span class="cl">-- Installing: /home/jiangli/repo/tutorials/cmake-tutorial/chapter9/02/output/lib/libmessage_s.a
</span></span><span class="line"><span class="cl">-- Up-to-date: /home/jiangli/repo/tutorials/cmake-tutorial/chapter9/02/output/include/message/message.hpp
</span></span><span class="line"><span class="cl">-- Up-to-date: /home/jiangli/repo/tutorials/cmake-tutorial/chapter9/02/output/include/message/message_export.h
</span></span><span class="line"><span class="cl">-- Installing: /home/jiangli/repo/tutorials/cmake-tutorial/chapter9/02/output/bin/hello-world_wDSO
</span></span><span class="line"><span class="cl">-- Set runtime path of <span class="s2">&#34;/home/jiangli/repo/tutorials/cmake-tutorial/chapter9/02/output/bin/hello-world_wDSO&#34;</span> to <span class="s2">&#34;</span><span class="nv">$ORIGIN</span><span class="s2">/../lib&#34;</span>
</span></span><span class="line"><span class="cl">-- Installing: /home/jiangli/repo/tutorials/cmake-tutorial/chapter9/02/output/bin/hello-world_wAR</span></span></code></pre></td></tr></table>
</div>
</div><p>输出：
<br></p>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">导处头文件</div>
</center>
<br>]]></description></item><item><title>CMake 笔记 | [41] 安装项目</title><link>https://jianye0428.github.io/posts/cmake_note_41/</link><pubDate>Thu, 01 Feb 2024 13:11:05 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_41/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>这篇笔记，将通过一个小项目来介绍一些基本概念，这些概念也将在后面的笔记中使用。安装文件、库和可执行文件是一项非常基础的任务，但是也可能会带来一些问题。通过这篇笔记，展示如何使用CMake有效地避开这些问题。</strong></div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">│   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   ├── hello_world.cpp
</span></span><span class="line"><span class="cl">│   ├── message.cpp
</span></span><span class="line"><span class="cl">│   └── message.hpp
</span></span><span class="line"><span class="cl">└── <span class="nb">test</span>
</span></span><span class="line"><span class="cl">    └── CMakeLists.txt</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter9/01"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter9/01<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p><strong>src/CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp"># Search for pkg-config and UUID
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">find_package</span><span class="p">(</span><span class="n">PkgConfig</span> <span class="n">QUIET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">PKG_CONFIG_FOUND</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">pkg_search_module</span><span class="p">(</span><span class="n">UUID</span> <span class="n">uuid</span> <span class="n">IMPORTED_TARGET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">TARGET</span> <span class="n">PkgConfig</span><span class="o">::</span><span class="n">UUID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Found libuuid&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">UUID_FOUND</span> <span class="n">TRUE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># SHARED library
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_library</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span> <span class="n">SHARED</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">message</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_compile_definitions</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">HAVE_UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">PkgConfig</span><span class="o">::</span><span class="n">UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_target_properties</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">POSITION_INDEPENDENT_CODE</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">SOVERSION</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_VERSION_MAJOR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_NAME</span> <span class="s">&#34;message&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DEBUG_POSTFIX</span> <span class="s">&#34;_d&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">PUBLIC_HEADER</span> <span class="s">&#34;message.hpp&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">MACOSX_RPATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl">    <span class="n">WINDOWS_EXPORT_ALL_SYMBOLS</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span> <span class="n">hello_world</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># Prepare RPATH
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">file</span><span class="p">(</span><span class="n">RELATIVE_PATH</span> <span class="n">_rel</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_PREFIX</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_BINDIR</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_PREFIX</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">APPLE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">_rpath</span> <span class="s">&#34;@loader_path/${_rel}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">_rpath</span> <span class="s">&#34;\$ORIGIN/${_rel}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">file</span><span class="p">(</span><span class="n">TO_NATIVE_PATH</span> <span class="s">&#34;${_rpath}/${INSTALL_LIBDIR}&#34;</span> <span class="n">message_RPATH</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_target_properties</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">MACOSX_RPATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl">    <span class="n">SKIP_BUILD_RPATH</span> <span class="n">OFF</span>
</span></span><span class="line"><span class="cl">    <span class="n">BUILD_WITH_INSTALL_RPATH</span> <span class="n">OFF</span>
</span></span><span class="line"><span class="cl">    <span class="n">INSTALL_RPATH</span> <span class="s">&#34;${message_RPATH}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">INSTALL_RPATH_USE_LINK_PATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># &lt;&lt;&lt; Install and export targets &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">install</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">TARGETS</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">    <span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span>
</span></span><span class="line"><span class="cl">  <span class="n">ARCHIVE</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_LIBDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">lib</span>
</span></span><span class="line"><span class="cl">  <span class="n">RUNTIME</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_BINDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">bin</span>
</span></span><span class="line"><span class="cl">  <span class="n">LIBRARY</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_LIBDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">lib</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC_HEADER</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_INCLUDEDIR</span><span class="p">}</span><span class="o">/</span><span class="n">message</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">dev</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">target_compile_definitions</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">HAVE_UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如果我们找到了三方库<code>UUID</code>的话，该命令会将 <code>HAVE_UUID</code> 编译定义添加到消息共享目标及其依赖库中。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>这段 CMake 脚本使用了 <code>set_target_properties</code> 命令来为 <code>message-shared</code> 这个目标（通常是一个库或可执行文件）设置一系列属性。下面我会用中文解释这些属性的含义：</p>
<div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set_target_properties</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">POSITION_INDEPENDENT_CODE</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">SOVERSION</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_VERSION_MAJOR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_NAME</span> <span class="s">&#34;message&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DEBUG_POSTFIX</span> <span class="s">&#34;_d&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">PUBLIC_HEADER</span> <span class="s">&#34;message.hpp&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">MACOSX_RPATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl">    <span class="n">WINDOWS_EXPORT_ALL_SYMBOLS</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li><strong><code>POSITION_INDEPENDENT_CODE 1</code></strong>: 设置代码为位置无关代码。这对于创建共享库是重要的，因为它允许代码在内存中的任何位置运行，这对于共享库来说是必需的。</li>
<li><strong><code>SOVERSION ${PROJECT_VERSION_MAJOR}</code></strong>: 设置共享对象版本号，这里使用的是项目的主版本号。</li>
<li><strong><code>OUTPUT_NAME &quot;message&quot;</code></strong>: 指定输出的名称。尽管目标名称是 <code>message-shared</code>，在构建时生成的文件将被命名为 <code>message</code>（例如，<code>message.dll</code> 或 <code>message.so</code>）。</li>
<li><strong><code>DEBUG_POSTFIX &quot;_d&quot;</code></strong>: 为调试版本的输出添加后缀。在构建调试版本时，输出文件的名称会有一个额外的 <code>_d</code> 后缀，有助于区分调试和发布版本。</li>
<li><strong><code>PUBLIC_HEADER &quot;message.hpp&quot;</code></strong>: 指定公共头文件。</li>
<li><strong><code>MACOSX_RPATH ON</code></strong>: 在 macOS 系统上启用 RPATH。这是一种动态库查找路径的设置方法，有助于应用程序在运行时找到其依赖的共享库。</li>
<li><strong><code>WINDOWS_EXPORT_ALL_SYMBOLS ON</code></strong>: 在 Windows 上自动导出所有符号。这对于创建 DLL（动态链接库）特别有用，因为它简化了符号导出的过程。</li>
</ol></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-18"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">file</span><span class="p">(</span><span class="n">RELATIVE_PATH</span> <span class="n">_rel</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_PREFIX</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_BINDIR</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_PREFIX</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">APPLE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">_rpath</span> <span class="s">&#34;@loader_path/${_rel}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">_rpath</span> <span class="s">&#34;\$ORIGIN/${_rel}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在这个 CMake 脚本命令中，<code>file(RELATIVE_PATH ...)</code> 用于计算两个路径之间的相对路径。</p>
<p>这个命令的目的是为了找出 <code>${CMAKE_INSTALL_PREFIX}</code> 相对于 <code>${CMAKE_INSTALL_PREFIX}/${INSTALL_BINDIR}</code> 的相对路径。换句话说，它在寻找从安装的二进制目录（<code>INSTALL_BINDIR</code>）到安装的根目录（<code>CMAKE_INSTALL_PREFIX</code>）的路径。在大多数情况下，这将简单地解析为从二进制目录向上到达根目录的相对路径（比如 <code>../</code> 或者更多级的 <code>../../</code>，取决于 <code>INSTALL_BINDIR</code> 的深度）。</p>
<p>这种类型的计算在处理安装和打包时非常有用，尤其是当需要处理可移植性和不同系统结构时。通过这样的相对路径设置，可以确保不管你的软件安装在哪里，文件和资源的相互引用都是正确的。</p>
<p>这段 CMake 脚本代码使用 <code>file(RELATIVE_PATH ...)</code> 命令计算了一个相对路径，并根据操作系统类型（Apple 系统或其他）设置了一个名为 <code>_rpath</code> 的变量，用于指定动态库的运行时搜索路径（RPATH）。下面是详细解释：</p>
<ol>
<li><strong><code>if(APPLE)</code></strong> 和 <strong><code>else()</code></strong>: 这两行代码检查当前是否在 Apple 系统（比如 macOS）上进行构建。如果是，在 Apple 系统上使用一种 RPATH 设置方法；如果不是（比如在 Linux 或 Windows 上），使用另一种方法。</li>
<li><strong><code>set(_rpath &quot;@loader_path/${_rel}&quot;)</code></strong>: 在 Apple 系统上，<code>_rpath</code> 被设置为 <code>&quot;@loader_path/${_rel}&quot;</code>。这里的 <code>@loader_path</code> 是一个特殊的标记，它表示加载动态库的可执行文件的位置。这种方法允许动态库在与可执行文件相对的路径中被找到。</li>
<li><strong><code>set(_rpath &quot;\$ORIGIN/${_rel}&quot;)</code></strong>: 在非 Apple 系统上，<code>_rpath</code> 被设置为 <code>&quot;\$ORIGIN/${_rel}&quot;</code>。这里的 <code>$ORIGIN</code> 是一个特殊的标记，它也表示加载动态库的可执行文件的位置。与 Apple 系统的方法类似，它使得动态库可以在相对于可执行文件的路径中被找到。</li>
</ol>
</div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-19"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set_target_properties</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">MACOSX_RPATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl">    <span class="n">SKIP_BUILD_RPATH</span> <span class="n">OFF</span>
</span></span><span class="line"><span class="cl">    <span class="n">BUILD_WITH_INSTALL_RPATH</span> <span class="n">OFF</span>
</span></span><span class="line"><span class="cl">    <span class="n">INSTALL_RPATH</span> <span class="s">&#34;${message_RPATH}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">INSTALL_RPATH_USE_LINK_PATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用 <code>set_target_properties</code> 命令来为名为 <code>hello-world_wDSO</code> 的目标设置一系列属性。</p>
<ol>
<li><strong><code>MACOSX_RPATH ON</code></strong>: 这个选项用于在 macOS 系统上启用 RPATH。这意味着在 macOS 上构建时，CMake 会自动设置运行时路径，这有助于程序在运行时找到其动态库依赖。</li>
<li><strong><code>SKIP_BUILD_RPATH OFF</code></strong>: 当此选项为 OFF 时，CMake 会在构建阶段使用 RPATH。这样做确保在构建时（例如，当运行测试时），可以找到动态库。</li>
<li><strong><code>BUILD_WITH_INSTALL_RPATH OFF</code></strong>: 这个选项表示构建时不使用安装后的 RPATH。这意味着构建时和安装后使用的 RPATH 是不同的。通常，构建时的 RPATH 指向构建目录中的库，而安装后的 RPATH 指向安装目录中的库。</li>
<li><strong><code>INSTALL_RPATH &quot;${message_RPATH}&quot;</code></strong>: 这个选项设置了安装后的 RPATH。<code>${message_RPATH}</code> 是一个变量，它应该在其他地方被定义，并包含了运行时库（比如动态链接库）的路径。这意味着一旦 <code>hello-world_wDSO</code> 被安装，它会使用这个变量指定的路径来查找其运行时依赖。</li>
<li><strong><code>INSTALL_RPATH_USE_LINK_PATH ON</code></strong>: 当此选项为 ON 时，CMake 会在设置安装后的 RPATH 时考虑目标的链接路径。这意味着安装后的 RPATH 不仅会包括 <code>INSTALL_RPATH</code> 指定的路径，还会包括目标链接时使用的所有路径。这有助于确保运行时能找到所有必需的动态库，尤其是当这些库位于非标准或非默认的位置时。</li>
</ol>
<p>这些属性共同确保了 <code>hello-world_wDSO</code> 在构建、安装和运行时能正确地找到其动态链接库依赖。这是在跨平台开发和部署应用程序时非常重要的一部分，尤其是在涉及到动态链接库的情况下。</p>
</div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-20"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">install</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">TARGETS</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">    <span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span>
</span></span><span class="line"><span class="cl">  <span class="n">ARCHIVE</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_LIBDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">lib</span>
</span></span><span class="line"><span class="cl">  <span class="n">RUNTIME</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_BINDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">bin</span>
</span></span><span class="line"><span class="cl">  <span class="n">LIBRARY</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_LIBDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">lib</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC_HEADER</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_INCLUDEDIR</span><span class="p">}</span><span class="o">/</span><span class="n">message</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">dev</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用 <code>install()</code> 命令来定义如何安装 <code>message-shared</code> 和 <code>hello-world_wDSO</code> 这两个目标。</p>
<ol>
<li><strong><code>TARGETS message-shared hello-world_wDSO</code></strong>: 这指定了要安装的目标。这里有两个目标：<code>message-shared</code> 和 <code>hello-world_wDSO</code>。</li>
<li><strong><code>ARCHIVE DESTINATION ${INSTALL_LIBDIR} COMPONENT lib</code></strong>: 这部分指定静态库（<code>.a</code> 或 <code>.lib</code> 文件）的安装位置。它们将被安装到由 <code>${INSTALL_LIBDIR}</code> 变量定义的目录中，并标记为 <code>lib</code> 组件的一部分。通常，<code>${INSTALL_LIBDIR}</code> 会指向类似 <code>lib</code> 或 <code>lib64</code> 的目录。</li>
<li><strong><code>RUNTIME DESTINATION ${INSTALL_BINDIR} COMPONENT bin</code></strong>: 这定义了可执行文件（<code>hello-world_wDSO</code>）的安装位置。它们将被安装到由 <code>${INSTALL_BINDIR}</code> 变量指定的目录，通常是类似于 <code>bin</code> 的目录。这些文件被标记为 <code>bin</code> 组件的一部分。</li>
<li><strong><code>LIBRARY DESTINATION ${INSTALL_LIBDIR} COMPONENT lib</code></strong>: 这指定动态库（<code>.so</code>、<code>.dll</code> 或 <code>.dylib</code> 文件）的安装位置。就像静态库一样，它们将被安装到 <code>${INSTALL_LIBDIR}</code> 目录，并标记为 <code>lib</code> 组件的一部分。</li>
<li><strong><code>PUBLIC_HEADER DESTINATION ${INSTALL_INCLUDEDIR}/message COMPONENT dev</code></strong>: 这指定了公共头文件（如 <code>message.hpp</code>）的安装位置。这些文件将被安装到 <code>${INSTALL_INCLUDEDIR}/message</code> 目录，通常是类似于 <code>include/message</code> 的目录，作为 <code>dev</code> 组件的一部分。这使得其他开发者可以在他们自己的项目中轻松地找到并使用这些头文件。</li>
</ol></div>
    </div>
  </div>
<p><strong>src/message.h</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Message</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">Message</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">)</span> <span class="o">:</span> <span class="n">message_</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">,</span> <span class="n">Message</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">obj</span><span class="p">.</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">os</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">message_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GetUUID</span><span class="p">();</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/message.cpp</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;message.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#ifdef HAVE_UUID
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;uuid/uuid.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">Message</span><span class="o">::</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;This is my very nice message: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">message_</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;...and here is its UUID: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">GetUUID</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">os</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#ifdef HAVE_UUID
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GetUUID</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_t</span> <span class="n">uuid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_generate</span><span class="p">(</span><span class="n">uuid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">uuid_str</span><span class="p">[</span><span class="mi">37</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_unparse_lower</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">uuid_str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_clear</span><span class="p">(</span><span class="n">uuid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">uuid_cxx</span><span class="p">(</span><span class="n">uuid_str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">uuid_cxx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">#else
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GetUUID</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s">&#34;Ooooops, no UUID for you!&#34;</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/hello_world.cpp</strong></p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;message.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Message</span> <span class="n">say_hello</span><span class="p">(</span><span class="s">&#34;Hello, CMake World!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">say_hello</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">Message</span> <span class="n">say_goodbye</span><span class="p">(</span><span class="s">&#34;Goodbye, CMake World&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">say_goodbye</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">retu</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>test/CMakeLists.txt</strong></p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">test_shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.6</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">example</span>
</span></span><span class="line"><span class="cl">  <span class="n">LANGUAGES</span> <span class="n">CXX</span>
</span></span><span class="line"><span class="cl">  <span class="n">VERSION</span> <span class="mf">1.0.0</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># &lt;&lt;&lt; General set up &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_INSTALL_PREFIX</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">output</span><span class="o">/</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Project will be installed to ${CMAKE_INSTALL_PREFIX}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">CMAKE_BUILD_TYPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">CMAKE_BUILD_TYPE</span> <span class="n">Release</span> <span class="n">CACHE</span> <span class="n">STRING</span> <span class="s">&#34;Build type&#34;</span> <span class="n">FORCE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Build type set to ${CMAKE_BUILD_TYPE}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">GNUInstallDirs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_LIBRARY_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_RUNTIME_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># Offer the user the choice of overriding the installation directories
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_LIBDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for libraries&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_BINDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for executables&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_INCLUDEDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_INCLUDEDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for header files&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">WIN32</span> <span class="n">AND</span> <span class="n">NOT</span> <span class="n">CYGWIN</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">DEF_INSTALL_CMAKEDIR</span> <span class="n">CMake</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">DEF_INSTALL_CMAKEDIR</span> <span class="n">share</span><span class="o">/</span><span class="n">cmake</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_CMAKEDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">DEF_INSTALL_CMAKEDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for CMake files&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># Report to user
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">foreach</span><span class="p">(</span><span class="n">p</span> <span class="n">LIB</span> <span class="n">BIN</span> <span class="n">INCLUDE</span> <span class="n">CMAKE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">file</span><span class="p">(</span><span class="n">TO_NATIVE_PATH</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_PREFIX</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_</span><span class="err">$</span><span class="p">{</span><span class="n">p</span><span class="p">}</span><span class="n">DIR</span><span class="p">}</span> <span class="n">_path</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Installing ${p} components to ${_path}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">unset</span><span class="p">(</span><span class="n">_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endforeach</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">enable_testing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">test</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-21"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_LIBDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for libraries&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_BINDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for executables&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_INCLUDEDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_INCLUDEDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for header files&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">WIN32</span> <span class="n">AND</span> <span class="n">NOT</span> <span class="n">CYGWIN</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">DEF_INSTALL_CMAKEDIR</span> <span class="n">CMake</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">DEF_INSTALL_CMAKEDIR</span> <span class="n">share</span><span class="o">/</span><span class="n">cmake</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_CMAKEDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">DEF_INSTALL_CMAKEDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for CMake files&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li><strong><code>set(INSTALL_LIBDIR ${CMAKE_INSTALL_LIBDIR} CACHE PATH &quot;Installation directory for libraries&quot;)</code></strong>: 这行设置了一个名为 <code>INSTALL_LIBDIR</code> 的变量，它定义了库文件（静态库和动态库）的安装目录。这个目录默认为 <code>CMAKE_INSTALL_LIBDIR</code> 的值，通常指向系统默认的库安装路径（如 <code>lib</code> 或 <code>lib64</code>）。</li>
<li><strong><code>set(INSTALL_BINDIR ${CMAKE_INSTALL_BINDIR} CACHE PATH &quot;Installation directory for executables&quot;)</code></strong>: 这行设置了一个名为 <code>INSTALL_BINDIR</code> 的变量，用于定义可执行文件的安装目录。这个目录默认为 <code>CMAKE_INSTALL_BINDIR</code> 的值，通常是系统默认的可执行文件安装路径（如 <code>bin</code>）。</li>
<li><strong><code>set(INSTALL_INCLUDEDIR ${CMAKE_INSTALL_INCLUDEDIR} CACHE PATH &quot;Installation directory for header files&quot;)</code></strong>: 这行设置了一个名为 <code>INSTALL_INCLUDEDIR</code> 的变量，它定义了头文件的安装目录。这个目录默认为 <code>CMAKE_INSTALL_INCLUDEDIR</code> 的值，通常指向系统默认的头文件安装路径（如 <code>include</code>）。</li>
<li><strong><code>if(WIN32 AND NOT CYGWIN)</code></strong> 和 <strong><code>else()</code></strong>: 这两行代码是一个条件语句，用于区分 Windows 系统和其他系统（如 Linux 或 macOS）。
<ul>
<li>在 Windows 系统上，如果不是在 Cygwin 环境下，<code>DEF_INSTALL_CMAKEDIR</code> 被设置为 <code>CMake</code>。这意味着 CMake 配置文件将安装到一个名为 <code>CMake</code> 的目录中。</li>
<li>在其他系统上，<code>DEF_INSTALL_CMAKEDIR</code> 被设置为 <code>share/cmake/${PROJECT_NAME}</code>。这里 <code>${PROJECT_NAME}</code> 是项目名称的变量，这个路径通常用于存放项目相关的 CMake 配置文件。</li>
</ul>
</li>
<li><strong><code>set(INSTALL_CMAKEDIR ${DEF_INSTALL_CMAKEDIR} CACHE PATH &quot;Installation directory for CMake files&quot;)</code></strong>: 这行设置了一个名为 <code>INSTALL_CMAKEDIR</code> 的变量，它定义了 CMake 配置文件的安装目录，值为前面根据平台条件设置的 <code>DEF_INSTALL_CMAKEDIR</code>。</li>
</ol>
<p>这些设置的目的是确保在不同的操作系统和环境中，项目的库文件、可执行文件、头文件和 CMake 文件都能被安装到合适的位置。通过使用这些变量，CMake 脚本可以灵活地适应不同系统的目录结构和用户的自定义安装路径。这种做法提高了项目的可移植性和灵活性，使得在不同环境下的构建和安装过程更加一致和可预测。此外，使用缓存变量（<code>CACHE PATH</code>）允许用户在配置（CMake 的 configure 阶段）时覆盖这些路径，进一步增加了灵活性。</p></div>
    </div>
  </div>
<h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir build <span class="p">&amp;</span> <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake ..
</span></span><span class="line"><span class="cl">cmake --build . --target install</span></span></code></pre></td></tr></table>
</div>
</div><p>GNU/Linux构建目录的内容如下:</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">├── build
</span></span><span class="line"><span class="cl">    ├── bin
</span></span><span class="line"><span class="cl">    │   └── hello-world_wDSO
</span></span><span class="line"><span class="cl">    ├── CMakeCache.txt
</span></span><span class="line"><span class="cl">    ├── cmake_install.cmake
</span></span><span class="line"><span class="cl">    ├── CTestTestfile.cmake
</span></span><span class="line"><span class="cl">    ├── install_manifest.txt
</span></span><span class="line"><span class="cl">    ├── lib
</span></span><span class="line"><span class="cl">    │   ├── libmessage.so -&gt; libmessage.so.1
</span></span><span class="line"><span class="cl">    │   └── libmessage.so.1
</span></span><span class="line"><span class="cl">    ├── Makefile
</span></span><span class="line"><span class="cl">    ├── src
</span></span><span class="line"><span class="cl">    ├── <span class="nb">test</span>
</span></span><span class="line"><span class="cl">    └── Testing</span></span></code></pre></td></tr></table>
</div>
</div><p>在安装位置，可以找到如下的目录结构:</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── bin
</span></span><span class="line"><span class="cl">│   └── hello-world_wDSO
</span></span><span class="line"><span class="cl">├── include
</span></span><span class="line"><span class="cl">│   └── message
</span></span><span class="line"><span class="cl">│       └── message.hpp
</span></span><span class="line"><span class="cl">└── lib
</span></span><span class="line"><span class="cl">    ├── libmessage.so -&gt; libmessage.so.1
</span></span><span class="line"><span class="cl">    └── libmessage.so.1</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="五补充内容">五、补充内容</h2>
<p><strong>安装到标准位置</strong></p>
<p>对于项目的安装来说，什么是好的布局呢？如果只有自己使用该项目，那就无所谓好或坏的布局。然而，一旦向外部发布产品，和他人共用该项目，就应该在安装项目时提供一个合理的布局。</p>
<p>我们可以遵循一些标准，CMake可以帮助我们做到这一点。实际上，<code>GNUInstallDirs.cmake</code>模块所做的就是定义这样一组变量，这些变量是安装不同类型文件的子目录的名称。</p>
<ul>
<li><strong><code>CMAKE_INSTALL_BINDIR</code></strong>：用于定义用户可执行文件所在的子目录，即所选安装目录下的bin目录。</li>
<li><strong><code>CMAKE_INSTALL_LIBDIR</code></strong>：将扩展到目标代码库(即静态库和动态库)所在的子目录。在64位系统上，它是<code>lib64</code>，而在32位系统上，它只是<code>lib</code>。</li>
<li><strong><code>CMAKE_INSTALL_INCLUDEDIR</code></strong>：使用这个变量为头文件获取正确的子目录，该变量为<code>include</code>。</li>
</ul>
<p>用户可能希望覆盖这些选项。允许在主CMakeLists.txt文件中使用以下方式覆盖选项:</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp"># Offer the user the choice
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">of</span> <span class="n">overriding</span> <span class="n">the</span> <span class="n">installation</span> <span class="n">directories</span>
</span></span><span class="line"><span class="cl"><span class="nf">set</span><span class="p">(</span><span class="n">INSTALL_LIBDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span>
</span></span><span class="line"><span class="cl"><span class="s">&#34;Installation directory for libraries&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_BINDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span>
</span></span><span class="line"><span class="cl"><span class="s">&#34;Installation directory for executables&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_INCLUDEDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_INCLUDEDIR</span><span class="p">}</span> <span class="n">CACHE</span>
</span></span><span class="line"><span class="cl"><span class="n">PATH</span> <span class="s">&#34;Installation directory for header files&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>重新定义了在项目中使用的<code>INSTALL_BINDIR</code>、<code>INSTALL_LIBDIR</code>和<code>INSTALL_INCLUDEDIR</code>变量。</p>
<p>当只要求安装库：</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="err">$</span> <span class="n">cmake</span> <span class="o">-</span><span class="n">D</span> <span class="n">COMPONENT</span><span class="o">=</span><span class="n">lib</span> <span class="o">-</span><span class="n">P</span> <span class="n">cmake_install</span><span class="p">.</span><span class="n">cmake</span></span></span></code></pre></td></tr></table>
</div>
</div><p>正确设置<code>RPATH</code>可能相当麻烦，但这对于用户来说无法避免。默认情况下，<code>CMake</code>设置可执行程序的<code>RPATH</code>，假设它们将从构建树运行。但是，安装之后<code>RPATH</code>被清除，当用户想要运行<code>hello-world_wDSO</code>时，就会出现问题。使用Linux上的<code>ldd</code>工具，我们可以检查构建树中的<code>hello-world_wDSO</code>可执行文件，运行<code>ldd hello-world_wDSO</code>将得到以下结果:</p>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">libmessage</span><span class="p">.</span><span class="n">so</span><span class="mf">.1</span> <span class="o">=&gt;</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">jiangli</span><span class="o">/</span><span class="n">repo</span><span class="o">/</span><span class="n">tutorials</span><span class="o">/</span><span class="n">cmake</span><span class="o">-</span><span class="n">tutorial</span><span class="o">/</span><span class="n">chapter9</span><span class="o">/</span><span class="mo">01</span><span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libmessage</span><span class="p">.</span><span class="n">so</span><span class="mf">.1</span> <span class="p">(</span><span class="mh">0x00007f43a4df7000</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在安装目录中运行ldd hello-world_wDSO将得到以下结果:</p>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">libmessage</span><span class="p">.</span><span class="n">so</span><span class="mf">.1</span> <span class="o">=&gt;</span> <span class="n">Not</span> <span class="n">found</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这显然是不行的。但是，总是硬编码<code>RPATH</code>来指向构建树或安装目录也是错误的：这两个位置中的任何一个都可能被删除，从而导致可执行文件的损坏。给出的解决方案为构建树和安装目录中的可执行文件设置了不同的<code>RPATH</code>，因此它总是指向“有意义”的位置；也就是说，尽可能接近可执行文件。在构建树中运行<code>ldd</code>显示相同的输出:</p>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">libmessage</span><span class="p">.</span><span class="n">so</span><span class="mf">.1</span> <span class="o">=&gt;</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">jiangli</span><span class="o">/</span><span class="n">repo</span><span class="o">/</span><span class="n">tutorials</span><span class="o">/</span><span class="n">cmake</span><span class="o">-</span><span class="n">tutorial</span><span class="o">/</span><span class="n">chapter9</span><span class="o">/</span><span class="mo">01</span><span class="o">/</span><span class="n">output</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="p">.</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libmessage</span><span class="p">.</span><span class="n">so</span><span class="mf">.1</span> <span class="p">(</span><span class="mh">0x00007f0ebfc4a000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">libmessage</span><span class="p">.</span><span class="n">so</span><span class="mf">.1</span> <span class="o">=&gt;</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">jiangli</span><span class="o">/</span><span class="n">repo</span><span class="o">/</span><span class="n">tutorials</span><span class="o">/</span><span class="n">cmake</span><span class="o">-</span><span class="n">tutorial</span><span class="o">/</span><span class="n">chapter9</span><span class="o">/</span><span class="mo">01</span><span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libmessage</span><span class="p">.</span><span class="n">so</span><span class="mf">.1</span> <span class="p">(</span><span class="mh">0x00007f43a4df7000</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用了带有目标参数的<code>CMake</code>安装命令，该命令还有另外4个参数:</p>
<ul>
<li><code>FILES</code>和<code>PROGRAMS</code>，分别用于安装文件或程序。安装后，并设置安装文件适当的权限。对于文件，对所有者具有读和写权限，对组以及其他用户和组具有读权限。对于程序，将授予执行权限。注意，<code>PROGRAMS</code>要与非构建目标的可执行程序一起使用。</li>
<li><code>DIRECTORY</code>，用于安装目录。当只给出一个目录名时，它通常被理解为相对于当前源目录。可以对目录的安装粒度进行控制。</li>
<li><code>SCRIPT</code>，可以使用它在CMake脚本中定义自定义安装规则。</li>
<li><code>EXPORT</code>，该参数用于导出目标。</li>
</ul>
]]></description></item><item><title>CMake 笔记 | [40] 超级构建模式</title><link>https://jianye0428.github.io/posts/cmake_note_40/</link><pubDate>Wed, 31 Jan 2024 13:51:49 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_40/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><strong>每个项目都需要处理依赖关系，使用</strong>**<code>CMake</code>很容易查询这些依赖关系，是否存在于配置项目中。前面的笔记中，展示了如何找到安装在系统上的依赖项，到目前为止我们一直使用这种模式。但是，当不满足依赖关系，我们只能使配置失败，并向用户警告失败的原因。然而，使用<code>CMake</code>可以组织我们的项目，如果在系统上找不到依赖项，就可以自动获取和构建依赖项。后续的几篇笔记将介绍和分析<code>ExternalProject.cmake</code>和<code>FetchContent.cmake</code>标准模块，及在<code>超级构建模式</code>中的使用。前者允许在构建时检索项目的依赖项，后者允许我们在配置时检索依赖项(<code>CMake</code>的<code>3.11</code>版本后添加)。使用超级构建模式，我们可以利用<code>CMake</code>作为包管理器：相同的项目中，将以相同的方式处理依赖项，无论依赖项在系统上是已经可用，还是需要重新构建。**</p>
<p><strong>首先通过一个简单示例，介绍超级构建模式。我们将展示如何使用</strong>**<code>ExternalProject_Add</code>命令来构建一个的<code>hello_world</code>程序。**</p>
</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">└── src
</span></span><span class="line"><span class="cl">      ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">      └── hello-world.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目结构：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter8/01"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter8/01<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p><strong>src/CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example_core</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world</span> <span class="n">hello_world</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/hello_world.cpp</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">say_hello</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&#34;Hello, CMake superbuild world!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">say_hello</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_property</span><span class="p">(</span><span class="n">DIRECTORY</span> <span class="n">PROPERTY</span> <span class="n">EP_BASE</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">subprojects</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">ExternalProject</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ExternalProject_Add</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span><span class="n">_core</span>
</span></span><span class="line"><span class="cl">  <span class="n">SOURCE_DIR</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">src</span>
</span></span><span class="line"><span class="cl">  <span class="n">CMAKE_ARGS</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="n">DCMAKE_CXX_COMPILER</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CXX_COMPILER</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="n">DCMAKE_CXX_STANDARD</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CXX_STANDARD</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="n">DCMAKE_CXX_EXTENSIONS</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CXX_EXTENSIONS</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="n">DCMAKE_CXX_STANDARD_REQUIRED</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">CMAKE_CACHE_ARGS</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="nl">DCMAKE_CXX_FLAGS</span><span class="p">:</span><span class="n">STRING</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CXX_FLAGS</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">BUILD_ALWAYS</span>
</span></span><span class="line"><span class="cl">    <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="n">INSTALL_COMMAND</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set_property</span><span class="p">(</span><span class="n">DIRECTORY</span> <span class="n">PROPERTY</span> <span class="n">EP_BASE</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">subprojects</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>为当前目录和底层目录设置<code>EP_BASE</code>目录属性。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">ExternalProject</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>包括<code>ExternalProject.cmake</code>标准模块。该模块提供了<code>ExternalProject_Add</code>函数。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">ExternalProject_Add</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span><span class="n">_core</span>
</span></span><span class="line"><span class="cl">  <span class="n">SOURCE_DIR</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">src</span>
</span></span><span class="line"><span class="cl">  <span class="n">CMAKE_ARGS</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="n">DCMAKE_CXX_COMPILER</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CXX_COMPILER</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="n">DCMAKE_CXX_STANDARD</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CXX_STANDARD</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="n">DCMAKE_CXX_EXTENSIONS</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CXX_EXTENSIONS</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="n">DCMAKE_CXX_STANDARD_REQUIRED</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">CMAKE_CACHE_ARGS</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="nl">DCMAKE_CXX_FLAGS</span><span class="p">:</span><span class="n">STRING</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CXX_FLAGS</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">BUILD_ALWAYS</span>
</span></span><span class="line"><span class="cl">    <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="n">INSTALL_COMMAND</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>Hello, World</code>源代码通过调用<code>ExternalProject_Add</code>函数作为外部项目添加的。外部项目的名称为<code>example_core</code>。</p>
<p><code>ExternalProject_Add</code>命令可用于添加第三方源。本篇通过将自己的项目，分为不同<code>CMake</code>项目的集合管理。本例中，主<code>CMakeLists.txt</code>和子<code>CMakeLists.txt</code>都声明了一个<code>CMake</code>项目，它们都使用了<code>project</code>命令。</p>
<p><code>ExternalProject_Add</code>有许多选项，可用于外部项目的配置和编译等所有方面。这些选择可以分为以下几类:</p>
<ul>
<li>
<p>Directory:用于调优源码的结构，并为外部项目构建目录。本篇，我们使用<code>SOURCE_DIR</code>选项让<code>CMake</code>知道源文件在<code>${CMAKE_CURRENT_LIST_DIR}/src</code>文件夹中。用于构建项目和存储临时文件的目录，也可以在此类选项或目录属性中指定。通过设置<code>EP_BASE</code>目录属性，<code>CMake</code>将按照以下布局为各个子项目设置所有目录:</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">TMP_DIR</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">EP_BASE</span><span class="o">&gt;/</span><span class="n">tmp</span><span class="o">/&lt;</span><span class="n">name</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">STAMP_DIR</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">EP_BASE</span><span class="o">&gt;/</span><span class="n">Stamp</span><span class="o">/&lt;</span><span class="n">name</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">DOWNLOAD_DIR</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">EP_BASE</span><span class="o">&gt;/</span><span class="n">Download</span><span class="o">/&lt;</span><span class="n">name</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">SOURCE_DIR</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">EP_BASE</span><span class="o">&gt;/</span><span class="n">Source</span><span class="o">/&lt;</span><span class="n">name</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">BINARY_DIR</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">EP_BASE</span><span class="o">&gt;/</span><span class="n">Build</span><span class="o">/&lt;</span><span class="n">name</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">INSTALL_DIR</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">EP_BASE</span><span class="o">&gt;/</span><span class="n">Install</span><span class="o">/&lt;</span><span class="n">name</span><span class="o">&gt;</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Download：外部项目的代码可能需要从在线存储库或资源处下载。</p>
</li>
<li>
<p>Update和Patch：可用于定义如何更新外部项目的源代码或如何应用补丁。</p>
</li>
<li>
<p>Configure：默认情况下，<code>CMake</code>会假定外部项目是使用<code>CMake</code>配置的。如下所示，我们并不局限于这种情况。如果外部项目是<code>CMake</code>项目，<code>ExternalProject_Add</code>将调用<code>CMake</code>可执行文件，并传递选项。对于本篇示例，我们通过<code>CMAKE_ARGS</code>和<code>CMAKE_CACHE_ARGS</code>选项传递配置参数。前者作为命令行参数直接传递，而后者通过<code>CMake</code>脚本文件传递。实际，脚本文件位于<code>build/subprojects/tmp/example_core/example_core- cache-.cmake</code>。然后，配置如以下所示:</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">loading initial cache file /home/jiangli/repo/tutorials/cmake-tutorial/chapter8/01/build/subprojects/tmp/example_core/example_core-cache-.cmake
</span></span><span class="line"><span class="cl">-- The CXX compiler identification is GNU 9.4.0
</span></span><span class="line"><span class="cl">-- Check <span class="k">for</span> working CXX compiler: /usr/bin/c++
</span></span><span class="line"><span class="cl">-- Check <span class="k">for</span> working CXX compiler: /usr/bin/c++ -- works
</span></span><span class="line"><span class="cl">-- Detecting CXX compiler ABI info
</span></span><span class="line"><span class="cl">-- Detecting CXX compiler ABI info - <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Detecting CXX compile features
</span></span><span class="line"><span class="cl">-- Detecting CXX compile features - <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Configuring <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Generating <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Build files have been written to: /home/jiangli/repo/tutorials/cmake-tutorial/chapter8/01/build/subprojects/Build/example_core</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Build：可用于调整外部项目的实际编译。我们使用<code>BUILD_ALWAYS</code>选项确保外部项目总会重新构建。</p>
</li>
<li>
<p>Install：这些选项用于配置应该如何安装外部项目。我们将<code>INSTALL_COMMAND</code>保留为空。</p>
</li>
<li>
<p>Test：为基于源代码构建的软件运行测试。<code>ExternalProject_Add</code>的这类选项可以用于此目的。我们的没有使用这些选项，因为<code>Hello, World</code>示例没有任何测试。</p>
</li>
</ul>
</div>
    </div>
  </div>
<h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p build
</span></span><span class="line"><span class="cl">$ cmake ..
</span></span><span class="line"><span class="cl">$ cmake --build .</span></span></code></pre></td></tr></table>
</div>
</div><p>构建目录的结构稍微复杂一些，<code>subprojects</code>文件夹的内容如下:</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">build/subprojects/
</span></span><span class="line"><span class="cl">├── Build
</span></span><span class="line"><span class="cl">│    └── example_core
</span></span><span class="line"><span class="cl">│        ├── CMakeCache.txt
</span></span><span class="line"><span class="cl">│        ├── CMakeFiles
</span></span><span class="line"><span class="cl">│        ├── cmake_install.cmake
</span></span><span class="line"><span class="cl">│        ├── hello-world
</span></span><span class="line"><span class="cl">│        └── Makefile
</span></span><span class="line"><span class="cl">├── Download
</span></span><span class="line"><span class="cl">│    └── example_core
</span></span><span class="line"><span class="cl">├── Install
</span></span><span class="line"><span class="cl">│    └── example_core
</span></span><span class="line"><span class="cl">├── Stamp
</span></span><span class="line"><span class="cl">│    └── exampleq_core
</span></span><span class="line"><span class="cl">│        ├── example_core-configure
</span></span><span class="line"><span class="cl">│        ├── example_core-done
</span></span><span class="line"><span class="cl">│        ├── example_core-download
</span></span><span class="line"><span class="cl">│        ├── example_core-install
</span></span><span class="line"><span class="cl">│        ├── example_core-mkdir
</span></span><span class="line"><span class="cl">│        ├── example_core-patch
</span></span><span class="line"><span class="cl">│        └── example_core-update
</span></span><span class="line"><span class="cl">└── tmp
</span></span><span class="line"><span class="cl">    └── example_core
</span></span><span class="line"><span class="cl">        ├── example_core-cache-.cmake
</span></span><span class="line"><span class="cl">        ├── example_core-cfgcmd.txt
</span></span><span class="line"><span class="cl">        └── example_core-cfgcmd.txt.in</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>补充内容</strong></p>
<p><code>ExternalProject.cmake</code>定义了<code>ExternalProject_Get_Property</code>命令，该命令对于检索外部项目的属性非常有用。外部项目的属性是在首次调用<code>ExternalProject_Add</code>命令时设置的。例如，在配置<code>example_core</code>时，检索要传递给<code>CMake</code>的参数可以通过以下方法实现:</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">ExternalProject_Get_Property</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span><span class="n">_core</span> <span class="n">CMAKE_ARGS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;CMAKE_ARGS of ${PROJECT_NAME}_core ${CMAKE_ARGS}&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>ExternalProject.cmake</code>模块定义了以下附加命令:</p>
<ul>
<li><code>ExternalProject_Add_Step</code>: 当添加了外部项目，此命令允许将附加的命令作为自定义步骤锁定在其上。</li>
<li><code>ExternalProject_Add_StepTargets</code>:允许将外部项目中的步骤(例如：构建和测试步骤)定义为单独的目标。这意味着可以从完整的外部项目中单独触发这些步骤，并允许对项目中的复杂依赖项，进行细粒度控制。</li>
<li><code>ExternalProject_Add_StepDependencies</code>:外部项目的步骤有时可能依赖于外部目标，而这个命令的设计目的就是处理这些情况。</li>
</ul>
]]></description></item><item><title>CMake 笔记 | [39] 构建项目策略及限制变量范围2</title><link>https://jianye0428.github.io/posts/cmake_note_39/</link><pubDate>Wed, 31 Jan 2024 13:51:46 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_39/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><strong>本篇，我们将讨论上一篇的另一种方法，并不使用<code>add_subdirectory</code>的情况下，使用<code>module include</code>组装不同的<code>CMakeLists.txt</code>文件。其允许我们使用<code>target_link_libraries</code>链接到当前目录之外定义的目标。</strong></p>
<p><strong>就项目架构而言，不推荐本篇的构建方式。</strong></p>
</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── external
</span></span><span class="line"><span class="cl">│   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   ├── conversion.cpp
</span></span><span class="line"><span class="cl">│   └── conversion.hpp
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">│   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   ├── evolution
</span></span><span class="line"><span class="cl">│   │   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   │   ├── evolution.cpp
</span></span><span class="line"><span class="cl">│   │   └── evolution.hpp
</span></span><span class="line"><span class="cl">│   ├── initial
</span></span><span class="line"><span class="cl">│   │   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   │   ├── initial.cpp
</span></span><span class="line"><span class="cl">│   │   └── initial.hpp
</span></span><span class="line"><span class="cl">│   ├── io
</span></span><span class="line"><span class="cl">│   │   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   │   ├── io.cpp
</span></span><span class="line"><span class="cl">│   │   └── io.hpp
</span></span><span class="line"><span class="cl">│   ├── main.cpp
</span></span><span class="line"><span class="cl">│   └── parser
</span></span><span class="line"><span class="cl">│       ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│       ├── parser.cpp
</span></span><span class="line"><span class="cl">│       └── parser.hpp
</span></span><span class="line"><span class="cl">└── tests
</span></span><span class="line"><span class="cl">    ├── catch.hpp
</span></span><span class="line"><span class="cl">    ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">    └── test.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/08"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/08<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p>将使用与上一篇相同的源代码。唯一的更改将出现在<code>CMakeLists.txt</code>文件中，我们将在下面的部分中讨论这些更改。
<strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">GNUInstallDirs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_LIBRARY_OUTPUT_DIRECTORY</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_RUNTIME_OUTPUT_DIRECTORY</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="cp"># defines targets and sources
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">include</span><span class="p">(</span><span class="n">src</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">external</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">enable_testing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">tests</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/CMakeLists.txt</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_library</span><span class="p">(</span><span class="n">automaton</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_library</span><span class="p">(</span><span class="n">evolution</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">evolution</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">initial</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">parser</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">automata</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">automata</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">automata</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="n">automaton</span>
</span></span><span class="line"><span class="cl">    <span class="n">conversion</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/evolution/CMakeLists.txt</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">automaton</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">evolution</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">evolution</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">automaton</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">evolution</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">evolution</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">evolution</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">evolution</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>其余<code>CMakeLists.txt</code>文件和<code>src/initial/CMakeLists.txt</code>相同。</p>
<p><strong>src/initial/CMakeLists.txt</strong></p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">automaton</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">initial</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">initial</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">automaton</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>定义了三个库:</p>
<ul>
<li><code>conversion</code>(在<code>external</code>定义)</li>
<li><code>automaton</code>(包含除转换之外的所有源)</li>
<li><code>evolution</code>(在<code>src/evolution</code>中定义，并通过<code>cpp_test</code>链接)</li>
</ul>
<p>我们通过使用<code>include()</code>引用<code>CMakeLists.txt</code>文件，在父范围内，仍然能保持所有目标可用。</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">src</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">external</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>构建一个包含树，记住当进入子目录(<code>src/CMakeLists.txt</code>)时，我们需要使用相对于父范围的路径:</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">evolution</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">initial</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">parser</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这样，我们就可以定义并链接到通过<code>include()</code>语句访问文件树中任何位置的目标。</p>
<h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">$ cmake ..
</span></span><span class="line"><span class="cl">$ cmake --build build
</span></span><span class="line"><span class="cl">$ ctest
</span></span><span class="line"><span class="cl">Running tests...
</span></span><span class="line"><span class="cl">Start 1: test_evolution
</span></span><span class="line"><span class="cl">1/1 Test <span class="c1">#1: test_evolution ................... Passed 0.00 sec</span>
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">1</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>补充内容</strong></p>
<p>我们可以再次使用<code>CMake</code>和<code>Graphviz</code>生成这个项目的依赖关系图:</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ cd build
</span></span><span class="line"><span class="cl">$ cmake --graphviz=example.dot ..
</span></span><span class="line"><span class="cl">$ dot -T png example.dot -o example.png</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">项目结构</div>
</center>
<br>
]]></description></item><item><title>CMake 笔记 | [38] 构建项目的策略及限制变量的范围和副作用</title><link>https://jianye0428.github.io/posts/cmake_note_38/</link><pubDate>Wed, 31 Jan 2024 13:51:42 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_38/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><strong>我们将讨论构建项目的策略，并限制变量的范围和副作用，目的是降低代码的复杂性和简化项目的维护。本篇，我们将把一个项目分割成几个范围有限的<code>CMakeLists.txt</code>文件，这些文件将使用<code>add_subdirectory</code>命令进行处理。</strong></p>
<p><strong>将源文件分割成更小、更易于管理的单元是有意义的。可以将所有源代码都编译成一个库或可执行文件。实际上，项目更喜欢将源代码编译分成更小的、定义良好的库。这样做既是为了本地化和简化依赖项，也是为了简化代码维护。这意味着如在这里所做的那样，由许多库构建一个项目是一种常见的情况。</strong></p>
</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── external
</span></span><span class="line"><span class="cl">│    ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│    ├── conversion.cpp
</span></span><span class="line"><span class="cl">│    └── conversion.hpp
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">│    ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│    ├── evolution
</span></span><span class="line"><span class="cl">│    │    ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│    │    ├── evolution.cpp
</span></span><span class="line"><span class="cl">│    │    └── evolution.hpp
</span></span><span class="line"><span class="cl">│    ├── initial
</span></span><span class="line"><span class="cl">│    │    ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│    │    ├── initial.cpp
</span></span><span class="line"><span class="cl">│    │    └── initial.hpp
</span></span><span class="line"><span class="cl">│    ├── io
</span></span><span class="line"><span class="cl">│    │    ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│    │    ├── io.cpp
</span></span><span class="line"><span class="cl">│    │    └── io.hpp
</span></span><span class="line"><span class="cl">│    ├── main.cpp
</span></span><span class="line"><span class="cl">│    └── parser
</span></span><span class="line"><span class="cl">│        ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│        ├── parser.cpp
</span></span><span class="line"><span class="cl">│        └── parser.hpp
</span></span><span class="line"><span class="cl">└── tests
</span></span><span class="line"><span class="cl">    ├── catch.hpp
</span></span><span class="line"><span class="cl">    ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">    └── test.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/07"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/07<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p>本篇的代码以及项目结构比较简单，并未涉及到新的内容，所以以下代码都没有具体讲解，相关代码的知识点都在前面笔记中。</p>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.5</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">recipe</span><span class="o">-</span><span class="mo">07</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">GNUInstallDirs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_LIBRARY_OUTPUT_DIRECTORY</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_RUNTIME_OUTPUT_DIRECTORY</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="cp"># defines targets and sources
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cp"># contains an &#34;external&#34; library we will link to
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">external</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cp"># enable testing and define tests
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">enable_testing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">tests</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>external/conversion.hpp</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">BinaryRepresentation</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">decimal</span><span class="p">);</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>external/conversion.cpp</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;conversion.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;bitset&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">BinaryRepresentation</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">decimal</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">bitset</span><span class="o">&lt;</span><span class="mi">8</span><span class="o">&gt;</span><span class="p">(</span><span class="n">decimal</span><span class="p">).</span><span class="n">to_string</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>external/CMakeLists.txt</strong></p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_library</span><span class="p">(</span><span class="n">conversion</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">conversion</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">conversion</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">conversion</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">conversion</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/CMakeLists.txt</strong></p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">automata</span> <span class="n">main</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">evolution</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">initial</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">io</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">parser</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">automata</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="n">conversion</span>
</span></span><span class="line"><span class="cl">    <span class="n">evolution</span>
</span></span><span class="line"><span class="cl">    <span class="n">initial</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/evolution/evolution.hpp</strong></p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">Evolve</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">row</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">rule_binary</span><span class="p">);</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/evolution/evolution.cpp</strong></p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;evolution.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">Evolve</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">row</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">rule_binary</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">row</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">left</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">row</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">:</span> <span class="n">i</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">center</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">right</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">row</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">ancestors</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">row</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">row</span><span class="p">[</span><span class="n">center</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">*</span> <span class="n">row</span><span class="p">[</span><span class="n">right</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">ancestors</span> <span class="o">=</span> <span class="mi">7</span> <span class="o">-</span> <span class="n">ancestors</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">new_state</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">stoi</span><span class="p">(</span><span class="n">rule_binary</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">ancestors</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">result</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">new_state</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/evolution/CMakeLists.txt</strong></p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_library</span><span class="p">(</span><span class="n">evolution</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">evolution</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="n">evolution</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">evolution</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">evolution</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/initial/initial.hpp</strong></p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">InitialDistribution</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">length</span><span class="p">);</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/initial/initial.cpp</strong></p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;initial.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">InitialDistribution</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// we start with a vector which is zeroed out
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">result</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// more or less in the middle we place a living cell
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">result</span><span class="p">[</span><span class="n">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/initial/CMakeLists.txt</strong></p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_library</span><span class="p">(</span><span class="n">initial</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">initial</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="n">initial</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">initial</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">initial</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/io/io.hpp</strong></p>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">PrintRow</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">row</span><span class="p">);</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/io/io.cpp</strong></p>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;io.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">PrintRow</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">row</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">row</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">row</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[](</span><span class="kt">int</span> <span class="k">const</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">value</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="sc">&#39;*&#39;</span> <span class="o">:</span> <span class="sc">&#39; &#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/io/CMakeLists.txt</strong></p>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_library</span><span class="p">(</span><span class="n">io</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">io</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">io</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">io</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/parser/parser.hpp</strong></p>
<div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;tuple&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">ParseArguments</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]);</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/parser/parser.cpp</strong></p>
<div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;parser.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cassert&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;tuple&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">ParseArguments</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="s">&#34;program called with wrong number of arguments&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">length</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">stoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">num_steps</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">stoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">rule_decimal</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">stoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">make_tuple</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="n">num_steps</span><span class="p">,</span> <span class="n">rule_decimal</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/parser/CMakeLists.txt</strong></p>
<div class="highlight" id="id-18"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_library</span><span class="p">(</span><span class="n">parser</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">parser</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">parser</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">parser</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>main.cpp</strong></p>
<div class="highlight" id="id-19"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;conversion.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;evolution.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;initial.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;io.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;parser.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// parse arguments
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">length</span><span class="p">,</span> <span class="n">num_steps</span><span class="p">,</span> <span class="n">rule_decimal</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">tie</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="n">num_steps</span><span class="p">,</span> <span class="n">rule_decimal</span><span class="p">)</span> <span class="o">=</span> <span class="n">ParseArguments</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// print information about parameters
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;length: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">length</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;number of steps: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">num_steps</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;rule: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">rule_decimal</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// obtain binary representation for the rule
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">rule_binary</span> <span class="o">=</span> <span class="n">BinaryRepresentation</span><span class="p">(</span><span class="n">rule_decimal</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// create initial distribution
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">row</span> <span class="o">=</span> <span class="n">InitialDistribution</span><span class="p">(</span><span class="n">length</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// print initial configuration
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">PrintRow</span><span class="p">(</span><span class="n">row</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// the system evolves, print each step
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">step</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">step</span> <span class="o">&lt;</span> <span class="n">num_steps</span><span class="p">;</span> <span class="n">step</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">row</span> <span class="o">=</span> <span class="n">Evolve</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">rule_binary</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">PrintRow</span><span class="p">(</span><span class="n">row</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>tests/test.cpp</strong></p>
<div class="highlight" id="id-20"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;evolution.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// this tells catch to provide a main()
</span></span></span><span class="line"><span class="cl"><span class="c1">// only do this in one cpp file
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define CATCH_CONFIG_MAIN
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;catch.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">TEST_CASE</span><span class="p">(</span><span class="s">&#34;Apply rule 90&#34;</span><span class="p">,</span> <span class="s">&#34;[rule-90]&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">row</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">rule</span> <span class="o">=</span> <span class="s">&#34;01011010&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">expected_result</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">REQUIRE</span><span class="p">(</span><span class="n">Evolve</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">rule</span><span class="p">)</span> <span class="o">==</span> <span class="n">expected_result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">TEST_CASE</span><span class="p">(</span><span class="s">&#34;Apply rule 222&#34;</span><span class="p">,</span> <span class="s">&#34;[rule-222]&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">row</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">rule</span> <span class="o">=</span> <span class="s">&#34;11011110&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">expected_result</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">REQUIRE</span><span class="p">(</span><span class="n">Evolve</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">rule</span><span class="p">)</span> <span class="o">==</span> <span class="n">expected_result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>tests/CMakeLists.txt</strong></p>
<div class="highlight" id="id-21"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">cpp_test</span> <span class="n">test</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">cpp_test</span> <span class="n">evolution</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span>
</span></span><span class="line"><span class="cl">    <span class="n">test_evolution</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">cpp_test</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-22"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p build
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">$ cmake ..
</span></span><span class="line"><span class="cl">$ cmake --build .
</span></span><span class="line"><span class="cl">Scanning dependencies of target conversion
</span></span><span class="line"><span class="cl"><span class="o">[</span> 7%<span class="o">]</span> Building CXX object external/CMakeFiles/conversion.dir/conversion.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 14%<span class="o">]</span> Linking CXX static library ../lib64/libconversion.a
</span></span><span class="line"><span class="cl"><span class="o">[</span> 14%<span class="o">]</span> Built target conversion
</span></span><span class="line"><span class="cl">Scanning dependencies of target evolution
</span></span><span class="line"><span class="cl"><span class="o">[</span> 21%<span class="o">]</span> Building CXX object src/evolution/CMakeFiles/evolution.dir/evolution.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 28%<span class="o">]</span> Linking CXX static library ../../lib64/libevolution.a
</span></span><span class="line"><span class="cl"><span class="o">[</span> 28%<span class="o">]</span> Built target evolution
</span></span><span class="line"><span class="cl">Scanning dependencies of target initial
</span></span><span class="line"><span class="cl"><span class="o">[</span> 35%<span class="o">]</span> Building CXX object src/initial/CMakeFiles/initial.dir/initial.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 42%<span class="o">]</span> Linking CXX static library ../../lib64/libinitial.a
</span></span><span class="line"><span class="cl"><span class="o">[</span> 42%<span class="o">]</span> Built target initial
</span></span><span class="line"><span class="cl">Scanning dependencies of target io
</span></span><span class="line"><span class="cl"><span class="o">[</span> 50%<span class="o">]</span> Building CXX object src/io/CMakeFiles/io.dir/io.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 57%<span class="o">]</span> Linking CXX static library ../../lib64/libio.a
</span></span><span class="line"><span class="cl"><span class="o">[</span> 57%<span class="o">]</span> Built target io
</span></span><span class="line"><span class="cl">Scanning dependencies of target parser
</span></span><span class="line"><span class="cl"><span class="o">[</span> 64%<span class="o">]</span> Building CXX object src/parser/CMakeFiles/parser.dir/parser.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 71%<span class="o">]</span> Linking CXX static library ../../lib64/libparser.a
</span></span><span class="line"><span class="cl"><span class="o">[</span> 71%<span class="o">]</span> Built target parser
</span></span><span class="line"><span class="cl">Scanning dependencies of target automata
</span></span><span class="line"><span class="cl"><span class="o">[</span> 78%<span class="o">]</span> Building CXX object src/CMakeFiles/automata.dir/main.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 85%<span class="o">]</span> Linking CXX executable ../bin/automata
</span></span><span class="line"><span class="cl"><span class="o">[</span> 85%<span class="o">]</span> Built target automata
</span></span><span class="line"><span class="cl">Scanning dependencies of target cpp_test
</span></span><span class="line"><span class="cl"><span class="o">[</span> 92%<span class="o">]</span> Building CXX object tests/CMakeFiles/cpp_test.dir/test.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span>100%<span class="o">]</span> Linking CXX executable ../bin/cpp_test
</span></span><span class="line"><span class="cl"><span class="o">[</span>100%<span class="o">]</span> Built target cpp_test
</span></span><span class="line"><span class="cl">$ ctest
</span></span><span class="line"><span class="cl">Running tests...
</span></span><span class="line"><span class="cl">Start 1: test_evolution
</span></span><span class="line"><span class="cl">1/1 Test <span class="c1">#1: test_evolution ................... Passed 0.00 sec</span>
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">1</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>补充内容</strong></p>
<p><code>CMake</code>可以使用<code>Graphviz</code>图形可视化软件生成项目的依赖关系图:</p>
<div class="highlight" id="id-23"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ cd build
</span></span><span class="line"><span class="cl">$ cmake --graphviz=example.dot ..
</span></span><span class="line"><span class="cl">$ dot -T png example.dot -o example.png</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">cmake 项目关系依赖图</div>
</center>
<br>]]></description></item><item><title>CMake 笔记 | [37] 使用废弃函数、宏和变量</title><link>https://jianye0428.github.io/posts/cmake_note_37/</link><pubDate>Wed, 31 Jan 2024 13:51:39 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_37/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong><code>废弃</code>是在不断发展的项目开发过程中一种重要机制，它向开发人员发出信号，表明将来某个函数、宏或变量将被删除或替换。在一段时间内，函数、宏或变量将继续可访问，但会发出警告，最终可能会上升为错误。</strong></div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── cmake
</span></span><span class="line"><span class="cl">│   └── custom_guard.cmake
</span></span><span class="line"><span class="cl">└── CMakeLists.txt</span></span></code></pre></td></tr></table>
</div>
</div><p>项目结构：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/06"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/06<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example</span> <span class="n">LANGUAGES</span> <span class="n">NONE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">macro</span><span class="p">(</span><span class="n">custom_include_guard</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">DEFINED</span> <span class="n">included_modules</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">included_modules</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="s">&#34;${CMAKE_CURRENT_LIST_FILE}&#34;</span> <span class="n">IN_LIST</span> <span class="n">included_modules</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">WARNING</span> <span class="s">&#34;module ${CMAKE_CURRENT_LIST_FILE} processed more than once&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">list</span><span class="p">(</span><span class="n">APPEND</span> <span class="n">included_modules</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_FILE</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">endmacro</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">function</span><span class="p">(</span><span class="n">deprecate_variable</span> <span class="n">_variable</span> <span class="n">_access</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">_access</span> <span class="n">STREQUAL</span> <span class="s">&#34;READ_ACCESS&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">DEPRECATION</span> <span class="s">&#34;variable ${_variable} is deprecated&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endfunction</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">CMAKE_VERSION</span> <span class="n">VERSION_GREATER</span> <span class="s">&#34;3.9&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="cp"># deprecate custom_include_guard
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="n">macro</span><span class="p">(</span><span class="n">custom_include_guard</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">DEPRECATION</span> <span class="s">&#34;custom_include_guard is deprecated - use built-in include_guard instead&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">_custom_include_guard</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">ARGV</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="n">endmacro</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cp"># deprecate variable included_modules
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="n">variable_watch</span><span class="p">(</span><span class="n">included_modules</span> <span class="n">deprecate_variable</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">cmake</span><span class="o">/</span><span class="n">custom_guard</span><span class="p">.</span><span class="n">cmake</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;list of all included modules: ${included_modules}&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">macro</span><span class="p">(</span><span class="n">custom_include_guard</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">DEFINED</span> <span class="n">included_modules</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">included_modules</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="s">&#34;${CMAKE_CURRENT_LIST_FILE}&#34;</span> <span class="n">IN_LIST</span> <span class="n">included_modules</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">WARNING</span> <span class="s">&#34;module ${CMAKE_CURRENT_LIST_FILE} processed more than once&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">list</span><span class="p">(</span><span class="n">APPEND</span> <span class="n">included_modules</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_FILE</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">endmacro</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>定义了一个自定义的<code>包含保护</code>机制，包括一个自定义模块(与上一篇内容相同)，并打印所有包含模块的列表。对于<code>CMake 3.10</code>或更高版本有内置的<code>include_guard</code>。但是，不能简单地删除<code>custom_include_guard</code>和<code>${included_modules}</code>，而是使用一个<code>废弃</code>警告来弃用宏和变量。某个时候，可以将该警告转换为<code>FATAL_ERROR</code>，使代码停止配置，并迫使开发人员对代码进行修改，切换到内置命令。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><code>废弃</code>函数、宏和变量的方法如下:</p>
<p>1.定义一个函数，使用它来弃用一个变量</p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">function</span><span class="p">(</span><span class="n">deprecate_variable</span> <span class="n">_variable</span> <span class="n">_access</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">_access</span> <span class="n">STREQUAL</span> <span class="s">&#34;READ_ACCESS&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">message</span><span class="p">(</span><span class="n">DEPRECATION</span> <span class="s">&#34;variable ${_variable} is deprecated&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endfunction</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>2.如果<code>CMake</code>的版本大于<code>3.9</code>，我们重新定义<code>custom_include_guard</code>并将<code>variable_watch</code>附加到<code>included_modules</code>中:</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">CMAKE_VERSION</span> <span class="n">VERSION_GREATER</span> <span class="s">&#34;3.9&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="cp"># deprecate custom_include_guard
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="n">macro</span><span class="p">(</span><span class="n">custom_include_guard</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">DEPRECATION</span> <span class="s">&#34;custom_include_guard is deprecated - use built-in include_guard instead&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">_custom_include_guard</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">ARGV</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="n">endmacro</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="cp"># deprecate variable included_modules
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="n">variable_watch</span><span class="p">(</span><span class="n">included_modules</span> <span class="n">deprecate_variable</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div></div>
    </div>
  </div>
<p><strong>cmake/custom_guard.cmake</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">custom_include_guard</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;custom.cmake is included and processed&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p build
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">$ cmake ..</span></span></code></pre></td></tr></table>
</div>
</div><p><code>CMake3.10</code>以下版本的项目会产生以下结果:</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">-- custom_custom.cmake is included and processed
</span></span><span class="line"><span class="cl">-- list of all included modules: /home/jiangli/repo/tutorials/cmake-tutorial/chapter7/06/cmake/custom.cmake</span></span></code></pre></td></tr></table>
</div>
</div><p><code>CMake3.10</code>以下版本的项目会产生以下结果:</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">CMake Deprecation Warning at CMakeLists.txt:26 <span class="o">(</span>message<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  custom_include_guard is deprecated - use built-in include_guard instead
</span></span><span class="line"><span class="cl">Call Stack <span class="o">(</span>most recent call first<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  cmake/custom_guard.cmake:1 <span class="o">(</span>custom_include_guard<span class="o">)</span>
</span></span><span class="line"><span class="cl">  CMakeLists.txt:34 <span class="o">(</span>include<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-- custom_custom.cmake is included and processed
</span></span><span class="line"><span class="cl">CMake Deprecation Warning at CMakeLists.txt:19 <span class="o">(</span>message<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  variable included_modules is deprecated
</span></span><span class="line"><span class="cl">Call Stack <span class="o">(</span>most recent call first<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  CMakeLists.txt:9999 <span class="o">(</span>deprecate_variable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  CMakeLists.txt:36 <span class="o">(</span>message<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-- list of all included modules: /home/jiangli/repo/tutorials/cmake-tutorial/chapter7/06/cmake/custom_guard.cmake
</span></span><span class="line"><span class="cl">-- Configuring <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Generating <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Build files have been written to: /home/jiangli/repo/tutorials/cmake-tutorial/chapter7/06/build</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>CMake 笔记 | [36] 用指定参数定义函数或宏</title><link>https://jianye0428.github.io/posts/cmake_note_36/</link><pubDate>Wed, 31 Jan 2024 13:51:36 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_36/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>前面的笔记中，我们研究了函数和宏，并使用了位置参数。本篇，我们将定义一个带有命名参数的函数。我们将复用</strong><a href="https://mp.weixin.qq.com/s?__biz=MzkxMzI5Mjk4Mg==&amp;mid=2247485318&amp;idx=1&amp;sn=32ab4668164e2cb5419a8af6c0acf8e0&amp;scene=21#wechat_redirect"target="_blank" rel="external nofollow noopener noreferrer"><strong>第1节中</strong><i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a><strong>的代码，使用函数和宏重用代码。</strong></div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── cmake
</span></span><span class="line"><span class="cl">│   └── testing.cmake
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">│   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   ├── main.cpp
</span></span><span class="line"><span class="cl">│   ├── sum_integers.cpp
</span></span><span class="line"><span class="cl">│   └── sum_integers.hpp
</span></span><span class="line"><span class="cl">└── tests
</span></span><span class="line"><span class="cl">    ├── catch.hpp
</span></span><span class="line"><span class="cl">    ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">    └── test.cpp</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/04"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/04<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p><strong>cmake/testing.cmake</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">function</span><span class="p">(</span><span class="n">add_catch_test</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">oneValueArgs</span> <span class="n">NAME</span> <span class="n">COST</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">multiValueArgs</span> <span class="n">LABELS</span> <span class="n">DEPENDS</span> <span class="n">REFERENCE_FILES</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">cmake_parse_arguments</span><span class="p">(</span><span class="n">add_catch_test</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;${options}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;${oneValueArgs}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;${multiValueArgs}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">ARGN</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;defining a test ...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;    NAME: ${add_catch_test_NAME}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;    LABELS: ${add_catch_test_LABELS}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;    COST: ${add_catch_test_COST}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;    REFERENCE_FILES: ${add_catch_test_REFERENCE_FILES}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">NAME</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">add_catch_test_NAME</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMAND</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">cpp_test</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span><span class="err">$</span><span class="p">{</span><span class="n">add_catch_test_NAME</span><span class="p">}]</span> <span class="o">--</span><span class="n">success</span> <span class="o">--</span><span class="n">out</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">tests</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">add_catch_test_NAME</span><span class="p">}.</span><span class="n">log</span> <span class="o">--</span><span class="n">durations</span> <span class="n">yes</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORKING_DIRECTORY</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">set_tests_properties</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">add_catch_test_NAME</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">      <span class="n">LABELS</span> <span class="s">&#34;${add_catch_test_LABELS}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">add_catch_test_COST</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set_tests_properties</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">add_catch_test_NAME</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">        <span class="n">COST</span> <span class="err">$</span><span class="p">{</span><span class="n">add_catch_test_COST</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">add_catch_test_DEPENDS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set_tests_properties</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">add_catch_test_NAME</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">        <span class="n">DEPENDS</span> <span class="err">$</span><span class="p">{</span><span class="n">add_catch_test_DEPENDS</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">add_catch_test_REFERENCE_FILES</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="n">COPY</span>
</span></span><span class="line"><span class="cl">        <span class="err">$</span><span class="p">{</span><span class="n">add_catch_test_REFERENCE_FILES</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">DESTINATION</span>
</span></span><span class="line"><span class="cl">        <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endfunction</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">function</span><span class="p">(</span><span class="n">add_catch_test</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">oneValueArgs</span> <span class="n">NAME</span> <span class="n">COST</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">multiValueArgs</span> <span class="n">LABELS</span> <span class="n">DEPENDS</span> <span class="n">REFERENCE_FILES</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">cmake_parse_arguments</span><span class="p">(</span><span class="n">add_catch_test</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;${options}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;${oneValueArgs}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;${multiValueArgs}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">ARGN</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="n">endfunction</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>CMake</code>提供<code>cmake_parse_arguments</code>命令，我们使用函数名(<code>add_catch_test</code>)选项(我们的例子中是<code>none</code>)、单值参数(<code>NAME</code>和<code>COST</code>)和多值参数(<code>LABELS</code>、<code>DEPENDS</code>和<code>REFERENCE_FILES</code>)调用该命令。
<code>options</code>、<code>oneValueArgs</code> 和 <code>multiValueArgs</code> 定义了函数可以接受的不同参数类型。<code>options</code>是布尔标志，<code>oneValueArgs</code> 接受一个值，而 <code>multiValueArgs</code> 可以接受多个值。</p>
<p><code>cmake_parse_arguments</code>命令解析选项和参数，并定义如下:</p>
<ul>
<li>add_catch_test_NAME</li>
<li>add_catch_test_COST</li>
<li>add_catch_test_LABELS</li>
<li>add_catch_test_DEPENDS</li>
<li>add_catch_test_REFERENCE_FILES</li>
</ul>
<p>这种方法使我们有机会用更健壮的接口和更具有可读的函数/宏调用，来实现函数和宏。</p>
</div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl">  <span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">NAME</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">add_catch_test_NAME</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMAND</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">cpp_test</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span><span class="err">$</span><span class="p">{</span><span class="n">add_catch_test_NAME</span><span class="p">}]</span> <span class="o">--</span><span class="n">success</span> <span class="o">--</span><span class="n">out</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">tests</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">add_catch_test_NAME</span><span class="p">}.</span><span class="n">log</span> <span class="o">--</span><span class="n">durations</span> <span class="n">yes</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORKING_DIRECTORY</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>NAME</code> 和 <code>COMMAND</code> 参数分别指定测试名称和运行测试的命令。
测试被配置为将结果输出到项目二进制目录下的日志文件中。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><code>set_tests_properties</code> 用于为测试分配属性。这些属性包括:</p>
<ul>
<li>LABELS （标签），用于对测试进行分类。</li>
<li>COST(成本)，用于指定测试的相对资源使用量。</li>
<li>DEPENDS 指定必须在该测试之前运行的其他测试。</li>
</ul>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">add_catch_test_DEPENDS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set_tests_properties</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">add_catch_test_NAME</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">        <span class="n">DEPENDS</span> <span class="err">$</span><span class="p">{</span><span class="n">add_catch_test_DEPENDS</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如果指定了任何参考文件，则使用 <code>file(COPY ... DESTINATION ...)</code> 命令将这些文件复制到当前二进制目录。这对需要将其输出与已知良好输出进行比较的测试非常有用。</p>
</div>
    </div>
  </div>
<p><strong>tests/CMakeLists.txt</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">cpp_test</span> <span class="n">test</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">cpp_test</span> <span class="n">sum_integers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">testing</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_catch_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span>
</span></span><span class="line"><span class="cl">    <span class="kt">short</span>
</span></span><span class="line"><span class="cl">  <span class="n">LABELS</span>
</span></span><span class="line"><span class="cl">    <span class="kt">short</span>
</span></span><span class="line"><span class="cl">    <span class="n">cpp_test</span>
</span></span><span class="line"><span class="cl">  <span class="n">COST</span>
</span></span><span class="line"><span class="cl">    <span class="mf">1.5</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_catch_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span>
</span></span><span class="line"><span class="cl">  <span class="n">LABELS</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span>
</span></span><span class="line"><span class="cl">    <span class="n">cpp_test</span>
</span></span><span class="line"><span class="cl">  <span class="n">COST</span>
</span></span><span class="line"><span class="cl">    <span class="mf">2.5</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list</span><span class="p">(</span><span class="n">APPEND</span> <span class="n">CMAKE_MODULE_PATH</span> <span class="s">&#34;${CMAKE_CURRENT_SOURCE_DIR}/cmake&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">GNUInstallDirs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_LIBRARY_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_RUNTIME_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">enable_testing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">tests</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p build
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">$ cmake ..
</span></span><span class="line"><span class="cl">-- ...
</span></span><span class="line"><span class="cl">-- defining a <span class="nb">test</span> ...
</span></span><span class="line"><span class="cl">-- NAME: short
</span></span><span class="line"><span class="cl">-- LABELS: short<span class="p">;</span>cpp_test
</span></span><span class="line"><span class="cl">-- COST: 1.5
</span></span><span class="line"><span class="cl">-- REFERENCE_FILES:
</span></span><span class="line"><span class="cl">-- defining a <span class="nb">test</span> ...
</span></span><span class="line"><span class="cl">-- NAME: long
</span></span><span class="line"><span class="cl">-- LABELS: long<span class="p">;</span>cpp_test
</span></span><span class="line"><span class="cl">-- COST: 2.5
</span></span><span class="line"><span class="cl">-- REFERENCE_FILES:
</span></span><span class="line"><span class="cl">-- ...</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake</span> <span class="o">--</span><span class="n">build</span> <span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="n">ctest</span></span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">输出结果</div>
</center>
<br>]]></description></item><item><title>CMake 笔记 | [35] 重新定义函数和宏</title><link>https://jianye0428.github.io/posts/cmake_note_35/</link><pubDate>Wed, 31 Jan 2024 13:51:32 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_35/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>模块包含不应该用作函数调用，因为模块可能被包含多次。本篇，我们将编写我们自己的<code>包含保护</code>机制，如果多次包含一个模块，将触发警告。内置的<code>include_guard</code>命令从<code>3.10</code>版开始可以使用，对于<code>C/C++</code>头文件，它的行为就像<code>#pragma</code>一样。对于当前版本的<code>CMake</code>，我们将演示如何重新定义函数和宏，并且展示如何检查<code>CMake</code>版本，对于低于<code>3.10</code>的版本，我们将使用定制的<code>包含保护</code>机制。</strong></div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── cmake
</span></span><span class="line"><span class="cl">│   ├── custom.cmake
</span></span><span class="line"><span class="cl">│   └── include_guard.cmake
</span></span><span class="line"><span class="cl">└── CMakeLists.txt</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/05"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/05<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p><strong>cmake/include_guard.cmake</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">macro</span><span class="p">(</span><span class="n">include_guard</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">CMAKE_VERSION</span> <span class="n">VERSION_LESS</span> <span class="s">&#34;3.10&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="cp"># for CMake below 3.10 we define our
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="cp"># own include_guard(GLOBAL)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;calling our custom include_guard&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cp"># if this macro is called the first time
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="cp"># we start with an empty list
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">DEFINED</span> <span class="n">included_modules</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">set</span><span class="p">(</span><span class="n">included_modules</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="s">&#34;${CMAKE_CURRENT_LIST_FILE}&#34;</span> <span class="n">IN_LIST</span> <span class="n">included_modules</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">message</span><span class="p">(</span><span class="n">WARNING</span> <span class="s">&#34;module ${CMAKE_CURRENT_LIST_FILE} processed more than once&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">list</span><span class="p">(</span><span class="n">APPEND</span> <span class="n">included_modules</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_FILE</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="cp"># for CMake 3.10 or higher we augment
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="cp"># the built-in include_guard
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;calling the built-in include_guard&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">_include_guard</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">ARGV</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endmacro</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">macro</span><span class="p">(</span><span class="n">include_guard</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">CMAKE_VERSION</span> <span class="n">VERSION_LESS</span> <span class="s">&#34;3.10&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="cp"># ...
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="cp"># ...
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endmacro</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>include_guard</code>宏包含两个分支，一个用于<code>CMake</code>低于<code>3.10</code>，另一个用于<code>CMake</code>高于<code>3.10</code>。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;calling our custom include_guard&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cp"># if this macro is called the first time
</span></span></span><span class="line"><span class="cl"><span class="cp"># we start with an empty list
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">DEFINED</span> <span class="n">included_modules</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">included_modules</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="s">&#34;${CMAKE_CURRENT_LIST_FILE}&#34;</span> <span class="n">IN_LIST</span> <span class="n">included_modules</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">WARNING</span> <span class="s">&#34;module ${CMAKE_CURRENT_LIST_FILE} processed more than once&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">list</span><span class="p">(</span><span class="n">APPEND</span> <span class="n">included_modules</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_FILE</span><span class="p">})</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如果<code>CMake</code>版本低于<code>3.10</code>，进入第一个分支，并且内置的<code>include_guard</code>不可用，所以我们自定义了一个。</p>
<p>如果第一次调用宏，则<code>included_modules</code>变量没有定义，因此我们将其设置为空列表。然后检查<code>${CMAKE_CURRENT_LIST_FILE}</code>是否是<code>included_modules</code>列表中的元素。如果是，则会发出警告；如果没有，我们将<code>${CMAKE_CURRENT_LIST_FILE}</code>追加到这个列表。<code>CMake</code>输出中，我们可以验证自定义模块的第二个包含确实会导致警告。</p>
</div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">macro</span><span class="p">(</span><span class="n">include_guard</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">CMAKE_VERSION</span> <span class="n">VERSION_LESS</span> <span class="s">&#34;3.10&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="cp"># ...
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;calling the built-in include_guard&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">_include_guard</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">ARGV</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endmacro</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>CMake 3.10</code>及更高版本的情况有所不同；在这种情况下，存在一个内置的<code>include_guard</code>，我们用自己的宏接收到参数并调用它。</p>
<p>这里，<code>_include_guard(${ARGV})</code>指向内置的<code>include_guard</code>。这里，我们使用自定义消息(<code>调用内置的include_guard</code>)进行了扩展。这种模式为我们提供了一种机制，来重新定义自己的或内置的函数和宏，这对于调试或记录日志来说非常有用。</p>
</div>
    </div>
  </div>
<p><strong>cmake/custom.cmake</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include_guard</span><span class="p">(</span><span class="n">GLOBAL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;custom.cmake is included and processed&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example</span> <span class="n">LANGUAGES</span> <span class="n">NONE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># (re)defines include_guard
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">include</span><span class="p">(</span><span class="n">cmake</span><span class="o">/</span><span class="n">include_guard</span><span class="p">.</span><span class="n">cmake</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># this is some custom module
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">include</span><span class="p">(</span><span class="n">cmake</span><span class="o">/</span><span class="n">custom</span><span class="p">.</span><span class="n">cmake</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># we simulate that we accidentally include the module a second time
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">include</span><span class="p">(</span><span class="n">cmake</span><span class="o">/</span><span class="n">custom</span><span class="p">.</span><span class="n">cmake</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="三结果展示">三、结果展示</h2>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p build
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">$ cmake ..</span></span></code></pre></td></tr></table>
</div>
</div><p><code>CMake 3.10</code>及更高版本的结果如下:</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">-- calling the built-in include_guard
</span></span><span class="line"><span class="cl">-- custom.cmake is included and processed
</span></span><span class="line"><span class="cl">-- calling the built-in include_guard</span></span></code></pre></td></tr></table>
</div>
</div><p><code>CMake 3.10</code>以下的结果如下:</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">- calling our custom include_guard
</span></span><span class="line"><span class="cl">-- custom.cmake is included and processed
</span></span><span class="line"><span class="cl">-- calling our custom include_guard
</span></span><span class="line"><span class="cl">CMake Warning at cmake/include_guard.cmake:7 <span class="o">(</span>message<span class="o">)</span>:
</span></span><span class="line"><span class="cl">module
</span></span><span class="line"><span class="cl">/home/user/example/cmake/custom.cmake
</span></span><span class="line"><span class="cl">processed more than once
</span></span><span class="line"><span class="cl">Call Stack <span class="o">(</span>most recent call first<span class="o">)</span>:
</span></span><span class="line"><span class="cl">cmake/custom.cmake:1 <span class="o">(</span>include_guard<span class="o">)</span>
</span></span><span class="line"><span class="cl">CMakeLists.txt:12 <span class="o">(</span>include<span class="o">)</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>CMake 笔记 | [34] 编写函数来测试和设置编译器标志</title><link>https://jianye0428.github.io/posts/cmake_note_34/</link><pubDate>Wed, 31 Jan 2024 13:51:29 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_34/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>前两篇，我们使用了宏。本篇，将使用一个函数来抽象细节并避免代码重复。我们将实现一个接受编译器标志列表的函数。该函数将尝试用这些标志逐个编译测试代码，并返回编译器理解的第一个标志。这样，我们将了解几个新特性：****<code>函数</code>、<code>列表操作</code>、<code>字符串操作</code>，以及检查编译器是否支持相应的标志。</strong></div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── cmake
</span></span><span class="line"><span class="cl">│   └── set_compiler_flag.cmake
</span></span><span class="line"><span class="cl">└── CMakeLists.txt</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/03"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/03<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p><strong>cmake/set_compiler_flag.cmake</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">CheckCCompilerFlag</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">CheckCXXCompilerFlag</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">CheckFortranCompilerFlag</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">function</span><span class="p">(</span><span class="n">set_compiler_flag</span> <span class="n">_result</span> <span class="n">_lang</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">_list_of_flags</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">_flag_is_required</span> <span class="n">FALSE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">foreach</span><span class="p">(</span><span class="n">_arg</span> <span class="n">IN</span> <span class="n">ITEMS</span> <span class="err">$</span><span class="p">{</span><span class="n">ARGN</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">      <span class="n">string</span><span class="p">(</span><span class="n">TOUPPER</span> <span class="s">&#34;${_arg}&#34;</span> <span class="n">_arg_uppercase</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">_arg_uppercase</span> <span class="n">STREQUAL</span> <span class="s">&#34;REQUIRED&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">set</span><span class="p">(</span><span class="n">_flag_is_required</span> <span class="n">TRUE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">          <span class="n">list</span><span class="p">(</span><span class="n">APPEND</span> <span class="n">_list_of_flags</span> <span class="s">&#34;${_arg}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">endforeach</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">_flag_found</span> <span class="n">FALSE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">foreach</span><span class="p">(</span><span class="n">flag</span> <span class="n">IN</span> <span class="n">ITEMS</span> <span class="err">$</span><span class="p">{</span><span class="n">_list_of_flags</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">      <span class="n">unset</span><span class="p">(</span><span class="n">_flag_works</span> <span class="n">CACHE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="n">_lang</span> <span class="n">STREQUAL</span> <span class="s">&#34;C&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">check_c_compiler_flag</span><span class="p">(</span><span class="s">&#34;${flag}&#34;</span> <span class="n">_flag_works</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">elseif</span><span class="p">(</span><span class="n">_lang</span> <span class="n">STREQUAL</span> <span class="s">&#34;CXX&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">check_cxx_compiler_flag</span><span class="p">(</span><span class="s">&#34;${flag}&#34;</span> <span class="n">_flag_works</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">elseif</span><span class="p">(</span><span class="n">_lang</span> <span class="n">STREQUAL</span> <span class="s">&#34;Fortran&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="n">check_Fortran_compiler_flag</span><span class="p">(</span><span class="s">&#34;${flag}&#34;</span> <span class="n">_flag_works</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">          <span class="n">message</span><span class="p">(</span><span class="n">FATAL_ERROR</span> <span class="s">&#34;Unknown language in set_compiler_flag: ${_lang}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">_flag_works</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">set</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">_result</span><span class="p">}</span> <span class="s">&#34;${flag}&#34;</span> <span class="n">PARENT_SCOPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">set</span><span class="p">(</span><span class="n">_flag_found</span> <span class="n">TRUE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">endforeach</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">_flag_is_required</span> <span class="n">AND</span> <span class="n">NOT</span> <span class="n">_flag_found</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">message</span><span class="p">(</span><span class="n">FATAL_ERROR</span> <span class="s">&#34;None of the required flags were supported&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endfunction</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">CheckCCompilerFlag</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">CheckCXXCompilerFlag</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">CheckFortranCompilerFlag</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这都是标准的<code>CMake</code>模块，<code>CMake</code>将在<code>${CMAKE_MODULE_PATH}</code>中找到它们。这些模块分别提供<code>check_c_compiler_flag</code>、<code>check_cxx_compiler_flag</code>和<code>check_fortran_compiler_flag</code>宏。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">function</span><span class="p">(</span><span class="n">set_compiler_flag</span> <span class="n">_result</span> <span class="n">_lang</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="n">endfunction</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>set_compiler_flag</code>函数需要两个参数，<code>_result</code>(保存成功编译标志或为空字符串)和<code>_lang</code>(指定语言:<code>C</code>、<code>C++</code>或<code>Fortran</code>)。</p>
<p>我们也能这样调用函数:</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">set_compiler_flag(working_compile_flag C REQUIRED &#34;-Wall&#34; &#34;-warn all&#34;)</span></span></code></pre></td></tr></table>
</div>
</div><p>这里有五个调用参数，但是函数头只需要两个参数。这意味着<code>REQUIRED</code>、<code>-Wall</code>和<code>-warn all</code>将放在<code>${ARGN}</code>中。</p>
</div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp"># build a list of flags from the arguments
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">set</span><span class="p">(</span><span class="n">_list_of_flags</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cp"># also figure out whether the function
</span></span></span><span class="line"><span class="cl"><span class="cp"># is required to find a flag
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">set</span><span class="p">(</span><span class="n">_flag_is_required</span> <span class="n">FALSE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">foreach</span><span class="p">(</span><span class="n">_arg</span> <span class="n">IN</span> <span class="n">ITEMS</span> <span class="err">$</span><span class="p">{</span><span class="n">ARGN</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="n">string</span><span class="p">(</span><span class="n">TOUPPER</span> <span class="s">&#34;${_arg}&#34;</span> <span class="n">_arg_uppercase</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">_arg_uppercase</span> <span class="n">STREQUAL</span> <span class="s">&#34;REQUIRED&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">set</span><span class="p">(</span><span class="n">_flag_is_required</span> <span class="n">TRUE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="n">list</span><span class="p">(</span><span class="n">APPEND</span> <span class="n">_list_of_flags</span> <span class="s">&#34;${_arg}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endforeach</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用<code>foreach</code>构建一个标志列表。同时，从标志列表中过滤出<code>REQUIRED</code>，并使用它来设置<code>_flag_is_required</code>，将标志列表中的其他参数放到<code>_list_of_flags</code>中。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">_flag_found</span> <span class="n">FALSE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cp"># loop over all flags, try to find the first which works
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">foreach</span><span class="p">(</span><span class="n">flag</span> <span class="n">IN</span> <span class="n">ITEMS</span> <span class="err">$</span><span class="p">{</span><span class="n">_list_of_flags</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="n">unset</span><span class="p">(</span><span class="n">_flag_works</span> <span class="n">CACHE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">_lang</span> <span class="n">STREQUAL</span> <span class="s">&#34;C&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">check_c_compiler_flag</span><span class="p">(</span><span class="s">&#34;${flag}&#34;</span> <span class="n">_flag_works</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">elseif</span><span class="p">(</span><span class="n">_lang</span> <span class="n">STREQUAL</span> <span class="s">&#34;CXX&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">check_cxx_compiler_flag</span><span class="p">(</span><span class="s">&#34;${flag}&#34;</span> <span class="n">_flag_works</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">elseif</span><span class="p">(</span><span class="n">_lang</span> <span class="n">STREQUAL</span> <span class="s">&#34;Fortran&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">check_Fortran_compiler_flag</span><span class="p">(</span><span class="s">&#34;${flag}&#34;</span> <span class="n">_flag_works</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="n">message</span><span class="p">(</span><span class="n">FATAL_ERROR</span> <span class="s">&#34;Unknown language in set_compiler_flag: ${_lang}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="cp"># if the flag works, use it, and exit
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="cp"># otherwise try next flag
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="k">if</span><span class="p">(</span><span class="n">_flag_works</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">set</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">_result</span><span class="p">}</span> <span class="s">&#34;${flag}&#34;</span> <span class="n">PARENT_SCOPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">set</span><span class="p">(</span><span class="n">_flag_found</span> <span class="n">TRUE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endforeach</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>现在，我们将循环<code>${_list_of_flags}</code>，尝试每个标志，如果<code>_flag_works</code>被设置为<code>TRUE</code>，我们将<code>_flag_found</code>设置为<code>TRUE</code>，并中止进一步的搜索。</p>
<p><code>unset(_flag_works CACHE)</code>确保<code>check_*_compiler_flag</code>的结果，不会在使用<code>_flag_works result</code>变量时，使用的是缓存结果。</p>
</div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">_flag_works</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">set</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">_result</span><span class="p">}</span> <span class="s">&#34;${flag}&#34;</span> <span class="n">PARENT_SCOPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">set</span><span class="p">(</span><span class="n">_flag_found</span> <span class="n">TRUE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如果找到了标志，并且<code>_flag_works</code>设置为<code>TRUE</code>，我们就将<code>_result</code>映射到的变量。</p>
<p>这需要使用<code>PARENT_SCOPE</code>来完成，因为我们正在修改一个变量，希望打印并在函数体外部使用该变量。请注意，如何使用<code>${_result}</code>语法解引用，从父范围传递的变量<code>_result</code>的值。不管函数的名称是什么，这对于确保工作标志被设置非常有必要。</p>
</div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp"># raise an error if no flag was found
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">if</span><span class="p">(</span><span class="n">_flag_is_required</span> <span class="n">AND</span> <span class="n">NOT</span> <span class="n">_flag_found</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">FATAL_ERROR</span> <span class="s">&#34;None of the required flags were supported&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如果没有找到任何标志，并且该标志设置了<code>REQUIRED</code>，那我们将使用一条错误消息停止配置。</p></div>
    </div>
  </div>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example</span> <span class="n">LANGUAGES</span> <span class="n">C</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">cmake</span><span class="o">/</span><span class="n">set_compiler_flag</span><span class="p">.</span><span class="n">cmake</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_compiler_flag</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">working_compile_flag</span> <span class="n">C</span> <span class="n">REQUIRED</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;-foo&#34;</span> <span class="err">#</span> <span class="k">this</span> <span class="n">should</span> <span class="n">fail</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;-wrong&#34;</span> <span class="err">#</span> <span class="k">this</span> <span class="n">should</span> <span class="n">fail</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;-wrong&#34;</span> <span class="err">#</span> <span class="k">this</span> <span class="n">should</span> <span class="n">fail</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;-Wall&#34;</span> <span class="err">#</span> <span class="k">this</span> <span class="n">should</span> <span class="n">work</span> <span class="n">with</span> <span class="n">GNU</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;-warn all&#34;</span> <span class="err">#</span> <span class="k">this</span> <span class="n">should</span> <span class="n">work</span> <span class="n">with</span> <span class="n">Intel</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;-Minform=inform&#34;</span> <span class="err">#</span> <span class="k">this</span> <span class="n">should</span> <span class="n">work</span> <span class="n">with</span> <span class="n">PGI</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;-nope&#34;</span> <span class="err">#</span> <span class="k">this</span> <span class="n">should</span> <span class="n">fail</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;working C compile flag: ${working_compile_flag}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_compiler_flag</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">working_compile_flag</span> <span class="n">CXX</span> <span class="n">REQUIRED</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;-foo&#34;</span> <span class="err">#</span> <span class="k">this</span> <span class="n">should</span> <span class="n">fail</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;-g&#34;</span> <span class="err">#</span> <span class="k">this</span> <span class="n">should</span> <span class="n">work</span> <span class="n">with</span> <span class="n">GNU</span><span class="p">,</span> <span class="n">Intel</span><span class="p">,</span> <span class="n">PGI</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;/RTCcsu&#34;</span> <span class="err">#</span> <span class="k">this</span> <span class="n">should</span> <span class="n">work</span> <span class="n">with</span> <span class="n">MSVC</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;working CXX compile flag: ${working_compile_flag}&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set_compiler_flag</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">working_compile_flag</span> <span class="n">C</span> <span class="n">REQUIRED</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;-foo&#34;</span> <span class="err">#</span> <span class="k">this</span> <span class="n">should</span> <span class="n">fail</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;-wrong&#34;</span> <span class="err">#</span> <span class="k">this</span> <span class="n">should</span> <span class="n">fail</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;-wrong&#34;</span> <span class="err">#</span> <span class="k">this</span> <span class="n">should</span> <span class="n">fail</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;-Wall&#34;</span> <span class="err">#</span> <span class="k">this</span> <span class="n">should</span> <span class="n">work</span> <span class="n">with</span> <span class="n">GNU</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;-warn all&#34;</span> <span class="err">#</span> <span class="k">this</span> <span class="n">should</span> <span class="n">work</span> <span class="n">with</span> <span class="n">Intel</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;-Minform=inform&#34;</span> <span class="err">#</span> <span class="k">this</span> <span class="n">should</span> <span class="n">work</span> <span class="n">with</span> <span class="n">PGI</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;-nope&#34;</span> <span class="err">#</span> <span class="k">this</span> <span class="n">should</span> <span class="n">fail</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>设置<code>C</code>标志列表。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set_compiler_flag</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">working_compile_flag</span> <span class="n">CXX</span> <span class="n">REQUIRED</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;-foo&#34;</span> <span class="err">#</span> <span class="k">this</span> <span class="n">should</span> <span class="n">fail</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;-g&#34;</span> <span class="err">#</span> <span class="k">this</span> <span class="n">should</span> <span class="n">work</span> <span class="n">with</span> <span class="n">GNU</span><span class="p">,</span> <span class="n">Intel</span><span class="p">,</span> <span class="n">PGI</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;/RTCcsu&#34;</span> <span class="err">#</span> <span class="k">this</span> <span class="n">should</span> <span class="n">work</span> <span class="n">with</span> <span class="n">MSVC</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>设置<code>C++</code>标志列表。</p></div>
    </div>
  </div>
<h2 id="三结果展示">三、结果展示</h2>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p build
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">$ cmake ..
</span></span><span class="line"><span class="cl">-- ...
</span></span><span class="line"><span class="cl">-- Performing Test _flag_works
</span></span><span class="line"><span class="cl">-- Performing Test _flag_works - Failed
</span></span><span class="line"><span class="cl">-- Performing Test _flag_works
</span></span><span class="line"><span class="cl">-- Performing Test _flag_works - Failed
</span></span><span class="line"><span class="cl">-- Performing Test _flag_works
</span></span><span class="line"><span class="cl">-- Performing Test _flag_works - Failed
</span></span><span class="line"><span class="cl">-- Performing Test _flag_works
</span></span><span class="line"><span class="cl">-- Performing Test _flag_works - Success
</span></span><span class="line"><span class="cl">-- working C compile flag: -Wall
</span></span><span class="line"><span class="cl">-- Performing Test _flag_works
</span></span><span class="line"><span class="cl">-- Performing Test _flag_works - Failed
</span></span><span class="line"><span class="cl">-- Performing Test _flag_works
</span></span><span class="line"><span class="cl">-- Performing Test _flag_works - Success
</span></span><span class="line"><span class="cl">-- working CXX compile flag: -g
</span></span><span class="line"><span class="cl">-- ...</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>CMake 笔记 | [33] 将源码分成模块</title><link>https://jianye0428.github.io/posts/cmake_note_33/</link><pubDate>Wed, 31 Jan 2024 13:51:26 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_33/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><strong>项目通常从单个</strong>**<code>CMakeLists.txt</code>文件开始，随着时间的推移，这个文件会逐渐增长。本篇，我们将演示一种将<code>CMakeLists.txt</code>分割成更小单元的机制。将<code>CMakeLists.txt</code>拆分为模块的动机：**</p>
<ul>
<li><strong>主CMakeLists.txt更易于阅读；</strong></li>
<li><strong>CMake模块可以在其他项目中重用</strong></li>
<li><strong>与函数相结合，模块可以帮助我们限制变量的作用范围。</strong></li>
</ul>
<p><strong>本篇，我们将演示如何定义和包含一个宏，该宏允许我们获得</strong>**<code>CMake</code>的彩色输出(用于重要的状态消息或警告)。**</p>
</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── cmake
</span></span><span class="line"><span class="cl">│     └── colors.cmake
</span></span><span class="line"><span class="cl">└── CMakeLists.txt</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/02"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/02<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p><strong>cmake/color.cmake</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp"># colorize CMake output
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">macro</span><span class="p">(</span><span class="n">define_colors</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">WIN32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="cp"># has no effect on WIN32
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="n">set</span><span class="p">(</span><span class="n">ColourReset</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">ColourBold</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">Red</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">Green</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">Yellow</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">Blue</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">Magenta</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">Cyan</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">White</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">BoldRed</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">BoldGreen</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">BoldYellow</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">BoldBlue</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">BoldMagenta</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">BoldCyan</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">BoldWhite</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">string</span><span class="p">(</span><span class="n">ASCII</span> <span class="mi">27</span> <span class="n">Esc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">ColourReset</span> <span class="s">&#34;${Esc}[m&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">ColourBold</span> <span class="s">&#34;${Esc}[1m&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">Red</span> <span class="s">&#34;${Esc}[31m&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">Green</span> <span class="s">&#34;${Esc}[32m&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">Yellow</span> <span class="s">&#34;${Esc}[33m&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">Blue</span> <span class="s">&#34;${Esc}[34m&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">Magenta</span> <span class="s">&#34;${Esc}[35m&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">Cyan</span> <span class="s">&#34;${Esc}[36m&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">White</span> <span class="s">&#34;${Esc}[37m&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">BoldRed</span> <span class="s">&#34;${Esc}[1;31m&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">BoldGreen</span> <span class="s">&#34;${Esc}[1;32m&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">BoldYellow</span> <span class="s">&#34;${Esc}[1;33m&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">BoldBlue</span> <span class="s">&#34;${Esc}[1;34m&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">BoldMagenta</span> <span class="s">&#34;${Esc}[1;35m&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">BoldCyan</span> <span class="s">&#34;${Esc}[1;36m&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">BoldWhite</span> <span class="s">&#34;${Esc}[1;37m&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endmacro</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example</span> <span class="n">LANGUAGES</span> <span class="n">NONE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list</span><span class="p">(</span><span class="n">APPEND</span> <span class="n">CMAKE_MODULE_PATH</span> <span class="s">&#34;${CMAKE_CURRENT_SOURCE_DIR}/cmake&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">colors</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">define_colors</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;This is a normal message&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;${Red}This is a red${ColourReset}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;${BoldRed}This is a bold red${ColourReset}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;${Green}This is a green${ColourReset}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;${BoldMagenta}This is bold${ColourReset}&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">list</span><span class="p">(</span><span class="n">APPEND</span> <span class="n">CMAKE_MODULE_PATH</span> <span class="s">&#34;${CMAKE_CURRENT_SOURCE_DIR}/cmake&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>将<code>cmake</code>子目录添加到<code>CMake</code>模块搜索的路径列表中。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">colors</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">define_colors</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>包括<code>colors.cmake</code>模块，调用其中定义的宏。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;This is a normal message&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;${Red}This is a red${ColourReset}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;${BoldRed}This is a bold red${ColourReset}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;${Green}This is a green${ColourReset}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;${BoldMagenta}This is bold${ColourReset}&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>打印了不同颜色的信息。</p></div>
    </div>
  </div>
<h2 id="三结果展示">三、结果展示</h2>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir build
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake ..</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">结果展示</div>
</center>
<br>
]]></description></item><item><title>CMake 笔记 | [32] 使用函数和宏重用代码</title><link>https://jianye0428.github.io/posts/cmake_note_32/</link><pubDate>Wed, 31 Jan 2024 13:51:23 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_32/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>任何编程语言中，函数允许我们抽象(隐藏)细节并避免代码重复，****<code>CMake</code>也不例外。我们将以宏和函数为例进行讨论，并介绍一个宏，以便方便地定义测试和设置测试的顺序。我们的目标是定义一个宏，能够替换<code>add_test</code>和<code>set_tests_properties</code>，用于定义每组和设置每个测试的预期开销。</strong></div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">│   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   ├── main.cpp
</span></span><span class="line"><span class="cl">│   ├── sum_integers.cpp
</span></span><span class="line"><span class="cl">│   └── sum_integers.hpp
</span></span><span class="line"><span class="cl">└── tests
</span></span><span class="line"><span class="cl">    ├── catch.hpp
</span></span><span class="line"><span class="cl">    ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">    └── test.cpp</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/01"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/01<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cmake_minimum_required(VERSION 3.10 FATAL_ERROR)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">project(example LANGUAGES CXX)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">set(CMAKE_CXX_STANDARD 11)
</span></span><span class="line"><span class="cl">set(CMAKE_CXX_EXTENSIONS OFF)
</span></span><span class="line"><span class="cl">set(CMAKE_CXX_STANDARD_REQUIRED ON)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">include(GNUInstallDirs)
</span></span><span class="line"><span class="cl">set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY
</span></span><span class="line"><span class="cl">    ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
</span></span><span class="line"><span class="cl">set(CMAKE_LIBRARY_OUTPUT_DIRECTORY
</span></span><span class="line"><span class="cl">    ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
</span></span><span class="line"><span class="cl">set(CMAKE_RUNTIME_OUTPUT_DIRECTORY
</span></span><span class="line"><span class="cl">    ${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">add_subdirectory(src)
</span></span><span class="line"><span class="cl">enable_testing()
</span></span><span class="line"><span class="cl">add_subdirectory(tests)</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">GNUInstallDirs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_LIBRARY_OUTPUT_DIRECTORY</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_RUNTIME_OUTPUT_DIRECTORY</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">})</span></span></span></code></pre></td></tr></table>
</div>
</div><p>根据<code>GNU</code>标准定义<code>binary</code>和<code>library</code>路径。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">add_subdirectory(src)
</span></span><span class="line"><span class="cl">enable_testing()
</span></span><span class="line"><span class="cl">add_subdirectory(tests)</span></span></code></pre></td></tr></table>
</div>
</div><p>使用<code>add_subdirectory</code>调用<code>src/CMakeLists.txt</code>和<code>tests/CMakeLists.txt</code>。</p></div>
    </div>
  </div>
<p><strong>src/CMakeLists.txt</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_library</span><span class="p">(</span><span class="n">sum_integers</span> <span class="n">sum_integers</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">sum_up</span> <span class="n">main</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">sum_up</span> <span class="n">sum_integers</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE</span> <span class="n">ON</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这个命令会将当前目录，添加到<code>CMakeLists.txt</code>中定义的所有目标的<code>interface_include_directory</code>属性中。换句话说，我们不需要使用<code>target_include_directory</code>来添加<code>cpp_test</code>所需头文件的位置。</p></div>
    </div>
  </div>
<p><strong>src/sun_integers.hpp</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#ifndef SUM_INTEGERS_H
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SUM_INTEGERS_H
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">int</span> <span class="nf">sum_integers</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">integers</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif </span><span class="c1">// ! SUM_INTEGERS_H
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/sun_integers.cpp</strong></p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;sum_integers.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">sum_integers</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">integers</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">i</span> <span class="p">:</span> <span class="n">integers</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/main.cpp</strong></p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;sum_integers.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">integers</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">argc</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">integers</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">stoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">sum_integers</span><span class="p">(</span><span class="n">integers</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">sum</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>tests/CMakeLists.txt</strong></p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">cpp_test</span> <span class="n">test</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">cpp_test</span> <span class="n">sum_integers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">macro</span><span class="p">(</span><span class="n">add_catch_test</span> <span class="n">_name</span> <span class="n">_cost</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">math</span><span class="p">(</span><span class="n">EXPR</span> <span class="n">num_macro_calls</span> <span class="s">&#34;${num_macro_calls} + 1&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;add_catch_test called with ${ARGC} arguments: ${ARGV}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">_argn</span> <span class="s">&#34;${ARGN}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">_argn</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;oops - macro received argument(s) we did not expect: ${ARGN}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">NAME</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">_name</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMAND</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">cpp_test</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span><span class="err">$</span><span class="p">{</span><span class="n">_name</span><span class="p">}]</span> <span class="o">--</span><span class="n">success</span> <span class="o">--</span><span class="n">out</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">tests</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">_name</span><span class="p">}.</span><span class="n">log</span> <span class="o">--</span><span class="n">durations</span> <span class="n">yes</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORKING_DIRECTORY</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">set_tests_properties</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">_name</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">      <span class="n">COST</span> <span class="err">$</span><span class="p">{</span><span class="n">_cost</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endmacro</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">num_macro_calls</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_catch_test</span><span class="p">(</span><span class="kt">short</span> <span class="mf">1.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_catch_test</span><span class="p">(</span><span class="n">long1</span> <span class="mf">2.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_catch_test</span><span class="p">(</span><span class="n">long2</span> <span class="mf">3.0</span> <span class="n">extra_argument</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;in total there were ${num_macro_calls} calls to add_catch_test&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">macro</span><span class="p">(</span><span class="n">add_catch_test</span> <span class="n">_name</span> <span class="n">_cost</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">math</span><span class="p">(</span><span class="n">EXPR</span> <span class="n">num_macro_calls</span> <span class="s">&#34;${num_macro_calls} + 1&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;add_catch_test called with ${ARGC} arguments: ${ARGV}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">_argn</span> <span class="s">&#34;${ARGN}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">_argn</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;oops - macro received argument(s) we did not expect: ${ARGN}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">NAME</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">_name</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMAND</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">cpp_test</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">      <span class="p">[</span><span class="err">$</span><span class="p">{</span><span class="n">_name</span><span class="p">}]</span> <span class="o">--</span><span class="n">success</span> <span class="o">--</span><span class="n">out</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">tests</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">_name</span><span class="p">}.</span><span class="n">log</span> <span class="o">--</span><span class="n">durations</span> <span class="n">yes</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORKING_DIRECTORY</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">set_tests_properties</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">_name</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">      <span class="n">COST</span> <span class="err">$</span><span class="p">{</span><span class="n">_cost</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endmacro</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这个配置中新添加了<code>add_catch_test</code>宏。这个宏需要两个参数<code>_name</code>和<code>_cost</code>，可以在宏中使用这些参数来调用<code>add_test</code>和<code>set_tests_properties</code>。参数前面的下划线，是为了表明这些参数只能在宏中访问。另外，宏自动填充了<code>${ARGC}</code>(参数数量)和<code>${ARGV}</code>(参数列表)，我们可以在输出中验证了这一点:</p>
<div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">-- add_catch_test called with 2 arguments: short;1.5
</span></span><span class="line"><span class="cl">-- add_catch_test called with 3 arguments: long;2.5;extra_argument</span></span></code></pre></td></tr></table>
</div>
</div><p>宏还定义了<code>${ARGN}</code>，用于保存最后一个参数之后的参数列表。此外，我们还可以使用<code>${ARGV0}</code>、<code>${ARGV1}</code>等来处理参数。我们演示一下，如何捕捉到调用中的额外参数(<code>extra_argument</code>):</p>
<div class="highlight" id="id-18"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">add_catch_test(long 2.5 extra_argument)</span></span></code></pre></td></tr></table>
</div>
</div><p>使用了以下方法:</p>
<div class="highlight" id="id-19"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">set(_argn &#34;${ARGN}&#34;)
</span></span><span class="line"><span class="cl">if(_argn)
</span></span><span class="line"><span class="cl">    message(STATUS &#34;oops - macro received argument(s) we did not expect: ${ARGN}&#34;)
</span></span><span class="line"><span class="cl">endif()</span></span></code></pre></td></tr></table>
</div>
</div><p>这个<code>if</code>语句中，我们引入一个新变量，但不能直接查询<code>ARGN</code>，因为它不是通常意义上的<code>CMake</code>变量。使用这个宏，我们可以通过它们的名称和命令来定义测试，还可以指示预期的开销，这会让耗时长的测试在耗时短测试之前启动，这要归功于<code>COST</code>属性。</p>
<p>为了演示作用域，我们在定义宏之后编写了以下调用:</p>
<div class="highlight" id="id-20"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">num_macro_calls</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_catch_test</span><span class="p">(</span><span class="kt">short</span> <span class="mf">1.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_catch_test</span><span class="p">(</span><span class="kt">long</span> <span class="mf">2.5</span> <span class="n">extra_argument</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;in total there were ${num_macro_calls} calls to add_catch_test&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在宏内部，将<code>num_macro_calls</code>加<code>1</code>:</p>
<div class="highlight" id="id-21"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">math</span><span class="p">(</span><span class="n">EXPR</span> <span class="n">num_macro_calls</span> <span class="s">&#34;${num_macro_calls} + 1&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>产生的输出:</p>
<div class="highlight" id="id-22"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">-- in total there were <span class="m">2</span> calls to add_catch_test</span></span></code></pre></td></tr></table>
</div>
</div></div>
    </div>
  </div>
<p><strong>tests/test.cpp</strong></p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;sum_integers.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1">// this tells catch to provide a main()
</span></span></span><span class="line"><span class="cl"><span class="c1">// only do this in one cpp file
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define CATCH_CONFIG_MAIN
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;catch.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">TEST_CASE</span><span class="p">(</span><span class="s">&#34;Sum of integers for a short vector&#34;</span><span class="p">,</span> <span class="s">&#34;[shirt]&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">integers</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">REQUIRE</span><span class="p">(</span><span class="n">sum_integers</span><span class="p">(</span><span class="n">integers</span><span class="p">)</span> <span class="o">==</span> <span class="mi">15</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">TEST_CASE</span><span class="p">(</span><span class="s">&#34;Sum of integers for a longer vector&#34;</span><span class="p">,</span> <span class="s">&#34;[long]&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">integers</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1001</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">integers</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">REQUIRE</span><span class="p">(</span><span class="n">sum_integers</span><span class="p">(</span><span class="n">integers</span><span class="p">)</span> <span class="o">==</span> <span class="mi">500500</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="三结果展示">三、结果展示</h2>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p build
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">$ cmake ..
</span></span><span class="line"><span class="cl">-- ...
</span></span><span class="line"><span class="cl">-- add_catch_test called with <span class="m">2</span> arguments: short<span class="p">;</span>1.5
</span></span><span class="line"><span class="cl">-- add_catch_test called with <span class="m">3</span> arguments: long<span class="p">;</span>2.5<span class="p">;</span>extra_argument
</span></span><span class="line"><span class="cl">-- oops - macro received argument<span class="o">(</span>s<span class="o">)</span> we did not expect: extra_argument
</span></span><span class="line"><span class="cl">-- in total there were <span class="m">2</span> calls to add_catch_test
</span></span><span class="line"><span class="cl">-- ...</span></span></code></pre></td></tr></table>
</div>
</div><p>构建并运行测试</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cmake --build .
</span></span><span class="line"><span class="cl">$ ctest</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">测试结果展示</div>
</center>
<br>
<h2 id="四补充内容">四、补充内容</h2>
<p>上述内容中的使用宏定义的方法替换<code>add_test</code>、<code>add_tests_properties</code>的方法可以使用一个函数来实现：</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">function</span><span class="p">(</span><span class="n">add_catch_test</span> <span class="n">_name</span> <span class="n">_cost</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="n">endfunction</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>宏和函数之间的区别在于它们的变量范围。宏在调用者的范围内执行，而函数有自己的变量范围。换句话说，如果我们使用宏，需要设置或修改对调用者可用的变量。如果不去设置或修改输出变量，最好使用函数。我们注意到，可以在函数中修改父作用域变量，但这必须使用<code>PARENT_SCOPE</code>显式表示:</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">variable_visible_outside</span> <span class="s">&#34;some value&#34;</span> <span class="n">PARENT_SCOPE</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如果我们将宏更改为函数，测试仍然可以工作，但是<code>num_macro_calls</code>在父范围内的所有调用中始终为0。将<code>CMake</code>宏想象成类似函数是很有用的，这些函数被直接替换到它们被调用的地方(在<code>C</code>语言中内联)。将<code>CMake</code>函数想象成黑盒函数很有必要。黑盒中，除非显式地将其定义为<code>PARENT_SCOPE</code>，否则不会返回任何内容。<code>CMake</code>中的函数没有返回值。</p>
]]></description></item><item><title>CMake 笔记 | [31] 构建时记录Git Hash值</title><link>https://jianye0428.github.io/posts/cmake_note_31/</link><pubDate>Wed, 31 Jan 2024 13:51:19 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_31/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong><a href="https://mp.weixin.qq.com/s?__biz=MzkxMzI5Mjk4Mg==&amp;mid=2247485287&amp;idx=1&amp;sn=5188d6d93c1e2b757134be6bec3de9bd&amp;scene=21#wechat_redirect"target="_blank" rel="external nofollow noopener noreferrer">上一篇<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>，在配置时记录了代码存储库(<code>Git Hash</code>)的状态。然而，该方法方法有一个令人不满意的地方，如果在配置代码之后更改分支或提交更改，则源代码中包含的版本记录可能指向错误的<code>Git Hash</code>值。本篇，我们将演示如何在构建时记录·Git Hash·(或者，执行其他操作)，以确保每次构建代码时都运行这些操作，因为实际操作中可能只配置一次，但是会构建多次。</strong></div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── cmake
</span></span><span class="line"><span class="cl">│   └── git-hash.cmake
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── example.cpp
</span></span><span class="line"><span class="cl">└── version.hpp.in</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter6/05"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter6/05<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p><strong>version.hpp.in</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GIT_HASH</span> <span class="o">=</span> <span class="s">&#34;@GIT_HASH@&#34;</span><span class="p">;</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>example.cpp</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;version.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;This code has been built from version &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">GIT_HASH</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>git-hash.cmake</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">GIT_HASH</span> <span class="s">&#34;unknown&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># find Git and if available set GIT_HASH variable
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">find_package</span><span class="p">(</span><span class="n">Git</span> <span class="n">QUIET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">GIT_FOUND</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">execute_process</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">GIT_EXECUTABLE</span><span class="p">}</span> <span class="n">log</span> <span class="o">-</span><span class="mi">1</span> <span class="o">--</span><span class="n">pretty</span><span class="o">=</span><span class="nl">format</span><span class="p">:</span><span class="o">%</span><span class="n">h</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_VARIABLE</span> <span class="n">GIT_HASH</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_STRIP_TRAILING_WHITESPACE</span>
</span></span><span class="line"><span class="cl">    <span class="n">ERROR_QUIET</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Git hash is ${GIT_HASH}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">configure_file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">version</span><span class="p">.</span><span class="n">hpp</span><span class="p">.</span><span class="n">in</span>
</span></span><span class="line"><span class="cl">  <span class="err">$</span><span class="p">{</span><span class="n">TARGET_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">generated</span><span class="o">/</span><span class="n">version</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="err">@</span><span class="n">ONLY</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">recipe</span><span class="o">-</span><span class="mo">07</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">example</span> <span class="n">example</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">example</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">generated</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_custom_command</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">OUTPUT</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">generated</span><span class="o">/</span><span class="n">version</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">    <span class="n">ALL</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_COMMAND</span><span class="p">}</span> <span class="o">-</span><span class="n">D</span> <span class="n">TARGET_DIR</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span> <span class="o">-</span><span class="n">P</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">cmake</span><span class="o">/</span><span class="n">git</span><span class="o">-</span><span class="n">hash</span><span class="p">.</span><span class="n">cmake</span>
</span></span><span class="line"><span class="cl">  <span class="n">WORKING_DIRECTORY</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># rebuild version.hpp every time
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_custom_target</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">get_git_hash</span>
</span></span><span class="line"><span class="cl">  <span class="n">ALL</span>
</span></span><span class="line"><span class="cl">  <span class="n">DEPENDS</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">generated</span><span class="o">/</span><span class="n">version</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># version.hpp has to be generated before we start building example
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_dependencies</span><span class="p">(</span><span class="n">example</span> <span class="n">get_git_hash</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_custom_command</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">OUTPUT</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">generated</span><span class="o">/</span><span class="n">version</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">    <span class="n">ALL</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_COMMAND</span><span class="p">}</span> <span class="o">-</span><span class="n">D</span> <span class="n">TARGET_DIR</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span> <span class="o">-</span><span class="n">P</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">cmake</span><span class="o">/</span><span class="n">git</span><span class="o">-</span><span class="n">hash</span><span class="p">.</span><span class="n">cmake</span>
</span></span><span class="line"><span class="cl">  <span class="n">WORKING_DIRECTORY</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>自定义命令调用<code>CMake</code>来执行<code>git-hash.cmake</code>脚本。这里使用<code>CLI</code>的<code>-P</code>开关，通过传入脚本的位置实现的。请注意，可以像往常一样使用<code>CLI</code>开关<code>-D</code>传递选项。<code>git-hash.cmake</code>脚本生成<code>${TARGET_DIR}/generated/version.hpp</code>。自定义目标被添加到<code>ALL</code>目标中，并且依赖于自定义命令的输出。换句话说，当构建默认目标时，我们确保自定义命令已经运行。此外，自定义命令将<code>ALL</code>目标作为输出。这样，我们就能确保每次都会生成<code>version.hpp</code>了。</p></div>
    </div>
  </div>
<h2 id="三结果展示">三、结果展示</h2>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p build
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">$ cmake ..
</span></span><span class="line"><span class="cl">$ cmake --build .
</span></span><span class="line"><span class="cl">$ ./example
</span></span><span class="line"><span class="cl">This code has been configured from version c66f02</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">生成git hash版本文件</div>
</center>
<br>
<h2 id="四补充内容">四、补充内容</h2>
<p>可以改进配置，以便在记录的<code>Git Hash</code>外，包含其他的信息。检测构建环境是否<code>污染</code>(即是否包含未提交的更改和未跟踪的文件)，或者<code>干净</code>。可以使用<code>git describe --abbrev=7 --long --always --dirty --tags</code>检测这些信息。根据可重现性，甚至可以将<code>Git</code>的状态，完整输出记录到头文件中。</p>
]]></description></item><item><title>CMake 笔记 | [30] 配置时记录Git Hash值</title><link>https://jianye0428.github.io/posts/cmake_note_30/</link><pubDate>Wed, 31 Jan 2024 07:30:45 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_30/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>大多数现代源代码存储库都使用</strong>**<code>Git</code>作为版本控制系统进行跟踪，提交的<code>Git Hash</code>决定了源代码的状态。因此，为了标记可执行文件，尝试将<code>Git Hash</code>记录到可执行文件中，方法是将哈希字符串记录在一个头文件中，该头文件可以包含在代码中。**</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── example.cpp
</span></span><span class="line"><span class="cl">└── version.hpp.in</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter6/04"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter6/04<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p><strong>version.hpp.in</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GIT_HASH</span> <span class="o">=</span> <span class="s">&#34;@GIT_HASH@&#34;</span><span class="p">;</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>example.cpp</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;version.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;This code has been configured from version &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">GIT_HASH</span>
</span></span><span class="line"><span class="cl">            <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">GIT_HASH</span> <span class="s">&#34;unknown&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">Git</span> <span class="n">QUIET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">GIT_FOUND</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">execute_process</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">GIT_EXECUTABLE</span><span class="p">}</span> <span class="n">log</span> <span class="o">-</span><span class="mi">1</span> <span class="o">--</span><span class="n">pretty</span><span class="o">=</span><span class="nl">format</span><span class="p">:</span><span class="o">%</span><span class="n">h</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_VARIABLE</span> <span class="n">GIT_HASH</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_STRIP_TRAILING_WHITESPACE</span>
</span></span><span class="line"><span class="cl">    <span class="n">ERROR_QUIET</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORKING_DIRECTORY</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Git hash is ${GIT_HASH}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">configure_file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">version</span><span class="p">.</span><span class="n">hpp</span><span class="p">.</span><span class="n">in</span>
</span></span><span class="line"><span class="cl">  <span class="n">generated</span><span class="o">/</span><span class="n">version</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="err">@</span><span class="n">ONLY</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">example</span> <span class="n">example</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">example</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">generated</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">GIT_HASH</span> <span class="s">&#34;unknown&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>由于<code>Git</code>命令可能会失败(源代码已经分发到<code>Git</code>存储库之外)，或者<code>Git</code>在系统上不可用，我们希望为这个变量设置一个默认值。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">Git</span> <span class="n">QUIET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">GIT_FOUND</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">execute_process</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">GIT_EXECUTABLE</span><span class="p">}</span> <span class="n">log</span> <span class="o">-</span><span class="mi">1</span> <span class="o">--</span><span class="n">pretty</span><span class="o">=</span><span class="nl">format</span><span class="p">:</span><span class="o">%</span><span class="n">h</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_VARIABLE</span> <span class="n">GIT_HASH</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_STRIP_TRAILING_WHITESPACE</span>
</span></span><span class="line"><span class="cl">    <span class="n">ERROR_QUIET</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORKING_DIRECTORY</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用<code>find_package(Git QUIET)</code>来检测系统上是否有可用的<code>Git</code>。如果有(<code>GIT_FOUND</code>为<code>True</code>)，运行一个<code>Git</code>命令:<code>${GIT_EXECUTABLE} log -1 --pretty=format:%h</code>。这个命令给出了当前提交<code>Hash</code>的简短版本。</p>
<p>当然，这里我们可以灵活地运行<code>Git</code>命令。</p>
<p>要求<code>execute_process</code>命令将结果放入名为<code>GIT_HASH</code>的变量中，然后删除任何尾随的空格。使用<code>ERROR_QUIET</code>，如果<code>Git</code>命令由于某种原因失败，不会停止配置。</p>
</div>
    </div>
  </div>
<h2 id="三结果展示">三、结果展示</h2>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p build
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">$ cmake ..
</span></span><span class="line"><span class="cl">$ cmake --build .
</span></span><span class="line"><span class="cl">$ ./example
</span></span><span class="line"><span class="cl">This code has been configured from version 74e4aa9</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">生成保存git hash的文件</div>
</center>
<br>
<p><strong>version.hpp</strong></p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GIT_HASH</span> <span class="o">=</span> <span class="s">&#34;74e4aa9&#34;</span><span class="p">;</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>CMake 笔记 | [29] 从文件中记录项目版本</title><link>https://jianye0428.github.io/posts/cmake_note_29/</link><pubDate>Wed, 31 Jan 2024 07:30:41 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_29/</guid><description><![CDATA[<h2 id="一-导言">一、 导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>本篇内容目的和上一篇相似，但是出发点不同。我们计划是从文件中读取版本信息，而不是将其设置在CMakeLists.txt中。将版本保存在单独文件中的目的，是允许其他构建框架或开发工具使用独立于</strong>**<code>CMake</code>的信息，而不需要将信息复制到多个文件中。**</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── example.cpp
</span></span><span class="line"><span class="cl">├── version.hpp.in
</span></span><span class="line"><span class="cl">└── VERSION.txt</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter6/03"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter6/03<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p><strong>VERSION.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">2.0.1-rc-2</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>version.hpp.in</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">PROGRAM_VERSION</span> <span class="o">=</span> <span class="s">&#34;@PROGRAM_VERSION@&#34;</span><span class="p">;</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>example.cpp</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;version.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;This is output from code v&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">PROGRAM_VERSION</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Hello CMake world!&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">EXISTS</span> <span class="s">&#34;${CMAKE_CURRENT_SOURCE_DIR}/VERSION.txt&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">file</span><span class="p">(</span><span class="n">READ</span> <span class="s">&#34;${CMAKE_CURRENT_SOURCE_DIR}/VERSION.txt&#34;</span> <span class="n">PROGRAM_VERSION</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">string</span><span class="p">(</span><span class="n">STRIP</span> <span class="s">&#34;${PROGRAM_VERSION}&#34;</span> <span class="n">PROGRAM_VERSION</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">FATAL_ERROR</span> <span class="s">&#34;File ${CMAKE_CURRENT_SOURCE_DIR}/VERSION.txt not found&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">configure_file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">version</span><span class="p">.</span><span class="n">hpp</span><span class="p">.</span><span class="n">in</span>
</span></span><span class="line"><span class="cl">  <span class="n">generated</span><span class="o">/</span><span class="n">version</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="err">@</span><span class="n">ONLY</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">example</span> <span class="n">example</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">example</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">generated</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">EXISTS</span> <span class="s">&#34;${CMAKE_CURRENT_SOURCE_DIR}/VERSION.txt&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">file</span><span class="p">(</span><span class="n">READ</span> <span class="s">&#34;${CMAKE_CURRENT_SOURCE_DIR}/VERSION.txt&#34;</span> <span class="n">PROGRAM_VERSION</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">string</span><span class="p">(</span><span class="n">STRIP</span> <span class="s">&#34;${PROGRAM_VERSION}&#34;</span> <span class="n">PROGRAM_VERSION</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">FATAL_ERROR</span> <span class="s">&#34;File ${CMAKE_CURRENT_SOURCE_DIR}/VERSION.txt not found&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>首先，检查文件<code>VERSION.txt</code>文件是否存在，如果不存在，则发出错误消息。如果存在，将内容读入<code>PROGRAM_VERSION</code>变量中，该变量会去掉尾部的空格。</p>
<p>当设置了变量<code>PROGRAM_VERSION</code>，就可以使用它来配置<code>version.hpp.in</code>，生成generated/version.hpp：</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">configure_file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">version</span><span class="p">.</span><span class="n">hpp</span><span class="p">.</span><span class="n">in</span>
</span></span><span class="line"><span class="cl">  <span class="n">generated</span><span class="o">/</span><span class="n">version</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="err">@</span><span class="n">ONLY</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div></div>
    </div>
  </div>
<h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p build
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">$ cmake ..
</span></span><span class="line"><span class="cl">$ cmake --build .
</span></span><span class="line"><span class="cl">$ ./example
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">This is output from code v2.0.1-rc-2
</span></span><span class="line"><span class="cl">Hello CMake world!</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">生成版本文件</div>
</center>
<br>
<p><strong>version.hpp</strong></p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">PROGRAM_VERSION</span> <span class="o">=</span> <span class="s">&#34;2.0.1-rc-2&#34;</span><span class="p">;</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>CMake 笔记 | [28] 记录项目版本信息以便报告</title><link>https://jianye0428.github.io/posts/cmake_note_28/</link><pubDate>Wed, 31 Jan 2024 07:30:38 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_28/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><strong>代码版本很重要，不仅是为了可重复性，还为了记录API功能或简化支持请求和bug报告。源代码通常处于某种版本控制之下，例如可以使用Git标记附加额外版本号。然而，不仅需要对源代码进行版本控制，而且可执行文件还需要记录项目版本，以便将其打印到代码输出或用户界面上。</strong></p>
<p><strong>本篇，将在CMake源文件中定义版本号。我们的目标是在配置项目时将程序版本记录到头文件中。然后，生成的头文件可以包含在代码的正确位置和时间，以便将代码版本打印到输出文件或屏幕上。</strong></p>
</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── version.h.in
</span></span><span class="line"><span class="cl">└── example.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter6/02"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter6/02<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p><strong>example.cpp</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;version.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;This is output from code &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">PROJECT_VERSION</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Major version number: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">PROJECT_VERSION_MAJOR</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Minor version number: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">PROJECT_VERSION_MINOR</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Hello CMake world!&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这里，假设<code>PROJECT_VERSION_MAJOR</code>、<code>PROJECT_VERSION_MINOR</code>和<code>PROJECT_VERSION</code>是在<code>version.h</code>中定义的。
目标是从以下模板中生成<code>version.h.in</code>:</p>
<p><strong>version.h.in</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define PROJECT_VERSION_MAJOR @PROJECT_VERSION_MAJOR@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define PROJECT_VERSION_MINOR @PROJECT_VERSION_MINOR@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define PROJECT_VERSION_PATCH @PROJECT_VERSION_PATCH@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define PROJECT_VERSION &#34;v@PROJECT_VERSION@&#34;</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这里使用预处理器定义，也可以使用字符串或整数常量来提高类型安全性。</p>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example</span> <span class="n">VERSION</span> <span class="mf">2.0.1</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">configure_file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">version</span><span class="p">.</span><span class="n">h</span><span class="p">.</span><span class="n">in</span>
</span></span><span class="line"><span class="cl">  <span class="n">generated</span><span class="o">/</span><span class="n">version</span><span class="p">.</span><span class="n">h</span>
</span></span><span class="line"><span class="cl">  <span class="err">@</span><span class="n">ONLY</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span> <span class="n">example</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">generated</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>当使用版本参数调用<code>CMake</code>的<code>project</code>时，<code>CMake</code>将为项目设置<code>PROJECT_VERSION_MAJOR</code>、<code>PROJECT_VERSION_MINOR</code>和<code>PROJECT_VERSION_PATCH</code>。</p>
<p><code>configure_file</code>接受一个输入文件(本例中是<code>version.h.in</code>)，通过将<code>@</code>之间的占位符替换成对应的<code>CMake</code>变量，生成一个输出文件(本例中是<code>generate/version.h</code>)。它将<code>@PROJECT_VERSION_MAJOR@</code>替换为<code>2</code>，以此类推。使用关键字<code>@ONLY</code>，我们将<code>configure_file</code>限制为只替换<code>@variables@</code>，而不修改<code>${variables}</code>。</p>
<h2 id="四结果">四、结果</h2>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir build <span class="p">&amp;</span> <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake ..
</span></span><span class="line"><span class="cl">cmake --build .
</span></span><span class="line"><span class="cl">./example
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">This is output from code v2.0.1
</span></span><span class="line"><span class="cl">Major version number: <span class="m">2</span>
</span></span><span class="line"><span class="cl">Minor version number: <span class="m">0</span>
</span></span><span class="line"><span class="cl">Hello CMake world!</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">生成版本信息</div>
</center>
<br>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define PROJECT_VERSION_MAJOR 2
</span></span></span><span class="line"><span class="cl"><span class="cp">#define PROJECT_VERSION_MINOR 0
</span></span></span><span class="line"><span class="cl"><span class="cp">#define PROJECT_VERSION_PATCH 1
</span></span></span><span class="line"><span class="cl"><span class="cp">#define PROJECT_VERSION &#34;v2.0.1&#34;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="五补充内容">五、补充内容</h2>
<p><code>CMake</code>以<code>x.y.z</code>格式给出的版本号，并将变量<code>PROJECT_VERSION</code>和<code>&lt;project-name&gt;_VERSION</code>设置为给定的值。此外,<code>PROJECT_VERSION_MAJOR</code>(<code>&lt;project-name&gt;_VERSION_MAJOR</code>),<code>PROJECT_VERSION_MINOR</code>(<code>&lt;project-name&gt;_VERSION_MINOR</code>) <code>PROJECT_VERSION_PATCH</code>(<code>&lt;project-name&gt;_VERSION_PATCH</code>)和<code>PROJECT_VERSION_TWEAK</code>(<code>&lt;project-name&gt;_VERSION_TWEAK</code>),将分别设置为<code>X</code>, <code>Y</code>, <code>Z</code>和<code>t</code>。</p>
<p>为了确保只有当<code>CMake</code>变量被认为是一个真正的常量时，才定义预处理器变量，可以使用<code>configure_file</code>，在配置的头文件中使用<code>#cmakedefin</code>而不是<code>#define</code>。</p>
<p>根据是否定义了<code>CMake</code>变量并将其计算为一个真正的常量，<code>#cmakedefine YOUR_VARIABLE</code>将被替换为<code>#define YOUR_VARIABLE …</code>或者<code>/* #undef YOUR_VARIABLE */</code>。还有<code>#cmakedefine01</code>，将根据变量是否定义，将变量设置为<code>0</code>或<code>1</code>。</p>
]]></description></item></channel></rss>