<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>yejian's blog</title><link>https://jianye0428.github.io/</link><description>Lruihao's Note 李瑞豪的博客：探索、分享、记录自己在工作生活学习到一些东西。人知道得越多，就就会发现无知的越多。有更广袤世界可以探索，真是莫大的快乐啊！</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>18817571704@163.com (Jian YE)</managingEditor><webMaster>18817571704@163.com (Jian YE)</webMaster><lastBuildDate>Fri, 23 Feb 2024 13:17:52 +0800</lastBuildDate><atom:link href="https://jianye0428.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>强化学习笔记 [8] | 价值函数的近似表示与Deep Q-Learning</title><link>https://jianye0428.github.io/posts/rl_learning_note_8/</link><pubDate>Fri, 23 Feb 2024 13:17:44 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/rl_learning_note_8/</guid><description><![CDATA[<h1 id="0-引言">0. 引言</h1>
<p>在强化学习系列的<a href="https://www.cnblogs.com/pinard/p/9385570.html"target="_blank" rel="external nofollow noopener noreferrer">前七篇<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>里，我们主要讨论的都是规模比较小的强化学习问题求解算法。今天开始我们步入深度强化学习。这一篇关注于价值函数的近似表示和Deep Q-Learning算法。</p>
<p>Deep Q-Learning这一篇对应Sutton书的第11章部分和UCL强化学习课程的第六讲。</p>
<h1 id="1-为何需要价值函数的近似表示">1. 为何需要价值函数的近似表示</h1>
<p>在之前讲到了强化学习求解方法，无论是动态规划DP，蒙特卡罗方法MC，还是时序差分TD，使用的状态都是离散的有限个状态集合 $S$。此时问题的规模比较小，比较容易求解。但是假如我们遇到复杂的状态集合呢？甚至很多时候，状态是连续的，那么就算离散化后，集合也很大，此时我们的传统方法，比如Q-Learning，根本无法在内存中维护这么大的一张Q表。　　　　</p>
<p>比如经典的冰球世界(PuckWorld)强化学习问题，具体的动态demo见<a href="https://cs.stanford.edu/people/karpathy/reinforcejs/puckworld.html"target="_blank" rel="external nofollow noopener noreferrer">这里<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>。环境由一个正方形区域构成代表着冰球场地，场地内大的圆代表着运动员个体，小圆代表着目标冰球。在这个正方形环境中，小圆会每隔一定的时间随机改变在场地的位置，而代表个体的大圆的任务就是尽可能快的接近冰球目标。大圆可以操作的行为是在水平和竖直共四个方向上施加一个时间步时长的一个大小固定的力，借此来改变大圆的速度。环境会在每一个时间步内告诉个体当前的水平与垂直坐标、当前的速度在水平和垂直方向上的分量以及目标的水平和垂直坐标共6项数据，奖励值为个体与目标两者中心距离的负数，也就是距离越大奖励值越低且最高奖励值为0。</p>
<p>在这个问题中，状态是一个6维的向量，并且是连续值。没法直接用之前离散集合的方法来描述状态。当然，你可以说，我们可以把连续特征离散化。比如把这个冰球场100x100的框按1x1的格子划分成10000个格子，那么对于运动员的坐标和冰球的坐标就有$10^4∗10^4=10^8$次种，如果再加上个体速度的分量就更是天文数字了，此时之前讲过的强化学习方法都会因为问题的规模太大而无法使用。怎么办呢？必须要对问题的建模做修改了，而价值函数的近似表示就是一个可行的方法。</p>
<h1 id="2-价值函数的近似表示方法">2. 价值函数的近似表示方法</h1>
<p>由于问题的状态集合规模大，一个可行的建模方法是价值函数的近似表示。方法是我们引入一个状态价值函数 $\hat{v}$, 这个函数由参数 $w$ 描述，并接受状态 $s$ 作为输入，计算后得到状态 $s$ 的价值，即我们期望：</p>
<p>$$\hat{v}(s,w)\approx v_\pi(s)$$</p>
<p>类似的，引入一个动作价值函数 $\hat{q}$，这个函数由参数 $w$ 描述，并接受状态 $s$ 与动作 $a$ 作为输入，计算后得到动作价值，即我们期望：</p>
<p>$$\hat{q}(s,a,w)\approx q_\pi(s,a)$$</p>
<p>价值函数近似的方法很多，比如最简单的线性表示法，用 $ϕ(s)$表示状态 $s$ 的特征向量，则此时我们的状态价值函数可以近似表示为：</p>
<p>$$\hat{v}(s,w)=\phi(s)^Tw$$</p>
<p>当然，除了线性表示法，我们还可以用决策树，最近邻，傅里叶变换，神经网络来表达我们的状态价值函数。而最常见，应用最广泛的表示方法是神经网络。因此后面我们的近似表达方法如果没有特别提到，都是指的神经网络的近似表示。</p>
<p>对于神经网络，可以使用DNN，CNN或者RNN。没有特别的限制。如果把我们计算价值函数的神经网络看做一个黑盒子，那么整个近似过程可以看做下面这三种情况：</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">神经网络拟合价值函数</div>
</center>
<br>
<p>对于状态价值函数，神经网络的输入是状态s的特征向量，输出是状态价值 $\hat{v}(s,w)$。对于动作价值函数，有两种方法，一种是输入状态 $s$ 的特征向量和动作 $a$，输出对应的动作价值 $\hat{q}(s,a,w)$，另一种是只输入状态 $s$ 的特征向量，动作集合有多少个动作就有多少个输出 $\hat{q}(s,ai,w)$。这里隐含了我们的动作是有限个的离散动作。</p>
<p>对于我们前一篇讲到的Q-Learning算法，我们现在就价值函数的近似表示来将其改造，采用上面右边的第三幅图的动作价值函数建模思路来做，现在我们叫它Deep Q-Learning。</p>
<h1 id="3-deep-q-learning算法思路">3. Deep Q-Learning算法思路</h1>
<p>Deep Q-Learning算法的基本思路来源于Q-Learning。但是和Q-Learning不同的地方在于，它的Q值的计算不是直接通过状态值s和动作来计算，而是通过上面讲到的Q网络来计算的。这个Q网络是一个神经网络，我们一般简称Deep Q-Learning为DQN。</p>
<p>DQN的输入是我们的状态s对应的状态向量 $ϕ(s)$， 输出是所有动作在该状态下的动作价值函数Q。Q网络可以是DNN，CNN或者RNN，没有具体的网络结构要求。</p>
<p>DQN主要使用的技巧是经验回放(experience replay), 即将每次和环境交互得到的奖励与状态更新情况都保存起来，用于后面目标Q值的更新。为什么需要经验回放呢？我们回忆一下Q-Learning，它是有一张Q表来保存所有的Q值的当前结果的，但是DQN是没有的，那么在做动作价值函数更新的时候，就需要其他的方法，这个方法就是<strong>经验回放</strong>。</p>
<p>通过经验回放得到的目标Q值和通过Q网络计算的Q值肯定是有误差的，那么我们可以通过梯度的反向传播来更新神经网络的参数 $w$，当 $w$ 收敛后，我们的就得到的近似的Q值计算方法，进而贪婪策略也就求出来了。</p>
<p>下面我们总结下DQN的算法流程，基于NIPS 2013 DQN。　　　　</p>
<ul>
<li>算法输入：迭代轮数 $T$，状态特征维度 $n$, 动作集 $A$, 步长 $α$，衰减因子 $γ$, 探索率 $ϵ$, Q网络结构, 批量梯度下降的样本数 $m$。</li>
<li>输出：Q网络参数
<ul>
<li>
<ol>
<li>随机初始化$Q$网络的所有参数 $w$，基于 $w$初始化所有的状态和动作对应的价值 $Q$。清空经验回放的集合 $D$。</li>
</ol>
</li>
<li>
<ol start="2">
<li>for i from 1 to T，进行迭代。</li>
</ol>
<ul>
<li>a) 初始化S为当前状态序列的第一个状态, 拿到其特征向量 $ϕ(S)$</li>
<li>b) 在Q网络中使用 $ϕ(S)$ 作为输入，得到Q网络的所有动作对应的Q值输出。用 $ϵ−$贪婪法在当前Q值输出中选择对应的动作 $A$</li>
<li>c) 在状态 $S$执行当前动作 $A$,得到新状态 $S&rsquo;$对应的特征向量 $ϕ(S&rsquo;)$和奖励 $R$,是否终止状态<code>is_end</code></li>
<li>d) 将 $\{ϕ(S),A,R,ϕ(S&rsquo;),is_end\}$这个五元组存入经验回放集合D</li>
<li>e) $S=S'$</li>
<li>f) 从经验回放集合 $D$ 中采样 $m$ 个样本 ${ϕ(Sj),Aj,Rj,ϕ(S′j),is_endj},j=1,2.,,,m$，计算当前目标Q值$y_j$：
<ul>
<li>$$\left.y_j=\left\{\begin{array}{ll}R_j&amp;is_end_j\mathrm{~}is\mathrm{~}true\\R_j+\gamma\max_{a^{\prime}}Q(\phi(S_j^{\prime}),A_j^{\prime},w)&amp;is_end_j\mathrm{~}is\mathrm{~}false\end{array}\right.\right.$$</li>
</ul>
</li>
<li>g) 使用均方差损失函数$\frac1m\sum_{i=1}^m(y_j-Q(\phi(S_j),A_j,w))^2$，通过神经网络的梯度反向传播来更新Q网络的所有参数 $w$</li>
<li>h) 如果$S&rsquo;$是终止状态，当前轮迭代完毕，否则转到步骤b)</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>注意，上述第二步的 $f$步和 $g$步的 $Q$值计算也都需要通过 $Q$网络计算得到。另外，实际应用中，为了算法较好的收敛，探索率 $ϵ$需要随着迭代的进行而变小。</p>
<h1 id="4-deep-q-learning实例">4. Deep Q-Learning实例</h1>
<p>下面我们用一个具体的例子来演示DQN的应用。这里使用了OpenAI Gym中的CartPole-v0游戏来作为我们算法应用。CartPole-v0游戏的介绍参见<a href="https://github.com/openai/gym/wiki/CartPole-v0"target="_blank" rel="external nofollow noopener noreferrer">这里<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>。它比较简单，基本要求就是控制下面的cart移动使连接在上面的pole保持垂直不倒。这个任务只有两个离散动作，要么向左用力，要么向右用力。而state状态就是这个cart的位置和速度， pole的角度和角速度，4维的特征。坚持到200分的奖励则为过关。</p>
<p>完整的代码参见github: <a href="https://github.com/ljpzzz/machinelearning/blob/master/reinforcement-learning/dqn.py"target="_blank" rel="external nofollow noopener noreferrer">https://github.com/ljpzzz/machinelearning/blob/master/reinforcement-learning/dqn.py<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>代码参考了知乎上的一个<a href="https://zhuanlan.zhihu.com/p/21477488"target="_blank" rel="external nofollow noopener noreferrer">DQN实例<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>，修改了代码中的一些错误，并用最新的Python3.6+Tensorflow1.8.0运行。要跑代码需要安装OpenAI的Gym库，使用<code>pip install gym</code>即可。</p>
<p>代码使用了一个三层的神经网络，输入层，一个隐藏层和一个输出层。下面我们看看关键部分的代码。</p>
<p>算法第2步的步骤b通过$ϵ−$贪婪法选择动作的代码如下，注意每次我们$ϵ−$贪婪法后都会减小$ϵ$值。</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">egreedy_action</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">Q_value</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">Q_value</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="n">feed_dict</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">state_input</span><span class="p">:[</span><span class="n">state</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">})[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="bp">self</span><span class="o">.</span><span class="n">epsilon</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">epsilon</span> <span class="o">-=</span> <span class="p">(</span><span class="n">INITIAL_EPSILON</span> <span class="o">-</span> <span class="n">FINAL_EPSILON</span><span class="p">)</span> <span class="o">/</span> <span class="mi">10000</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">action_dim</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">epsilon</span> <span class="o">-=</span> <span class="p">(</span><span class="n">INITIAL_EPSILON</span> <span class="o">-</span> <span class="n">FINAL_EPSILON</span><span class="p">)</span> <span class="o">/</span> <span class="mi">10000</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">Q_value</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>算法第2步的步骤c在状态S�执行当前动作A�的代码如下，这个交互是由Gym完成的。</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">  <span class="n">next_state</span><span class="p">,</span><span class="n">reward</span><span class="p">,</span><span class="n">done</span><span class="p">,</span><span class="n">_</span> <span class="o">=</span> <span class="n">env</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="n">action</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Define reward for agent</span>
</span></span><span class="line"><span class="cl">  <span class="n">reward</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">done</span> <span class="k">else</span> <span class="mf">0.1</span></span></span></code></pre></td></tr></table>
</div>
</div><p>算法第2步的步骤d保存经验回放数据的代码如下：</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">perceive</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">state</span><span class="p">,</span><span class="n">action</span><span class="p">,</span><span class="n">reward</span><span class="p">,</span><span class="n">next_state</span><span class="p">,</span><span class="n">done</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">one_hot_action</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">action_dim</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">one_hot_action</span><span class="p">[</span><span class="n">action</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="bp">self</span><span class="o">.</span><span class="n">replay_buffer</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">state</span><span class="p">,</span><span class="n">one_hot_action</span><span class="p">,</span><span class="n">reward</span><span class="p">,</span><span class="n">next_state</span><span class="p">,</span><span class="n">done</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">replay_buffer</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">REPLAY_SIZE</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">replay_buffer</span><span class="o">.</span><span class="n">popleft</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">replay_buffer</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">BATCH_SIZE</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">train_Q_network</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>算法第2步的步骤f,g计算目标Q值，并更新Q网络的代码如下：</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">train_Q_network</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="bp">self</span><span class="o">.</span><span class="n">time_step</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Step 1: obtain random minibatch from replay memory</span>
</span></span><span class="line"><span class="cl">  <span class="n">minibatch</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">replay_buffer</span><span class="p">,</span><span class="n">BATCH_SIZE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">state_batch</span> <span class="o">=</span> <span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">minibatch</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="n">action_batch</span> <span class="o">=</span> <span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">minibatch</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="n">reward_batch</span> <span class="o">=</span> <span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">minibatch</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="n">next_state_batch</span> <span class="o">=</span> <span class="p">[</span><span class="n">data</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">minibatch</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Step 2: calculate y</span>
</span></span><span class="line"><span class="cl">  <span class="n">y_batch</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">  <span class="n">Q_value_batch</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">Q_value</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="n">feed_dict</span><span class="o">=</span><span class="p">{</span><span class="bp">self</span><span class="o">.</span><span class="n">state_input</span><span class="p">:</span><span class="n">next_state_batch</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">BATCH_SIZE</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">done</span> <span class="o">=</span> <span class="n">minibatch</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">done</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">y_batch</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">reward_batch</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">y_batch</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">reward_batch</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">GAMMA</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">Q_value_batch</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="bp">self</span><span class="o">.</span><span class="n">optimizer</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">feed_dict</span><span class="o">=</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">y_input</span><span class="p">:</span><span class="n">y_batch</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">action_input</span><span class="p">:</span><span class="n">action_batch</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">state_input</span><span class="p">:</span><span class="n">state_batch</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们在每100轮迭代完后会去玩10次交互测试，计算10次的平均奖励。运行了代码后，我的3000轮迭代的输出如下：</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">episode: <span class="m">0</span> Evaluation Average Reward: 12.2
</span></span><span class="line"><span class="cl">episode: <span class="m">100</span> Evaluation Average Reward: 9.4
</span></span><span class="line"><span class="cl">episode: <span class="m">200</span> Evaluation Average Reward: 10.4
</span></span><span class="line"><span class="cl">episode: <span class="m">300</span> Evaluation Average Reward: 10.5
</span></span><span class="line"><span class="cl">episode: <span class="m">400</span> Evaluation Average Reward: 11.6
</span></span><span class="line"><span class="cl">episode: <span class="m">500</span> Evaluation Average Reward: 12.4
</span></span><span class="line"><span class="cl">episode: <span class="m">600</span> Evaluation Average Reward: 29.6
</span></span><span class="line"><span class="cl">episode: <span class="m">700</span> Evaluation Average Reward: 48.1
</span></span><span class="line"><span class="cl">episode: <span class="m">800</span> Evaluation Average Reward: 85.0
</span></span><span class="line"><span class="cl">episode: <span class="m">900</span> Evaluation Average Reward: 169.4
</span></span><span class="line"><span class="cl">episode: <span class="m">1000</span> Evaluation Average Reward: 200.0
</span></span><span class="line"><span class="cl">episode: <span class="m">1100</span> Evaluation Average Reward: 200.0
</span></span><span class="line"><span class="cl">episode: <span class="m">1200</span> Evaluation Average Reward: 200.0
</span></span><span class="line"><span class="cl">episode: <span class="m">1300</span> Evaluation Average Reward: 200.0
</span></span><span class="line"><span class="cl">episode: <span class="m">1400</span> Evaluation Average Reward: 200.0
</span></span><span class="line"><span class="cl">episode: <span class="m">1500</span> Evaluation Average Reward: 200.0
</span></span><span class="line"><span class="cl">episode: <span class="m">1600</span> Evaluation Average Reward: 200.0
</span></span><span class="line"><span class="cl">episode: <span class="m">1700</span> Evaluation Average Reward: 200.0
</span></span><span class="line"><span class="cl">episode: <span class="m">1800</span> Evaluation Average Reward: 200.0
</span></span><span class="line"><span class="cl">episode: <span class="m">1900</span> Evaluation Average Reward: 200.0
</span></span><span class="line"><span class="cl">episode: <span class="m">2000</span> Evaluation Average Reward: 200.0
</span></span><span class="line"><span class="cl">episode: <span class="m">2100</span> Evaluation Average Reward: 200.0
</span></span><span class="line"><span class="cl">episode: <span class="m">2200</span> Evaluation Average Reward: 200.0
</span></span><span class="line"><span class="cl">episode: <span class="m">2300</span> Evaluation Average Reward: 200.0
</span></span><span class="line"><span class="cl">episode: <span class="m">2400</span> Evaluation Average Reward: 200.0
</span></span><span class="line"><span class="cl">episode: <span class="m">2500</span> Evaluation Average Reward: 200.0
</span></span><span class="line"><span class="cl">episode: <span class="m">2600</span> Evaluation Average Reward: 200.0
</span></span><span class="line"><span class="cl">episode: <span class="m">2700</span> Evaluation Average Reward: 200.0
</span></span><span class="line"><span class="cl">episode: <span class="m">2800</span> Evaluation Average Reward: 200.0
</span></span><span class="line"><span class="cl">episode: <span class="m">2900</span> Evaluation Average Reward: 200.0</span></span></code></pre></td></tr></table>
</div>
</div><p>大概到第1000次迭代后，算法已经收敛，达到最高的200分。当然由于是$ϵ−$探索，每次前面的输出可能不同，但最后应该都可以收敛到200的分数。当然由于DQN不保证绝对的收敛，所以可能到了200分后还会有抖动。</p>
<h1 id="5-deep-q-learning小结">5. Deep Q-Learning小结　　　　</h1>
<p>DQN由于对价值函数做了近似表示，因此有了解决大规模强化学习问题的能力。但是DQN有个问题，就是它并不一定能保证Q网络的收敛，也就是说，我们不一定可以得到收敛后的Q网络参数。这会导致我们训练出的模型效果很差。</p>
<p>针对这个问题，衍生出了DQN的很多变种，比如Nature DQN(NIPS 2015), Double DQN，Dueling DQN等。这些我们在下一篇讨论。</p>
]]></description></item><item><title>强化学习笔记 [7] | 时序差分离线控制算法Q-Learning</title><link>https://jianye0428.github.io/posts/rl_learning_note_7/</link><pubDate>Fri, 23 Feb 2024 13:17:35 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/rl_learning_note_7/</guid><description><![CDATA[<h1 id="0-引言">0. 引言</h1>
<p>在<a href="https://www.cnblogs.com/pinard/p/9614290.html"target="_blank" rel="external nofollow noopener noreferrer">强化学习（六）时序差分在线控制算法SARSA<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>中我们讨论了时序差分的在线控制算法SARSA，而另一类时序差分的离线控制算法还没有讨论，因此本文我们关注于时序差分离线控制算法，主要是经典的Q-Learning算法。</p>
<p>Q-Learning这一篇对应Sutton书的第六章部分和UCL强化学习课程的第五讲部分。</p>
<h1 id="1-q-learning算法的引入">1. Q-Learning算法的引入　　　　</h1>
<p>Q-Learning算法是一种使用时序差分求解强化学习控制问题的方法，回顾下此时我们的控制问题可以表示为：给定强化学习的5个要素：状态集 $S$, 动作集 $A$, 即时奖励 $R$，衰减因子 $γ$, 探索率 $ϵ$, 求解最优的动作价值函数 $q∗$和最优策略 $π∗$。</p>
<p>这一类强化学习的问题求解<u>不需要环境的状态转化模型</u>，是不基于模型的强化学习问题求解方法。对于它的控制问题求解，和蒙特卡罗法类似，都是价值迭代，即通过价值函数的更新，来更新策略，通过策略来产生新的状态和即时奖励，进而更新价值函数。一直进行下去，直到价值函数和策略都收敛。</p>
<p>再回顾下时序差分法的控制问题，可以分为两类，一类是在线控制，即一直使用一个策略来更新价值函数和选择新的动作，比如我们上一篇讲到的SARSA, 而另一类是离线控制，会使用两个控制策略，一个策略用于选择新的动作，另一个策略用于更新价值函数。这一类的经典算法就是Q-Learning。</p>
<p>对于Q-Learning，我们会使用 $ϵ−$贪婪法来选择新的动作，这部分和SARSA完全相同。但是对于价值函数的更新，Q-Learning使用的是贪婪法，而不是SARSA的 $ϵ−$贪婪法。这一点就是SARSA和Q-Learning本质的区别。</p>
<h1 id="2-q-learning算法概述">2. Q-Learning算法概述</h1>
<p>Q-Learning算法的拓扑图如下图所示：</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">Q Learning 拓扑图</div>
</center>
<br>
<p>首先我们基于状态 $S$，用 $ϵ−$贪婪法选择到动作 $A$, 然后执行动作$A$，得到奖励 $R$，并进入状态 $S&rsquo;$，此时，如果是SARSA，会继续基于状态 $S&rsquo;$，用 $ϵ−$贪婪法选择 $A&rsquo;$,然后来更新价值函数。但是Q-Learning则不同。</p>
<p>对于Q-Learning，它基于状态 $S&rsquo;$，没有使用 $ϵ−$贪婪法选择 $A$，而是使用贪婪法选择 $A&rsquo;$，也就是说，选择使 $Q(S&rsquo;,a)$ 最大的 $a$ 作为 $A&rsquo;$来更新价值函数。用数学公式表示就是：</p>
<p>$$Q(S,A)=Q(S,A)+\alpha(R+\gamma\max_aQ(S^{\prime},a)-Q(S,A))$$</p>
<p>对应到上图中就是在图下方的三个黑圆圈动作中选择一个使 $Q(S&rsquo;,a)$最大的动作作为 $A&rsquo;$。</p>
<p>此时选择的动作只会参与价值函数的更新，不会真正的执行。价值函数更新后，新的执行动作需要基于状态 $S&rsquo;$，用 $ϵ−$贪婪法重新选择得到。这一点也和SARSA稍有不同。对于SARSA，价值函数更新使用的 $A&rsquo;$ 会作为下一阶段开始时候的执行动作。</p>
<p>下面我们对Q-Learning算法做一个总结。</p>
<h1 id="3-q-learning算法流程">3. Q-Learning算法流程</h1>
<p>下面我们总结下Q-Learning算法的流程。</p>
<ul>
<li>算法输入：迭代轮数 $T$，状态集 $S$, 动作集 $A$, 步长 $α$，衰减因子 $γ$, 探索率 $ϵ$,</li>
<li>输出: 所有的状态和动作对应的价值 $Q$
<ul>
<li>
<ol>
<li>随机初始化所有的状态和动作对应的价值Q�. 对于终止状态其Q�值初始化为0.</li>
</ol>
</li>
<li>
<ol start="2">
<li>for i from 1 to T，进行迭代。</li>
</ol>
<ul>
<li>a) 初始化 $S$ 为当前状态序列的第一个状态。</li>
<li>b) 用 $ϵ−$贪婪法在当前状态 $S$ 选择出动作 $A$</li>
<li>c) 在状态 $S$执行当前动作 $A$,得到新状态 $S&rsquo;$和奖励 $R$</li>
<li>d) 更新价值函数 $Q(S,A)$:
<ul>
<li>$$Q(S,A)+\alpha(R+\gamma\max_aQ(S^{\prime},a)-Q(S,A))$$</li>
</ul>
</li>
<li>e) $S=S'$</li>
<li>f) 如果$S&rsquo;$是终止状态，当前轮迭代完毕，否则转到步骤b)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="4-q-learning算法实例windy-gridworld">4. Q-Learning算法实例：Windy GridWorld</h1>
<p>我们还是使用和SARSA一样的例子来研究Q-Learning。如果对windy gridworld的问题还不熟悉，可以复习<a href="https://www.cnblogs.com/pinard/p/9614290.html"target="_blank" rel="external nofollow noopener noreferrer">强化学习（六）时序差分在线控制算法SARSA<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>第4节的第二段。</p>
<p>完整的代码参见github: <a href="https://github.com/ljpzzz/machinelearning/blob/master/reinforcement-learning/q_learning_windy_world.py"target="_blank" rel="external nofollow noopener noreferrer">https://github.com/ljpzzz/machinelearning/blob/master/reinforcement-learning/q_learning_windy_world.py<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>绝大部分代码和SARSA是类似的。这里我们可以重点比较和SARSA不同的部分。区别都在<code>episode()</code>这个函数里面。</p>
<p>首先是初始化的时候，我们只初始化状态 $S$,把 $A$ 的产生放到了while循环里面, 而回忆下SARSA会同时初始化状态 $S$ 和动作 $A$，再去执行循环。下面这段Q-Learning的代码对应我们算法的第二步步骤a和b：</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># play for an episode</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">episode</span><span class="p">(</span><span class="n">q_value</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># track the total time steps in this episode</span>
</span></span><span class="line"><span class="cl">  <span class="n">time</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># initialize state</span>
</span></span><span class="line"><span class="cl">  <span class="n">state</span> <span class="o">=</span> <span class="n">START</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="n">state</span> <span class="o">!=</span> <span class="n">GOAL</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># choose an action based on epsilon-greedy algorithm</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">binomial</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">EPSILON</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">action</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">ACTIONS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="n">values_</span> <span class="o">=</span> <span class="n">q_value</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="p">:]</span>
</span></span><span class="line"><span class="cl">      <span class="n">action</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">([</span><span class="n">action_</span> <span class="k">for</span> <span class="n">action_</span><span class="p">,</span> <span class="n">value_</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">values_</span><span class="p">)</span> <span class="k">if</span> <span class="n">value_</span> <span class="o">==</span> <span class="n">np</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">values_</span><span class="p">)])</span></span></span></code></pre></td></tr></table>
</div>
</div><p>接着我们会去执行动作 $A$,得到 $S&rsquo;$， 由于奖励不是终止就是-1，不需要单独计算。,这部分和SARSA的代码相同。对应我们Q-Learning算法的第二步步骤c：</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">next_state</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">action</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">step</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">action</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">state</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="n">action</span> <span class="o">==</span> <span class="n">ACTION_UP</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="nb">max</span><span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">WIND</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="mi">0</span><span class="p">),</span> <span class="n">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="k">elif</span> <span class="n">action</span> <span class="o">==</span> <span class="n">ACTION_DOWN</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="nb">max</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">WIND</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">WORLD_HEIGHT</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">0</span><span class="p">),</span> <span class="n">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="k">elif</span> <span class="n">action</span> <span class="o">==</span> <span class="n">ACTION_LEFT</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="nb">max</span><span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="n">WIND</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="mi">0</span><span class="p">),</span> <span class="nb">max</span><span class="p">(</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">  <span class="k">elif</span> <span class="n">action</span> <span class="o">==</span> <span class="n">ACTION_RIGHT</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="nb">max</span><span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="n">WIND</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="mi">0</span><span class="p">),</span> <span class="nb">min</span><span class="p">(</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">WORLD_WIDTH</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="kc">False</span></span></span></code></pre></td></tr></table>
</div>
</div><p>后面我们用贪婪法选择出最大的 $Q(S&rsquo;,a)$,并更新价值函数，最后更新当前状态 $S$。对应我们Q-Learning算法的第二步步骤d,e。注意SARSA这里是使用ϵ−�−贪婪法，而不是贪婪法。同时SARSA会同时更新状态S�和动作A�,而Q-Learning只会更新当前状态S�。</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">values_</span> <span class="o">=</span> <span class="n">q_value</span><span class="p">[</span><span class="n">next_state</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">next_state</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="p">:]</span>
</span></span><span class="line"><span class="cl"><span class="n">next_action</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">([</span><span class="n">action_</span> <span class="k">for</span> <span class="n">action_</span><span class="p">,</span> <span class="n">value_</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">values_</span><span class="p">)</span> <span class="k">if</span> <span class="n">value_</span> <span class="o">==</span> <span class="n">np</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">values_</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Sarsa update</span>
</span></span><span class="line"><span class="cl"><span class="n">q_value</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">action</span><span class="p">]</span> <span class="o">+=</span> \
</span></span><span class="line"><span class="cl">    <span class="n">ALPHA</span> <span class="o">*</span> <span class="p">(</span><span class="n">REWARD</span> <span class="o">+</span> <span class="n">q_value</span><span class="p">[</span><span class="n">next_state</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">next_state</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">next_action</span><span class="p">]</span> <span class="o">-</span> <span class="n">q_value</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">action</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">state</span> <span class="o">=</span> <span class="n">next_state</span></span></span></code></pre></td></tr></table>
</div>
</div><p>跑完完整的代码，大家可以很容易得到这个问题的最优解，进而得到在每个格子里的最优贪婪策略。</p>
<h1 id="5-sarsa-vs-q-learning">5. SARSA vs Q-Learning</h1>
<p>现在SARSA和Q-Learning算法我们都讲完了，那么作为时序差分控制算法的两种经典方法吗，他们都有说明特点，各自适用于什么样的场景呢？</p>
<p>Q-Learning直接学习的是 <font color=red>最优策略</font>，而SARSA<font color=red>在学习最优策略的同时还在做探索</font>。这导致我们在学习最优策略的时候，如果用SARSA，为了保证收敛，需要制定一个策略，使 $ϵ−$贪婪法的超参数 $ϵ$在迭代的过程中逐渐变小。Q-Learning没有这个烦恼。</p>
<p>另外一个就是Q-Learning直接学习最优策略，但是最优策略会依赖于训练中产生的一系列数据，所以<font color=red>受样本数据的影响较大</font>，因此受到训练数据方差的影响很大，甚至会影响Q函数的收敛。Q-Learning的深度强化学习版Deep Q-Learning也有这个问题。</p>
<p>在学习过程中，SARSA在收敛的过程中鼓励探索，这样学习过程会比较平滑，不至于过于激进，导致出现像Q-Learning可能遇到一些特殊的最优“陷阱”。比如经典的强化学习问题&quot;Cliff Walk&quot;。</p>
<p>在实际应用中，如果我们是在模拟环境中训练强化学习模型，推荐使用Q-Learning，如果是 <strong><font color=red>在线生产环境</font></strong> 中训练模型，则推荐使用 <strong><font color=red>SARSA</font></strong>。</p>
<h1 id="6-q-learning结语">6. Q-Learning结语　　　　　　　　</h1>
<p>对于Q-Learning和SARSA这样的时序差分算法，对于小型的强化学习问题是非常灵活有效的，但是在大数据时代，异常复杂的状态和可选动作，使Q-Learning和SARSA要维护的Q表异常的大，甚至远远超出内存，这限制了时序差分算法的应用场景。在深度学习兴起后，基于深度学习的强化学习开始占主导地位，因此从下一篇开始我们开始讨论深度强化学习的建模思路。</p>
]]></description></item><item><title>RL学习笔记 [5] | 用时序差分法（TD）求解</title><link>https://jianye0428.github.io/posts/rl_learning_note_5/</link><pubDate>Thu, 22 Feb 2024 17:25:21 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/rl_learning_note_5/</guid><description><![CDATA[<h1 id="0-引言">0 引言</h1>
<p>在<a href="https://www.cnblogs.com/pinard/p/9492980.html"target="_blank" rel="external nofollow noopener noreferrer">强化学习（四）用蒙特卡罗法（MC）求解<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>中，我们讲到了使用蒙特卡罗法来求解强化学习问题的方法，虽然蒙特卡罗法很灵活，不需要环境的状态转化概率模型，但是它需要所有的采样序列都是经历完整的状态序列。如果我们没有完整的状态序列，那么就无法使用蒙特卡罗法求解了。本文我们就来讨论可以不使用完整状态序列求解强化学习问题的方法：时序差分(Temporal-Difference, TD)。</p>
<p>时序差分这一篇对应Sutton书的第六章部分和UCL强化学习课程的第四讲部分，第五讲部分。</p>
<h1 id="1-时序差分td简介">1. 时序差分TD简介</h1>
<p>时序差分法和蒙特卡罗法类似，都是<strong>不基于模型的强化学习问题</strong>求解方法。所以在上一篇定义的不基于模型的强化学习控制问题和预测问题的定义，在这里仍然适用。</p>
<p>预测问题：即给定强化学习的5个要素：状态集 $S$, 动作集 $A$, 即时奖励 $R$，衰减因子 $γ$, 给定策略 $π$， 求解该策略的状态价值函数 $v(π)$</p>
<p>控制问题：也就是求解最优的价值函数和策略。给定强化学习的5个要素：状态集 $S$, 动作集 $A$, 即时奖励 $R$，衰减因子 $γ$, 探索率 $ϵ$, 求解最优的动作价值函数 $q∗$ 和最优策略 $π∗$　</p>
<p>回顾蒙特卡罗法中计算状态收获的方法是：</p>
<p>$$G_t=R_{t+1}+\gamma R_{t+2}+\gamma^2R_{t+3}+\ldots\gamma^{T-t-1}R_T$$</p>
<p>而对于时序差分法来说，我们没有完整的状态序列，只有部分的状态序列，那么如何可以近似求出某个状态的收获呢？回顾<a href="https://www.cnblogs.com/pinard/p/9426283.html"target="_blank" rel="external nofollow noopener noreferrer">强化学习（二）马尔科夫决策过程(MDP)<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>中的贝尔曼方程：</p>
<p>$$v_\pi(s)=\mathbb{E}_\pi(R_{t+1}+\gamma v_\pi(S_{t+1})|S_t=s)$$</p>
<p>这启发我们可以用 $R_{t+1}+\gamma v(S_{t+1})$ 来近似的代替收获 $G_t$,一般我们把 $R_{t+1}+\gamma V(S_{t+1})$ 称为TD目标值。$R_{t+1}+\gamma V(S_{t+1})-V(S_t)$ 称为TD误差，将用TD目标值近似代替收获 $G(t)$ 的过程称为引导(bootstrapping)。这样我们只需要两个连续的状态与对应的奖励，就可以尝试求解强化学习问题了。</p>
<p>现在我们有了自己的近似收获 $G_t$ 的表达式，那么就可以去求解时序差分的预测问题和控制问题了。</p>
<h1 id="2-时序差分td的预测问题求解">2. 时序差分TD的预测问题求解</h1>
<p>时序差分的预测问题求解和蒙特卡罗法类似，但是主要有两个不同点。一是收获 $G_t$ 的表达式不同，时序差分 $G(t)$ 的表达式为：</p>
<p>$$G(t)=R_{t+1}+\gamma V(S_{t+1})$$</p>
<p>二是迭代的式子系数稍有不同，回顾蒙特卡罗法的迭代式子是：</p>
<p>$$V(S_t)=V(S_t)+\frac1{N(S_t)}(G_t-V(S_t))$$</p>
<p>由于在时序差分我们没有完整的序列，也就没有对应的次数 $N(S_t)$ ,一般就用一个[0,1]的系数 $α$ 代替。这样时序差分的价值函数迭代式子是：</p>
<p>$$V(S_t)=V(S_t)+\alpha(G_t-V(S_t)) \\
Q(S_t,A_t)=Q(S_t,A_t)+\alpha(G_t-Q(S_t,A_t)) $$</p>
<p>这里我们用一个简单的例子来看看蒙特卡罗法和时序差分法求解预测问题的不同。</p>
<p>假设我们的强化学习问题有A,B两个状态，模型未知，不涉及策略和行为。只涉及状态转化和即时奖励。一共有8个完整的状态序列如下：</p>
<p>　　① A,0,B,0 ②B,1 ③B,1 ④ B,1 ⑤ B,1 ⑥B,1 ⑦B,1 ⑧B,0</p>
<p>只有第一个状态序列是有状态转移的，其余7个只有一个状态。设置衰减因子 $γ=1$。</p>
<p>首先我们按蒙特卡罗法来求解预测问题。由于只有第一个序列中包含状态A，因此A的价值仅能通过第一个序列来计算，也就等同于计算该序列中状态A的收获：</p>
<p>$$V(A)=G(A)=R_A+\gamma R_B=0$$</p>
<p>对于B，则需要对其在8个序列中的收获值来平均，其结果是6/8。</p>
<p><strong>再来看看时序差分法求解的过程</strong>。其收获是在计算状态序列中某状态价值时是应用其后续状态的预估价值来计算的，对于B来说，它总是终止状态，没有后续状态，因此它的价值直接用其在8个序列中的收获值来平均，其结果是6/8。</p>
<p>对于A，只在第一个序列出现，它的价值为：</p>
<p>$$V(A)=R_A+\gamma V(B)=\frac68$$</p>
<p>从上面的例子我们也可以看到蒙特卡罗法和时序差分法求解预测问题的区别。</p>
<p>一是时序差分法在知道结果之前就可以学习，也可以在没有结果时学习，还可以在持续进行的环境中学习，而蒙特卡罗法则要等到最后结果才能学习，时序差分法可以更快速灵活的更新状态的价值估计，这在某些情况下有着非常重要的实际意义。</p>
<p>二是时序差分法在更新状态价值时使用的是TD 目标值，即基于即时奖励和下一状态的预估价值来替代当前状态在状态序列结束时可能得到的收获，是当前状态价值的有偏估计，而蒙特卡罗法则使用实际的收获来更新状态价值，是某一策略下状态价值的无偏估计，这一点蒙特卡罗法占优。</p>
<p>三是虽然时序差分法得到的价值是有偏估计，但是其方差却比蒙特卡罗法得到的方差要低，且对初始值敏感，通常比蒙特卡罗法更加高效。</p>
<p>从上面的描述可以看出时序差分法的优势比较大，因此现在主流的强化学习求解方法都是基于时序差分的。后面的文章也会主要基于时序差分法来扩展讨论。</p>
<h1 id="3-n步时序差分">3. n步时序差分</h1>
<p>在第二节的时序差分法中，我们使用了用 $R_{t+1}+\gamma v(S_{t+1})$ 来近似的代替收获 $G_t$。即向前一步来近似我们的收获 $G_{t}$,那么能不能向前两步呢？当然可以，这时我们的收获 $G_t$ 的近似表达式为：</p>
<p>$$G_t^{(2)}=R_{t+1}+\gamma R_{t+2}+\gamma^2V(S_{t+2})$$</p>
<p>从两步，到三步，再到n步，我们可以归纳出n步时序差分收获 $G^{(n)}_t$表达式为：$$G_t^{(n)}=R_{t+1}+\gamma R_{t+2}+\ldots+\gamma^{n-1}R_{t+n}+\gamma^nV(S_{t+n})$$</p>
<p>当n越来越大，趋于无穷，或者说趋于使用完整的状态序列时，n步时序差分就等价于蒙特卡罗法了。</p>
<p>对于n步时序差分来说，和普通的时序差分的区别就在于收获的计算方式的差异。那么既然有这个n步的说法，那么n到底是多少步好呢？如何衡量n的好坏呢？我们在下一节讨论。</p>
<h1 id="4-tdλ">4. TD(λ)</h1>
<p>n步时序差分选择多少步数作为一个较优的计算参数是需要尝试的超参数调优问题。为了能在不增加计算复杂度的情况下综合考虑所有步数的预测，我们引入了一个新[0,1]的参数 $\lambda$,定义入—收获是 $n$ 从 $1$ 到 $\infty$ 所有步的收获乘以权重的和。每一步的权重是 $(1-\lambda)\lambda^{n-1}$,这样 $\lambda-$收获的计算公式表示为:</p>
<p>$$G_t^\lambda=(1-\lambda)\sum_{n=1}^\infty\lambda^{n-1}G_t^{(n)}$$</p>
<p>进而我们可以得到 $TD(λ)$ 的价值函数的迭代公式：</p>
<p>$$V(S_t)=V(S_t)+\alpha(G_t^\lambda-V(S_t)) \\
Q(S_t,A_t)=Q(S_t,A_t)+\alpha(G_t^\lambda-Q(S_t,A_t)) $$</p>
<p>每一步收获的权重定义为 $(1−λ)λ^{n−1}$ 的原因是什么呢？其图像如下图所示，可以看到随着n的增大，其第n步收获的权重呈几何级数的衰减。当在T时刻到达终止状态时，未分配的权重全部给予终止状态的实际收获值。这样可以使一个完整的状态序列中所有的n步收获的权重加起来为1，离当前状态越远的收获其权重越小。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">TD(λ)</div>
</center>
<br>
<p>从前向来看 $TD(λ)$， 一个状态的价值 $V(St)$由 $G_t$得到，而Gt��又间接由所有后续状态价值计算得到，因此可以认为更新一个状态的价值需要知道所有后续状态的价值。也就是说，必须要经历完整的状态序列获得包括终止状态的每一个状态的即时奖励才能更新当前状态的价值。这和蒙特卡罗法的要求一样，因此TD(λ)��(�)有着和蒙特卡罗法一样的劣势。当 $λ=0$ 时,就是第二节讲到的普通的时序差分法，当 $λ=1$ 时,就是蒙特卡罗法。</p>
<p>从反向来看 $TD(λ)$，它可以分析我们状态对后续状态的影响。比如老鼠在依次连续接受了3 次响铃和1 次亮灯信号后遭到了电击，那么在分析遭电击的原因时，到底是响铃的因素较重要还是亮灯的因素更重要呢？如果把老鼠遭到电击的原因认为是之前接受了较多次数的响铃，则称这种归因为频率启发(frequency heuristic) 式；而把电击归因于最近少数几次状态的影响，则称为就近启发(recency heuristic) 式。</p>
<p>如果给每一个状态引入一个数值：效用(eligibility, E) 来表示该状态对后续状态的影响，就可以同时利用到上述两个启发。而所有状态的效用值总称为效用迹(eligibility traces,ES)。定义为：</p>
<p>$$ E_0(s)=0 \\ \left.E_t(s)=\gamma\lambda E_{t-1}(s)+1(S_t=s)=\left\{\begin{array}{ll}0&amp;t&lt;k\\(\gamma\lambda)^{t-k}&amp;t\geq k\end{array}\right.\right.,\quad s.t.\quad\lambda,\gamma\in[0,1],s\textit{ is visited once at time k}$$</p>
<p>此时我们$TD(λ)$的价值函数更新式子可以表示为：</p>
<p>$$\delta_t=R_{t+1}+\gamma v(S_{t+1})-V(S_t)\\V(S_t)=V(S_t)+\alpha\delta_tE_t(s)$$</p>
<p>也许有人会问，这前向的式子和反向的式子看起来不同啊，是不是不同的逻辑呢？其实两者是等价的。现在我们从前向推导一下反向的更新式子。</p>
<p>$$\begin{aligned}
G_t^\lambda-V(S_t)&amp; =-V(S_t)+(1-\lambda)\lambda^0(R_{t+1}+\gamma V(S_{t+1})) &amp;&amp; \text{(1)}  \\
&amp;+(1-\lambda)\lambda^1(R_{t+1}+\gamma R_{t+2}+\gamma^2V(S_{t+2}))&amp;&amp; (2)  \\
&amp;+(1-\lambda)\lambda^2(R_{t+1}+\gamma R_{t+2}+\gamma^2R_{t+3}+\gamma^3V(S_{t+3}))&amp;&amp; (3)  \\
&amp;+\ldots &amp;&amp; \text{(4)}  \\
&amp;=-V(S_t)+(\gamma\lambda)^0(R_{t+1}+\gamma V(S_{t+1})-\gamma\lambda V(S_{t+1}))&amp;&amp; (5)  \\
&amp;+(\gamma\lambda)^1(R_{t+2}+\gamma V(S_{t+2})-\gamma\lambda V(S_{t+2}))&amp;&amp; \text{(6)}  \\
&amp;+(\gamma\lambda)^2(R_{t+3}+\gamma V(S_{t+3})-\gamma\lambda V(S_{t+3}))&amp;&amp; \text{(7)}  \\
&amp;\begin{array}{c}+\ldots\end{array}&amp;&amp; \text{(8)}  \\
&amp;=(\gamma\lambda)^0(R_{t+1}+\gamma V(S_{t+1})-V(S_t))&amp;&amp; \left(9\right)  \\
&amp;+(\gamma\lambda)^1(R_{t+2}+\gamma V(S_{t+2})-V(S_{t+1}))&amp;&amp; \text{(10)}  \\
&amp;+(\gamma\lambda)^2(R_{t+3}+\gamma V(S_{t+3})-V(S_{t+2}))&amp;&amp; (11)  \\
&amp;\begin{array}{c}+\ldots\end{array}&amp;&amp; (12)  \\
&amp;=\delta_t+\gamma\lambda\delta_{t+1}+(\gamma\lambda)^2\delta_{t+2}+\ldots &amp;&amp; (13)
\end{aligned}$$</p>
<p>可以看出前向TD误差和反向的TD误差实际上一致的。</p>
<h1 id="5-时序差分的控制问题求解">5. 时序差分的控制问题求解</h1>
<p>现在我们回到普通的时序差分，来看看它控制问题的求解方法。回想上一篇蒙特卡罗法在线控制的方法，我们使用的是$ϵ−$贪婪法来做价值迭代。对于时序差分，我们也可以用$ϵ−$贪婪法来价值迭代，和蒙特卡罗法在线控制的区别主要只是在于收获的计算方式不同。时序差分的在线控制(on-policy)算法最常见的是SARSA算法，我们在下一篇单独讲解。</p>
<p>而除了在线控制，我们还可以做离线控制(off-policy)，离线控制和在线控制的区别主要在于在线控制一般只有一个策略(最常见的是$ϵ−$贪婪法)。而离线控制一般有两个策略，其中一个策略(最常见的是$ϵ−$贪婪法)用于选择新的动作，另一个策略(最常见的是贪婪法)用于更新价值函数。时序差分的离线控制算法最常见的是Q-Learning算法，我们在下下篇单独讲解。</p>
<h1 id="6-时序差分小结">6. 时序差分小结</h1>
<p>时序差分和蒙特卡罗法比它更加灵活，学习能力更强，因此是目前主流的强化学习求解问题的方法，现在绝大部分强化学习乃至深度强化学习的求解都是以时序差分的思想为基础的。因此后面我们会重点讨论。</p>
<p>下一篇我们会讨论时序差分的在线控制算法SARSA。</p>
]]></description></item><item><title>RL学习笔记 [6] | 时序差分在线控制算法SARSA</title><link>https://jianye0428.github.io/posts/rl_learning_note_6/</link><pubDate>Thu, 22 Feb 2024 16:29:33 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/rl_learning_note_6/</guid><description><![CDATA[<h1 id="0-引言">0. 引言</h1>
<p>在<a href="https://www.cnblogs.com/pinard/p/9529828.html"target="_blank" rel="external nofollow noopener noreferrer">强化学习（五）用时序差分法（TD）求解<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>中，我们讨论了用时序差分来求解强化学习预测问题的方法，但是对控制算法的求解过程没有深入，本文我们就对时序差分的在线控制算法SARSA做详细的讨论。</p>
<p>SARSA这一篇对应Sutton书的第六章部分和UCL强化学习课程的第五讲部分。</p>
<h1 id="1-sarsa算法的引入">1. SARSA算法的引入</h1>
<p>SARSA算法是一种使用时序差分求解强化学习控制问题的方法，回顾下此时我们的控制问题可以表示为：给定强化学习的5个要素：状态集 $S$, 动作集 $A$, 即时奖励 $R$，衰减因子 $γ$, 探索率 $ϵ$, 求解最优的动作价值函数 $q∗$ 和最优策略 $π∗$。</p>
<p>这一类强化学习的问题求解不需要环境的状态转化模型，是<strong>不基于模型的强化学习问题</strong>求解方法。对于它的控制问题求解，和蒙特卡罗法类似，都是价值迭代，即通过价值函数的更新，来更新当前的策略，再通过新的策略，来产生新的状态和即时奖励，进而更新价值函数。一直进行下去，直到价值函数和策略都收敛。</p>
<p>再回顾下时序差分法的控制问题，可以分为两类，一类是在线控制，即一直使用一个策略来更新价值函数和选择新的动作。而另一类是离线控制，会使用两个控制策略，一个策略用于选择新的动作，另一个策略用于更新价值函数。</p>
<p>我们的SARSA算法，属于在线控制这一类，即一直使用一个策略来更新价值函数和选择新的动作，而这个策略是 $ϵ−$贪婪法，在<a href="https://www.cnblogs.com/pinard/p/9492980.html"target="_blank" rel="external nofollow noopener noreferrer">强化学习（四）用蒙特卡罗法（MC）求解<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>中，我们对于 $ϵ−$贪婪法有详细讲解，即通过设置一个较小的 $ϵ$ 值，使用 $1−ϵ$ 的概率贪婪地选择目前认为是最大行为价值的行为，而用 $ϵ$ 的概率随机的从所有 m 个可选行为中选择行为。用公式可以表示为：</p>
<p>$$\left.\pi(a|s)=\left\{\begin{array}{ll}\epsilon/m+1-\epsilon&amp;if\mathrm{~}a^*=\arg\max_{a\in A}Q(s,a)\\\epsilon/m&amp;else\end{array}\right.\right.$$</p>
<p>π(a|s)={ϵ/m+1−ϵifa∗=argmaxa∈AQ(s,a)ϵ/melse�(�|�)={�/�+1−����∗=arg⁡max�∈��(�,�)�/�����</p>
<h1 id="2-sarsa算法概述">2. SARSA算法概述</h1>
<p>作为SARSA算法的名字本身来说，它实际上是由 $S,A,R,S,A$ 几个字母组成的。而 $S,A,R$ 分别代表状态（State），动作(Action),奖励(Reward)，这也是我们前面一直在使用的符号。这个流程体现在下图：</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">SARSA Transition</div>
</center>
<br>
<p>在迭代的时候，我们首先基于 $ϵ−$贪婪法在当前状态 $S$ 选择一个动作 $A$ ，这样系统会转到一个新的状态 $S′$, 同时给我们一个即时奖励 $R$ , 在新的状态 $S′$，我们会基于 $ϵ−$贪婪法在状态 $S′$ 选择一个动作 $A′$，但是注意这时候我们并不执行这个动作 $A′$，只是用来更新的我们的价值函数，价值函数的更新公式是：</p>
<p>$$Q(S,A)=Q(S,A)+\alpha(R+\gamma Q(S^{\prime},A^{\prime})-Q(S,A))$$</p>
<p>其中，$γ$ 是衰减因子，$α$ 是迭代步长。这里和蒙特卡罗法求解在线控制问题的迭代公式的区别主要是，收获 $G_t$的表达式不同，对于时序差分，收获 $G_t$的表达式是 $R+\gamma Q(S&rsquo;,A&rsquo;)$ 。这个价值函数更新的贝尔曼公式我们在<a href="https://www.cnblogs.com/pinard/p/9529828.html"target="_blank" rel="external nofollow noopener noreferrer">强化学习（五）用时序差分法（TD）求解<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>第2节有详细讲到。</p>
<p>除了收获 $G_t$的表达式不同，SARSA算法和蒙特卡罗在线控制算法基本类似。</p>
<h1 id="3-sarsa算法流程">3. SARSA算法流程</h1>
<p>下面我们总结下SARSA算法的流程。</p>
<ul>
<li>算法输入：迭代轮数 $T$，状态集 $S$, 动作集 $A$, 步长 $α$，衰减因子 $γ$, 探索率 $ϵ$,</li>
<li>输出：所有的状态和动作对应的价值 $Q$</li>
<li>
<ol>
<li>随机初始化所有的状态和动作对应的价值Q�. 对于终止状态其Q�值初始化为0.</li>
</ol>
</li>
<li>
<ol start="2">
<li>for i from 1 to T，进行迭代。</li>
</ol>
<ul>
<li>a) 初始化 $S$ 为当前状态序列的第一个状态。设置 $A$ 为 $ϵ−$贪婪法在当前状态$S$ 选择的动作。</li>
<li>b) 在状态 $S$ 执行当前动作 $A$ ,得到新状态 $S′$ 和 奖励 $R$</li>
<li>c) 用 $\epsilon-$贪婪法在状态 $S&rsquo;$ 选择新的动作 $A'$</li>
<li>d) 更新价值函数 $Q(S,A)$:
<ul>
<li>$$Q(S,A)=Q(S,A)+\alpha(R+\gamma Q(S^{\prime},A^{\prime})-Q(S,A))$$</li>
</ul>
</li>
<li>e) $S=S′$, $A=A′$</li>
<li>f) 如果 $S′$ 是终止状态，当前轮迭代完毕，否则转到步骤b)</li>
</ul>
</li>
</ul>
<p>这里有一个要注意的是，步长 $α$一般需要随着迭代的进行逐渐变小，这样才能保证动作价值函数 $Q$ 可以收敛。当 $Q$ 收敛时，我们的策略 $ϵ−$贪婪法也就收敛了。</p>
<h1 id="4-sarsa算法实例windy-gridworld">4. SARSA算法实例：Windy GridWorld</h1>
<p>下面我们用一个著名的实例Windy GridWorld来研究SARSA算法。</p>
<p>如下图一个10×7的长方形格子世界，标记有一个起始位置 S 和一个终止目标位置 G，格子下方的数字表示对应的列中一定强度的风。当个体进入该列的某个格子时，会按图中箭头所示的方向自动移动数字表示的格数，借此来模拟世界中风的作用。同样格子世界是有边界的，个体任意时刻只能处在世界内部的一个格子中。个体并不清楚这个世界的构造以及有风，也就是说它不知道格子是长方形的，也不知道边界在哪里，也不知道自己在里面移动移步后下一个格子与之前格子的相对位置关系，当然它也不清楚起始位置、终止目标的具体位置。但是个体会记住曾经经过的格子，下次在进入这个格子时，它能准确的辨认出这个格子曾经什么时候来过。格子可以执行的行为是朝上、下、左、右移动一步，每移动一步只要不是进入目标位置都给予一个 -1 的惩罚，直至进入目标位置后获得奖励 0 同时永久停留在该位置。现在要求解的问题是个体应该遵循怎样的策略才能尽快的从起始位置到达目标位置。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">Windy GridWorld</div>
</center>
<br>
<p>逻辑并不复杂，完整的代码在<a href="https://github.com/ljpzzz/machinelearning/blob/master/reinforcement-learning/sarsa_windy_world.py"target="_blank" rel="external nofollow noopener noreferrer">我的github<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>。这里我主要看一下关键部分的代码。</p>
<p>算法中第2步步骤a,初始化 $S$,使用 $ϵ−$贪婪法在当前状态 $S$ 选择的动作的过程：</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># initialize state</span>
</span></span><span class="line"><span class="cl"><span class="n">state</span> <span class="o">=</span> <span class="n">START</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># choose an action based on epsilon-greedy algorithm</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">binomial</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">EPSILON</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">action</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">ACTIONS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">values_</span> <span class="o">=</span> <span class="n">q_value</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="p">:]</span>
</span></span><span class="line"><span class="cl">  <span class="n">action</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">([</span><span class="n">action_</span> <span class="k">for</span> <span class="n">action_</span><span class="p">,</span> <span class="n">value_</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">values_</span><span class="p">)</span> <span class="k">if</span> <span class="n">value_</span> <span class="o">==</span> <span class="n">np</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">values_</span><span class="p">)])</span></span></span></code></pre></td></tr></table>
</div>
</div><p>算法中第2步步骤b,在状态S�执行当前动作A�,得到新状态S′�′的过程，由于奖励不是终止就是-1，不需要单独计算：</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">step</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">action</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">state</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="n">action</span> <span class="o">==</span> <span class="n">ACTION_UP</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="nb">max</span><span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">WIND</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="mi">0</span><span class="p">),</span> <span class="n">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="k">elif</span> <span class="n">action</span> <span class="o">==</span> <span class="n">ACTION_DOWN</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="nb">max</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">WIND</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">WORLD_HEIGHT</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">0</span><span class="p">),</span> <span class="n">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="k">elif</span> <span class="n">action</span> <span class="o">==</span> <span class="n">ACTION_LEFT</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="nb">max</span><span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="n">WIND</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="mi">0</span><span class="p">),</span> <span class="nb">max</span><span class="p">(</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">  <span class="k">elif</span> <span class="n">action</span> <span class="o">==</span> <span class="n">ACTION_RIGHT</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="nb">max</span><span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="n">WIND</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="mi">0</span><span class="p">),</span> <span class="nb">min</span><span class="p">(</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">WORLD_WIDTH</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="kc">False</span></span></span></code></pre></td></tr></table>
</div>
</div><p>算法中第2步步骤c,用 $ϵ−$贪婪法在状态 $S&rsquo;$选择新的动作 $A′$的过程：</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">next_state</span> <span class="o">=</span> <span class="n">step</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">action</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">binomial</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">EPSILON</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">next_action</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">ACTIONS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">values_</span> <span class="o">=</span> <span class="n">q_value</span><span class="p">[</span><span class="n">next_state</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">next_state</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="p">:]</span>
</span></span><span class="line"><span class="cl">  <span class="n">next_action</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">([</span><span class="n">action_</span> <span class="k">for</span> <span class="n">action_</span><span class="p">,</span> <span class="n">value_</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">values_</span><span class="p">)</span> <span class="k">if</span> <span class="n">value_</span> <span class="o">==</span> <span class="n">np</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">values_</span><span class="p">)])</span></span></span></code></pre></td></tr></table>
</div>
</div><p>算法中第2步步骤d,e, 更新价值函数 $Q(S,A)$ 以及更新当前状态动作的过程：</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Sarsa update</span>
</span></span><span class="line"><span class="cl"><span class="n">q_value</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">action</span><span class="p">]</span> <span class="o">+=</span> \
</span></span><span class="line"><span class="cl">  <span class="n">ALPHA</span> <span class="o">*</span> <span class="p">(</span><span class="n">REWARD</span> <span class="o">+</span> <span class="n">q_value</span><span class="p">[</span><span class="n">next_state</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">next_state</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">next_action</span><span class="p">]</span> <span class="o">-</span> <span class="n">q_value</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">action</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">state</span> <span class="o">=</span> <span class="n">next_state</span>
</span></span><span class="line"><span class="cl"><span class="n">action</span> <span class="o">=</span> <span class="n">next_action</span></span></span></code></pre></td></tr></table>
</div>
</div><p>代码很简单，相信大家对照算法，跑跑代码，可以很容易得到这个问题的最优解，进而搞清楚SARSA算法的整个流程。</p>
<h1 id="5-sarsaλ">5. SARSA(λ)</h1>
<p>在<a href="https://www.cnblogs.com/pinard/p/9529828.html"target="_blank" rel="external nofollow noopener noreferrer">强化学习（五）用时序差分法（TD）求解<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>中我们讲到了多步时序差分 $TD(λ)$ 的价值函数迭代方法，那么同样的，对应的多步时序差分在线控制算法，就是我们的 $SARSA(λ)$。</p>
<p>$TD(\lambda)$有前向和后向两种价值函数迭代方式，当然它们是等价的。在控制问题的求解时，基于反向认识的 $SARSA(\lambda)$算法将可以有效地在线学习，数据学习完即可丢弃。因此 $SARSA(\lambda)$算法默认都是基于反向来进行价值函数迭代。</p>
<p>在上一篇我们讲到了$TD(\lambda)$状态价值函数的反向迭代，即：</p>
<p>$$\begin{gathered}\delta_t=R_{t+1}+\gamma V(S_{t+1})-V(S_t)\\V(S_t)=V(S_t)+\alpha\delta_tE_t(S)\end{gathered}$$</p>
<p>对应的动作价值函数的迭代公式可以找样写出，即：</p>
<p>$$\begin{gathered}\delta_t=R_{t+1}+\gamma Q(S_{t+1},A_{t+1})-Q(S_t,A_t)\\Q(S_t,A_t)=Q(S_t,A_t)+\alpha\delta_tE_t(S,A)\end{gathered}$$</p>
<p>除了状态价值函数 $Q(S,A)$ 的更新方式，多步参数 $λ$ 以及反向认识引入的效用迹 $E(S,A)$ ，其余算法思想和 $SARSA$ 类似。这里我们总结下 $SARSA(λ)$的算法流程。　　　</p>
<ul>
<li>算法输入：迭代轮数 $T$，状态集 $S$, 动作集 $A$, 步长 $α$，衰减因子 $γ$, 探索率$ϵ$, 多步参数$λ$</li>
<li>输出：所有的状态和动作对应的价值$Q$</li>
<li>
<ol>
<li>随机初始化所有的状态和动作对应的价值 $Q$. 对于终止状态其 $Q$值初始化为0.</li>
</ol>
</li>
<li>
<ol start="2">
<li>for i from 1 to T，进行迭代。</li>
</ol>
<ul>
<li>a) 初始化所有状态动作的效用迹 $E$ 为0，初始化S为当前状态序列的第一个状态。设置$A$为 $ϵ−$贪婪法在当前状态 $S$选择的动作。</li>
<li>b) 在状态 $S$ 执行当前动作 $A$,得到新状态 $S&rsquo;$ 和奖励 $R$</li>
<li>c) 用$ϵ−$贪婪法在状态 $S&rsquo;$ 选择新的动作 $A'$</li>
<li>d) 更新效用迹函数 $E(S,A)$和TD误差 $δ$:
<ul>
<li>$$\begin{gathered}E(S,A)=E(S,A)+1\\\delta=R_{t+1}+\gamma Q(S_{t+1},A_{t+1})-Q(S_t,A_t)\end{gathered}$$</li>
</ul>
</li>
<li>e) 对当前序列所有出现的状态s和对应动作 $a$, 更新价值函数 $Q(s,a)$和效用迹函数 $E(s,a)$:
<ul>
<li>$$\begin{gathered}Q(s,a)=Q(s,a)+\alpha\delta E(s,a)\\E(s,a)=\gamma\lambda E(s,a)\end{gathered}$$</li>
</ul>
</li>
<li>f) $S=S&rsquo;$, $A=A'$</li>
<li>g) 如果 $S&rsquo;$是终止状态，当前轮迭代完毕，否则转到步骤b)</li>
</ul>
</li>
</ul>
<p>对于步长$α$，和SARSA一样，一般也需要随着迭代的进行逐渐变小才能保证动作价值函数$Q$收敛。</p>
<h1 id="6-sarsa小结">6. SARSA小结</h1>
<p>SARSA算法和动态规划法比起来，不需要环境的状态转换模型，和蒙特卡罗法比起来，不需要完整的状态序列，因此比较灵活。在传统的强化学习方法中使用比较广泛。</p>
<p>但是SARSA算法也有一个传统强化学习方法共有的问题，就是无法求解太复杂的问题。在 SARSA 算法中，$Q(S,A)$ 的值使用一张大表来存储的，如果我们的状态和动作都达到百万乃至千万级，需要在内存里保存的这张大表会超级大，甚至溢出，因此不是很适合解决规模很大的问题。当然，对于不是特别复杂的问题，使用SARSA还是很不错的一种强化学习问题求解方法。</p>
<p>下一篇我们讨论SARSA的姊妹算法，时序差分离线控制算法Q-Learning。</p>
]]></description></item><item><title>RL学习笔记 [4] | 用蒙特卡罗法（MC）求解</title><link>https://jianye0428.github.io/posts/rl_learning_note_4/</link><pubDate>Thu, 22 Feb 2024 13:00:24 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/rl_learning_note_4/</guid><description><![CDATA[<h1 id="0-引言">0. 引言</h1>
<p>在<a href="https://www.cnblogs.com/pinard/p/9463815.html"target="_blank" rel="external nofollow noopener noreferrer">强化学习（三）用动态规划（DP）求解<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>中，我们讨论了用动态规划来求解强化学习预测问题和控制问题的方法。但是由于动态规划法需要在每一次回溯更新某一个状态的价值时，回溯到该状态的所有可能的后续状态。导致对于复杂问题计算量很大。同时很多时候，我们连环境的状态转化模型 $P$ 都无法知道，这时动态规划法根本没法使用。这时候我们如何求解强化学习问题呢？本文要讨论的蒙特卡罗(Monte-Calo, MC)就是一种可行的方法。</p>
<p>蒙特卡罗法这一篇对应Sutton书的第五章和UCL强化学习课程的第四讲部分，第五讲部分。</p>
<h1 id="1-不基于模型的强化学习问题定义">1. 不基于模型的强化学习问题定义</h1>
<p>在动态规划法中，强化学习的两个问题是这样定义的:</p>
<ul>
<li>
<p><strong>预测问题</strong>，即给定强化学习的6个要素：状态集 $S$, 动作集 $A$, 模型状态转化概率矩阵 $P$, 即时奖励 $R$，衰减因子 $γ$, 给定策略 $π$， 求解该策略的状态价值函数 $v(π)$</p>
</li>
<li>
<p><strong>控制问题</strong>，也就是求解最优的价值函数和策略。给定强化学习的5个要素：状态集 $S$, 动作集 $A$, 模型状态转化概率矩阵 $P$, 即时奖励 $R$，衰减因子 $γ$, 求解最优的状态价值函数 $v∗$ 和最优策略 $π∗$　</p>
</li>
</ul>
<p>可见, 模型状态转化概率矩阵 $P$ 始终是已知的，即MDP已知，对于这样的强化学习问题，我们一般称为<mark>基于模型的强化学习</mark>问题。</p>
<p>不过有很多强化学习问题，我们没有办法事先得到模型状态转化概率矩阵 $P$ ，这时如果仍然需要我们求解强化学习问题，那么这就是<mark>不基于模型的强化学习</mark>问题了。它的两个问题一般的定义是：</p>
<ul>
<li>
<p><strong>预测问题</strong>，即给定强化学习的5个要素：状态集 $S$, 动作集 $A$, 即时奖励 $R$，衰减因子 $γ$ , 给定策略 $π$， 求解该策略的状态价值函数 $v(π)$</p>
</li>
<li>
<p><strong>控制问题</strong>，也就是求解最优的价值函数和策略。给定强化学习的5个要素：状态集 $S$, 动作集 $A$, 即时奖励 $R$，衰减因子 $γ$, 探索率 $ϵ$, 求解最优的动作价值函数 $q∗$ 和最优策略 $π∗$　</p>
</li>
</ul>
<p>本文要讨论的蒙特卡罗法就是上述不基于模型的强化学习问题。</p>
<h1 id="2-蒙特卡罗法求解特点">2. 蒙特卡罗法求解特点</h1>
<p>蒙特卡罗这个词之前的博文也讨论过，尤其是在之前的<a href="https://www.cnblogs.com/pinard/p/MCMC%28%e4%b8%80%29%e8%92%99%e7%89%b9%e5%8d%a1%e7%bd%97%e6%96%b9%e6%b3%95"target="_blank" rel="external nofollow noopener noreferrer">MCMC系列<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>中。它是一种通过采样近似求解问题的方法。这里的蒙特卡罗法虽然和MCMC不同，但是采样的思路还是一致的。那么如何采样呢？</p>
<p>蒙特卡罗法通过采样若干经历完整的状态序列(episode)来估计状态的真实价值。所谓的经历完整，就是这个序列必须是达到终点的。比如下棋问题分出输赢，驾车问题成功到达终点或者失败。有了很多组这样经历完整的状态序列，我们就可以来近似的估计状态价值，进而求解预测和控制问题了。</p>
<p>从特卡罗法法的特点来说，一是和动态规划比，它不需要依赖于模型状态转化概率。二是它从经历过的完整序列学习，完整的经历越多，学习效果越好。</p>
<h1 id="3-蒙特卡罗法求解强化学习预测问题">3. 蒙特卡罗法求解强化学习预测问题</h1>
<p>这里我们先来讨论蒙特卡罗法求解强化学习预测问题的方法，即策略评估。一个给定策略 $π$ 的完整有T个状态的状态序列如下：</p>
<p>$$S_1,A_1,R_2,S_2,A_2,\ldots S_t,A_t,R_{t+1},\ldots R_T,S_T$$</p>
<p>回忆下<a href="https://www.cnblogs.com/pinard/p/9426283.html"target="_blank" rel="external nofollow noopener noreferrer">强化学习（二）马尔科夫决策过程(MDP)<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>中对于价值函数 $v_π(s)$的定义:</p>
<p>$$v_\pi(s)=\mathbb{E}_\pi(G_t|S_t=s)=\mathbb{E}_\pi(R_{t+1}+\gamma R_{t+2}+\gamma^2R_{t+3}+\ldots|S_t=s)$$</p>
<p>可以看出每个状态的价值函数等于所有该状态收获的期望，同时这个收获是通过后续的奖励与对应的衰减乘积求和得到。那么对于蒙特卡罗法来说，如果要求某一个状态的状态价值，只需要求出所有的完整序列中该状态出现时候的收获再取平均值即可近似求解，也就是：</p>
<p>$$G_t=R_{t+1}+\gamma R_{t+2}+\gamma^2R_{t+3}+\ldots\gamma^{T-t-1}R_T$$</p>
<p>$$v_\pi(s)\approx average(G_t),s.t.S_t=s$$</p>
<p>可以看出，预测问题的求解思路还是很简单的。不过有几个点可以优化考虑。</p>
<ul>
<li>
<p>第一个点是: 同样一个状态可能在一个完整的状态序列中重复出现，那么该状态的收获该如何计算？有两种解决方法。第一种是仅把状态序列中第一次出现该状态时的收获值纳入到收获平均值的计算中；另一种是针对一个状态序列中每次出现的该状态，都计算对应的收获值并纳入到收获平均值的计算中。两种方法对应的蒙特卡罗法分别称为：首次访问(first visit) 和每次访问(every visit) 蒙特卡罗法。第二种方法比第一种的计算量要大一些，但是在完整的经历样本序列少的场景下会比第一种方法适用。</p>
</li>
<li>
<p>第二个点是累进更新平均值(incremental mean)。在上面预测问题的求解公式里，我们有一个average的公式，意味着要保存所有该状态的收获值之和最后取平均。这样浪费了太多的存储空间。一个较好的方法是在迭代计算收获均值，即每次保存上一轮迭代得到的收获均值与次数，当计算得到当前轮的收获时，即可计算当前轮收获均值和次数。通过下面的公式就很容易理解这个过程：</p>
</li>
</ul>
<p>$$\mu_k=\frac1k\sum_{j=1}^kx_j=\frac1k(x_k+\sum_{j=1}^{k-1}x_j)=\frac1k(x_k+(k-1)\mu_{k-1})=\mu_{k-1}+\frac1k(x_k-\mu_{k-1})$$</p>
<p>这样上面的状态价值公式就可以改写成：</p>
<p>$$N(S_t)=N(S_t)+1$$</p>
<p>$$V(S_t)=V(S_t)+\frac1{N(S_t)}(G_t-V(S_t))$$</p>
<p>这样我们无论数据量是多还是少，算法需要的内存基本是固定的 。</p>
<p>有时候，尤其是海量数据做分布式迭代的时候，我们可能无法准确计算当前的次数 $N(S_t)$,这时我们可以用一个系数 $α$ 来代替，即：</p>
<p>$$V(S_t)=V(S_t)+\alpha(G_t-V(S_t))$$</p>
<p>对于动作价值函数 $Q(S_t,A_t)$,也是类似的，比如对上面最后一个式子，动作价值函数版本为：</p>
<p>$$Q(S_t,A_t)=Q(S_t,A_t)+\alpha(G_t-Q(S_t,A_t))$$</p>
<p>以上就是蒙特卡罗法求解预测问题的整个过程，下面我们来看控制问题求解。</p>
<h1 id="4-蒙特卡罗法求解强化学习控制问题">4. 蒙特卡罗法求解强化学习控制问题</h1>
<p>蒙特卡罗法求解控制问题的思路和动态规划价值迭代的的思路类似。回忆下动态规划价值迭代的的思路， 每轮迭代先做策略评估，计算出价值 $v_k(s)$ ，然后基于据一定的方法（比如贪婪法）更新当前策略 $π$。最后得到最优价值函数 $v∗$ 和最优策略 $π∗$。</p>
<p>和动态规划比，蒙特卡罗法不同之处体现在三点:</p>
<ul>
<li>一是预测问题策略评估的方法不同，这个第三节已经讲了。</li>
<li>第二是蒙特卡罗法一般是优化最优动作价值函数 $q∗$，而不是状态价值函数 $v∗$。</li>
<li>三是动态规划一般基于贪婪法更新策略。而蒙特卡罗法一般采用 $ϵ−$贪婪法更新。这个 $ϵ$ 就是我们在<a href="https://www.cnblogs.com/pinard/p/9385570.html"target="_blank" rel="external nofollow noopener noreferrer">强化学习（一）模型基础<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>中讲到的第8个模型要素 $ϵ$。$ϵ−$贪婪法通过设置一个较小的 $ϵ$ 值，使用 $1−ϵ$ 的概率贪婪地选择目前认为是最大行为价值的行为，而用 $ϵ$ 的概率随机的从所有 $m$ 个可选行为中选择行为。用公式可以表示为：
$$\left.\pi(a|s)=\left\{\begin{array}{ll}\epsilon/m+1-\epsilon&amp;if\mathrm{~}a^*=\arg\max_{a\in A}Q(s,a)\\\epsilon/m&amp;else\end{array}\right.\right.$$</li>
</ul>
<p>在实际求解控制问题时，为了使算法可以收敛，一般 $ϵ$会随着算法的迭代过程逐渐减小，并趋于0。这样在迭代前期，我们鼓励探索，而在后期，由于我们有了足够的探索量，开始趋于保守，以贪婪为主，使算法可以稳定收敛。这样我们可以得到一张和动态规划类似的图：</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">Mento Carlo 搜索过程示意</div>
</center>
<br>
<h1 id="5-蒙特卡罗法控制问题算法流程">5. 蒙特卡罗法控制问题算法流程</h1>
<p>在这里总结下蒙特卡罗法求解强化学习控制问题的算法流程，这里的算法是在线(on-policy)版本的,相对的算法还有离线(off-policy)版本的。在线和离线的区别我们在后续的文章里面会讲。同时这里我们用的是every-visit,即个状态序列中每次出现的相同状态，都会计算对应的收获值。</p>
<p>在线蒙特卡罗法求解强化学习控制问题的算法流程如下:</p>
<ul>
<li>输入：状态集 $S$, 动作集 $A$, 即时奖励 $R$，衰减因子 $γ$, 探索率$ϵ$</li>
<li>输出：最优的动作价值函数 $q∗$ 和最优策略 $π∗$</li>
<li>
<ol>
<li>初始化所有的动作价值 $Q(s,a)=0$ ， 状态次数 $N(s,a)=0$，采样次数 $k=0$，随机初始化一个策略 $π$</li>
</ol>
</li>
<li>
<ol start="2">
<li>$k=k+1$, 基于策略 $π$ 进行第k次蒙特卡罗采样，得到一个完整的状态序列:
$$S_1,A_1,R_2,S_2,A_2,\ldots S_t,A_t,R_{t+1},\ldots R_T,S_T$$</li>
</ol>
</li>
<li>
<ol start="3">
<li>对于该状态序列里出现的每一状态行为对 $(S_t,A_t)$，计算其收获 $G_t$, 更新其计数 $N(s,a)$ 和行为价值函数 $Q(s,a)$：
$$\begin{gathered}
G_t=R_{t+1}+\gamma R_{t+2}+\gamma^2R_{t+3}+\ldots\gamma^{T-t-1}R_T \\
N(S_t,A_t)=N(S_t,A_t)+1 \\
Q(S_t,A_t)=Q(S_t,A_t)+\frac1{N(S_t,A_t)}(G_t-Q(S_t,A_t))
\end{gathered}$$</li>
</ol>
</li>
<li>
<ol start="4">
<li>基于新计算出的动作价值，更新当前的 $ϵ−$贪婪策略：
$$\begin{gathered}
\epsilon=\frac1k \\
\left.\pi(a|s)=\left\{\begin{array}{ll}\epsilon/m+1-\epsilon&amp;ifa^*=\arg\max_{a\in A}Q(s,a)\\\epsilon/m&amp;else\end{array}\right.\right.
\end{gathered}$$</li>
</ol>
</li>
<li>
<ol start="5">
<li>如果所有的 $Q(s,a)$ 收敛，则对应的所有 $Q(s,a)$ 即为最优的动作价值函数 $q∗$。对应的策略 $π(a|s)$ 即为最优策略 $π∗$。否则转到第二步。</li>
</ol>
</li>
</ul>
<h1 id="6-蒙特卡罗法求解强化学习问题小结">6. 蒙特卡罗法求解强化学习问题小结</h1>
<p>蒙特卡罗法是我们第二个讲到的求解强化问题的方法，也是第一个不基于模型的强化问题求解方法。它可以避免动态规划求解过于复杂，同时还可以不事先知道环境转化模型，因此可以用于海量数据和复杂模型。但是它也有自己的缺点，这就是它每次采样都需要一个完整的状态序列。如果我们没有完整的状态序列，或者很难拿到较多的完整的状态序列，这时候蒙特卡罗法就不太好用了， 也就是说，我们还需要寻找其他的更灵活的不基于模型的强化问题求解方法。</p>
<p>下一篇我们讨论用时序差分方法来求解强化学习预测和控制问题的方法。</p>
<h1 id="7-ref">7. ref</h1>
<p><a href="https://www.cnblogs.com/pinard/p/9492980.html"target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/pinard/p/9492980.html<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
]]></description></item><item><title>RL学习笔记 [3] | 用动态规划(DP)求解</title><link>https://jianye0428.github.io/posts/rl_learning_note_3/</link><pubDate>Thu, 22 Feb 2024 08:59:02 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/rl_learning_note_3/</guid><description><![CDATA[<h1 id="0-引言">0. 引言</h1>
<p>在<a href="https://www.cnblogs.com/pinard/p/9426283.html"target="_blank" rel="external nofollow noopener noreferrer">强化学习（二）马尔科夫决策过程(MDP)<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>中，我们讨论了用马尔科夫假设来简化强化学习模型的复杂度，这一篇我们在马尔科夫假设和贝尔曼方程的基础上讨论使用动态规划(Dynamic Programming, DP)来求解强化学习的问题。</p>
<p>动态规划这一篇对应Sutton书的第四章和UCL强化学习课程的第三讲。</p>
<h1 id="1-动态规划和强化学习问题的联系">1. 动态规划和强化学习问题的联系</h1>
<p>对于动态规划，相信大家都很熟悉，很多使用算法的地方都会用到。就算是机器学习相关的算法，使用动态规划的也很多，比如之前讲到的<a href="https://www.cnblogs.com/pinard/p/6955871.html"target="_blank" rel="external nofollow noopener noreferrer">隐马尔科夫模型HMM（二）前向后向算法评估观察序列概率<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>，<a href="https://www.cnblogs.com/pinard/p/6991852.html"target="_blank" rel="external nofollow noopener noreferrer">隐马尔科夫模型HMM（四）维特比算法解码隐藏状态序列<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>， 都是动态规划的典型例子。</p>
<p>动态规划的关键点有两个：一是问题的最优解可以由若干小问题的最优解构成，即通过寻找子问题的最优解来得到问题的最优解。第二是可以找到子问题状态之间的递推关系，通过较小的子问题状态递推出较大的子问题的状态。而强化学习的问题恰好是满足这两个条件的。</p>
<p>我们先看看强化学习的两个基本问题。</p>
<p>第一个问题是预测，即给定强化学习的6个要素：状态集 $S$, 动作集$A$, 模型状态转化概率矩阵$P$, 即时奖励$R$，衰减因子$γ$, 给定策略$π$， 求解该策略的状态价值函数$v(π)$</p>
<p>第二个问题是控制，也就是求解最优的价值函数和策略。给定强化学习的5个要素：状态集$S$, 动作集$A$, 模型状态转化概率矩阵$P$, 即时奖励$R$，衰减因子$γ$, 求解最优的状态价值函数 $v∗$ 和最优策略 $π∗$　</p>
<p>那么如何找到动态规划和强化学习这两个问题的关系呢？</p>
<p>回忆一下上一篇<a href="https://www.cnblogs.com/pinard/p/9426283.html"target="_blank" rel="external nofollow noopener noreferrer">强化学习（二）马尔科夫决策过程(MDP)<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>中状态价值函数的贝尔曼方程：</p>
<p>$$v_\pi(s)=\sum_{a\in A}\pi(a|s)(R_s^a+\gamma\sum_{s&rsquo; \in S}P_{ss&rsquo;}^av_\pi(s&rsquo;))$$</p>
<p>从这个式子我们可以看出，我们可以定义出子问题求解每个状态的状态价值函数，同时这个式子又是一个递推的式子, 意味着利用它，我们可以使用上一个迭代周期内的状态价值来计算更新当前迭代周期某状态 $s$ 的状态价值。可见，使用动态规划来求解强化学习问题是比较自然的。</p>
<h1 id="2-策略评估求解预测问题">2. 策略评估求解预测问题</h1>
<p>首先，我们来看如何使用动态规划来求解强化学习的预测问题，即求解给定策略的状态价值函数的问题。这个问题的求解过程我们通常叫做策略评估(Policy Evaluation)。</p>
<p>策略评估的基本思路是从任意一个状态价值函数开始，依据给定的策略，结合贝尔曼期望方程、状态转移概率和奖励同步迭代更新状态价值函数，直至其收敛，得到该策略下最终的状态价值函数。</p>
<p>假设我们在第k轮迭代已经计算出了所有的状态的状态价值，那么在第 $k+1$ 轮我们可以利用第k轮计算出的状态价值计算出第k+1+1轮的状态价值。这是通过贝尔曼方程来完成的，即：</p>
<p>$$v_{k+1}(s)=\sum_{a\in A}\pi(a|s)(R_s^a+\gamma\sum_{s&rsquo; \in S}P_{ss&rsquo;}^av_k(s&rsquo;))$$</p>
<p>和上一节的式子唯一的区别是由于我们的策略 $π$ 已经给定，我们不再写出，对应加上了迭代轮数的下标。我们每一轮可以对计算得到的新的状态价值函数再次进行迭代，直至状态价值的值改变很小(收敛)，那么我们就得出了预测问题的解，即给定策略的状态价值函数 $v(π)$。</p>
<p>下面我们用一个具体的例子来说明策略评估的过程。</p>
<h1 id="3-策略评估求解实例">3. 策略评估求解实例</h1>
<p>这是一个经典的Grid World的例子。我们有一个4x4的16宫格。只有左上和右下的格子是终止格子。该位置的价值固定为0，个体如果到达了该2个格子，则停止移动，此后每轮奖励都是0。个体在16宫格其他格的每次移动，得到的即时奖励R都是-1。注意个体每次只能移动一个格子，且只能上下左右4种移动选择，不能斜着走, 如果在边界格往外走，则会直接移动回到之前的边界格。衰减因子我们定义为γ=1=1。由于这里每次移动，下一格都是固定的，因此所有可行的的状态转化概率P=1=1。这里给定的策略是随机策略，即每个格子里有25%的概率向周围的4个格子移动。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">Grid World</div>
</center>
<br>
<p>首先我们初始化所有格子的状态价值为0，如上图 $k=0$ 的时候。现在我们开始策略迭代了。由于终止格子的价值固定为0，我们可以不将其加入迭代过程。在 $k=1$ 的时候，我们利用上面的贝尔曼方程先计算第二行第一个格子的价值：</p>
<p>$$v_1^{(21)}=\frac14[(-1+0)+(-1+0)+(-1+0)+(-1+0)]=-1$$</p>
<p>第二行第二个格子的价值是：</p>
<p>$$v_1^{(22)}=\frac14[(-1+0)+(-1+0)+(-1+0)+(-1+0)]=-1$$</p>
<p>其他的格子都是类似的，第一轮的状态价值迭代的结果如上图 $k=1$ 的时候。现在我们第一轮迭代完了。开始动态规划迭代第二轮了。还是看第二行第一个格子的价值：</p>
<p>$$v_2^{(21)}=\frac14[(-1+0)+(-1-1)+(-1-1)+(-1-1)]=-1.75$$</p>
<p>第二行第二个格子的价值是：</p>
<p>$$v_2^{(22)}=\frac14[(-1-1)+(-1-1)+(-1-1)+(-1-1)]=-2$$</p>
<p>最终得到的结果是上图 $k=2$ 的时候。第三轮的迭代如下：</p>
<p>$$v_3^{(21)}=\frac14[(-1-1.7)+(-1-2)+(-1-2)+(-1+0)]=-2.425$$</p>
<p>$$v_3^{(22)}=\frac14[(-1-1.7)+(-1-1.7)+(-1-2)+(-1-2)]=-2.85$$</p>
<p>最终得到的结果是上图 $k=3$ 的时候。就这样一直迭代下去，直到每个格子的策略价值改变很小为止。这时我们就得到了所有格子的基于随机策略的状态价值。</p>
<p>可以看到，动态规划的策略评估计算过程并不复杂，但是如果我们的问题是一个非常复杂的模型的话，这个计算量还是非常大的。</p>
<h1 id="4-策略迭代求解控制问题">4. 策略迭代求解控制问题</h1>
<p>上面我们讲了使用策略评估求解预测问题，现在我们再来看如何使用动态规划求解强化学习的第二个问题控制问题。一种可行的方法就是根据我们之前基于任意一个给定策略评估得到的状态价值来及时调整我们的动作策略，这个方法我们叫做策略迭代(Policy Iteration)。</p>
<p>如何调整呢？最简单的方法就是贪婪法。考虑一种如下的贪婪策略：个体在某个状态下选择的行为是其能够到达后续所有可能的状态中状态价值最大的那个状态。还是以第三节的例子为例，如上面的图右边。当我们计算出最终的状态价值后，我们发现，第二行第一个格子周围的价值分别是0,-18,-20，此时我们用贪婪法，则我们调整行动策略为向状态价值为0的方向移动，而不是随机移动。也就是图中箭头向上。而此时第二行第二个格子周围的价值分别是-14,-14,-20,-20。那么我们整行动策略为向状态价值为-14的方向移动，也就是图中的向左向上。</p>
<p>如果用一副图来表示策略迭代的过程的话，如下图：</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">Policy Iteration</div>
</center>
<br>
<p>在策略迭代过程中，我们循环进行两部分工作，第一步是使用当前策略 $π∗$ 评估计算当前策略的最终状态价值 $v∗$，第二步是根据状态价值 $v∗$ 根据一定的方法（比如贪婪法）更新策略 $π∗$，接着回到第一步，一直迭代下去，最终得到收敛的策略 $π∗$ 和状态价值 $v∗$。</p>
<h1 id="5-价值迭代求解控制问题">5. 价值迭代求解控制问题</h1>
<p>观察第三节的图发现，我们如果用贪婪法调整动作策略，那么当k=3=3的时候，我们就已经得到了最优的动作策略。而不用一直迭代到状态价值收敛才去调整策略。那么此时我们的策略迭代优化为价值迭代。</p>
<p>还是以第三节的例子为例，如上面的图右边。比如当k=2=2时，第二行第一个格子周围的价值分别是0,-2,-2，此时我们用贪婪法，则我们调整行动策略为向状态价值为0的方向移动，而不是随机移动。也就是图中箭头向上。而此时第二行第二个格子周围的价值分别是-1.7,-1.7,-2, -2。那么我们整行动策略为向状态价值为-1.7的方向移动，也就是图中的向左向上。</p>
<p>和上一节相比，我们没有等到状态价值收敛才调整策略，而是随着状态价值的迭代及时调整策略, 这样可以大大减少迭代次数。此时我们的状态价值的更新方法也和策略迭代不同。现在的贝尔曼方程迭代式子如下：</p>
<p>$$v_{k+1}(s)=\max_{a\in A}(R_s^a+\gamma\sum_{s&rsquo; \in S}P_{ss&rsquo;}^av_k(s&rsquo;))$$</p>
<p>可见由于策略调整，我们现在价值每次更新倾向于贪婪法选择的最优策略对应的后续状态价值，这样收敛更快。</p>
<h1 id="6-异步动态规划算法">6. 异步动态规划算法</h1>
<p>在前几节我们讲的都是同步动态规划算法，即每轮迭代我会计算出所有的状态价值并保存起来，在下一轮中，我们使用这些保存起来的状态价值来计算新一轮的状态价值。</p>
<p>另一种动态规划求解是异步动态规划算法，在这些算法里，每一次迭代并不对所有状态的价值进行更新，而是依据一定的原则有选择性的更新部分状态的价值，这类算法有自己的一些独特优势，当然有额会有一些额外的代价。</p>
<p>常见的异步动态规划算法有三种：</p>
<p>第一种是原位动态规划 (in-place dynamic programming)， 此时我们不会另外保存一份上一轮计算出的状态价值。而是即时计算即时更新。这样可以减少保存的状态价值的数量，节约内存。代价是收敛速度可能稍慢。</p>
<p>第二种是优先级动态规划 (prioritised sweeping)：该算法对每一个状态进行优先级分级，优先级越高的状态其状态价值优先得到更新。通常使用贝尔曼误差来评估状态的优先级，贝尔曼误差即新状态价值与前次计算得到的状态价值差的绝对值。这样可以加快收敛速度，代价是需要维护一个优先级队列。</p>
<p>第三种是实时动态规划 (real-time dynamic programming)：实时动态规划直接使用个体与环境交互产生的实际经历来更新状态价值，对于那些个体实际经历过的状态进行价值更新。这样个体经常访问过的状态将得到较高频次的价值更新，而与个体关系不密切、个体较少访问到的状态其价值得到更新的机会就较少。收敛速度可能稍慢。</p>
<h1 id="7-动态规划求解强化学习问题小结">7. 动态规划求解强化学习问题小结</h1>
<p>动态规划是我们讲到的第一个系统求解强化学习预测和控制问题的方法。它的算法思路比较简单，主要就是利用贝尔曼方程来迭代更新状态价值，用贪婪法之类的方法迭代更新最优策略。</p>
<p>动态规划算法使用全宽度（full-width）的回溯机制来进行状态价值的更新，也就是说，无论是同步还是异步动态规划，在每一次回溯更新某一个状态的价值时，都要回溯到该状态的所有可能的后续状态，并利用贝尔曼方程更新该状态的价值。这种全宽度的价值更新方式对于状态数较少的强化学习问题还是比较有效的，但是当问题规模很大的时候，动态规划算法将会因贝尔曼维度灾难而无法使用。因此我们还需要寻找其他的针对复杂问题的强化学习问题求解方法。</p>
<p>下一篇我们讨论用蒙特卡罗方法来求解强化学习预测和控制问题的方法。</p>
<p>ref:
<a href="https://www.cnblogs.com/pinard/p/9463815.html"target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/pinard/p/9463815.html<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
]]></description></item><item><title>RL学习笔记 [2] | 马尔科夫决策过程(MDP)</title><link>https://jianye0428.github.io/posts/rl_learning_note_2/</link><pubDate>Wed, 21 Feb 2024 10:38:11 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/rl_learning_note_2/</guid><description><![CDATA[<h1 id="0-引言">0. 引言</h1>
<p>在<a href="https://www.cnblogs.com/pinard/p/9385570.html"target="_blank" rel="external nofollow noopener noreferrer">强化学习（一）模型基础<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>中，我们讲到了强化学习模型的8个基本要素。但是仅凭这些要素还是无法使用强化学习来帮助我们解决问题的, 在讲到模型训练前，模型的简化也很重要，这一篇主要就是讲如何利用马尔科夫决策过程(Markov Decision Process，以下简称MDP)来简化强化学习的建模。</p>
<p>MDP这一篇对应Sutton书的第三章和UCL强化学习课程的第二讲。</p>
<h1 id="1-强化学习引入mdp的原因">1. 强化学习引入MDP的原因</h1>
<p>如果按照真实的环境转化过程看，转化到下一个状态 $s′$</p>
<p>对于马尔科夫性本身，我之前讲过的<a href="http://www.cnblogs.com/pinard/p/6945257.html"target="_blank" rel="external nofollow noopener noreferrer">隐马尔科夫模型HMM（一）HMM模型<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>，<a href="http://www.cnblogs.com/pinard/p/7048333.html"target="_blank" rel="external nofollow noopener noreferrer">条件随机场CRF(一)从随机场到线性链条件随机场<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>以及<a href="http://www.cnblogs.com/pinard/p/6632399.html"target="_blank" rel="external nofollow noopener noreferrer">MCMC(二)马尔科夫链<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>都有讲到。它本身是一个比较简单的假设，因此这里就不专门对“马尔可夫性”做专门的讲述了。</p>
<p>除了对于环境的状态转化模型这个因素做马尔科夫假设外，我们还对强化学习第四个要素个体的策略(policy) $π$ 也做了马尔科夫假设。即在状态$s$时采取动作$a$的概率仅与当前状态$s$有关，与其他的要素无关。用公式表示就是</p>
<p>$$\pi(a\mid s)=P(A_{t}=a\mid S_{t}=s)$$</p>
<p>对于第五个要素，价值函数 $v_π(s)$ 也是一样, $v_π(s)$ 现在仅仅依赖于当前状态了，那么现在价值函数 $v_π(s)$ 表示为:</p>
<p>$$\nu_{\pi}(s)=\mathrm{E}<em>{\pi}(G</em>{t}|S_{t}=s)=\mathrm{E}<em>{\pi}(R</em>{t+1}+\gamma R_{t+2}+\gamma^{2}R_{t+3}+\ldots\mid S_{t}=s)$$</p>
<p>其中，$G_t$ 代表收获(return), 是一个MDP中从某一个状态 $S_t$ 开始采样直到终止状态时所有奖励的有衰减的之和。</p>
<h1 id="2-mdp的价值函数与贝尔曼方程">2. MDP的价值函数与贝尔曼方程</h1>
<p>对于MDP，我们在第一节里已经讲到了它的价值函数 $v_π(s)$ 的表达式。但是这个表达式没有考虑到所采用的动作$a$带来的价值影响，因此我们除了 $v_π(s)$ 这个状态价值函数外，还有一个动作价值函数 $q_π(s,a)$，即：</p>
<p>$$q_{\pi}(s,a)=\operatorname{E}<em>{\pi}(G</em>{t}|S_{t}=s,A_{t}=a)=\operatorname{E}<em>{\pi}(R</em>{t+1}+\gamma R_{t+2}+\gamma^{2}R_{t+3}+\ldots\mid S_{t}=s,A_{t}=a)$$</p>
<p>根据价值函数的表达式，我们可以推导出价值函数基于状态的递推关系，比如对于状态价值函数 $v_π(s)$，可以发现：</p>
<p>$$\begin{aligned}
V_{\pi}(s)&amp; =\mathrm{E}<em>{\pi}(R</em>{t+1}+\gamma R_{t+2}+\gamma^{2}R_{t+3}+\ldots\mid S_{t}=s)  \
&amp;=\mathrm{E}<em>{\pi}(R</em>{t+1}+\gamma(R_{t+2}+\gamma R_{t+3}+\ldots)|S_{t}=s) \
&amp;=\mathrm{E}<em>{\pi}(R</em>{t+1}+\gamma G_{t+1}|S_{t}=s) \
&amp;=\mathrm{E}<em>{\pi}(R</em>{t+1}+\gamma\nu_{\pi}(S_{t+1})|S_{t}=s)
\end{aligned}$$</p>
<p>也就是说，在 $t$ 时刻的状态 $S_t$ 和 $t+1$ 时刻的状态 $S_{t+1}$ 是满足递推关系的，即：</p>
<p>$$v_{\pi}(s)=\mathrm{E}<em>{\pi}(R</em>{t+1}+\gamma\nu_{\pi}(S_{t+1})\mid S_{t}=s)$$
　　　　
这个递推式子我们一般将它叫做<strong>贝尔曼方程</strong>。这个式子告诉我们，一个状态的价值由该状态的奖励以及后续状态价值按一定的衰减比例联合组成。</p>
<p>同样的方法，我们可以得到动作价值函数 $q_π(s,a)$ 的贝尔曼方程：</p>
<p>$$q_{\pi}(s,a)=\mathrm{E}<em>{\pi}(R</em>{t+1}+\gamma q_{\pi}(S_{t+1},A_{t+1})\mid S_{t}=s,A_{t}=a)$$</p>
<h1 id="3-状态价值函数与动作价值函数的递推关系">3. 状态价值函数与动作价值函数的递推关系</h1>
<p>根据动作价值函数 $q_π(s,a)$ 和状态价值函数 $v_π(s)$ 的定义，我们很容易得到他们之间的转化关系公式：</p>
<p>$$\nu_{\pi}(s)=\sum_{a\in A}\pi(a|s)q_{\pi}(s,a)$$</p>
<p>也就是说，状态价值函数是所有动作价值函数基于策略 $π$ 的期望。通俗说就是某状态下所有状态动作价值乘以该动作出现的概率，最后求和，就得到了对应的状态价值。</p>
<p>反过来，利用上贝尔曼方程，我们也很容易从状态价值函数 $v_π(s)$ 表示动作价值函数 $q_π(s,a)$，即：</p>
<p>$$q_{\pi}(s,a)=R_{s}^{a}+\gamma\sum_{s^{\prime}\in S}P_{ss&rsquo;}^{a}\nu_{\pi}(s^{&rsquo;})$$</p>
<p>通俗说就是状态动作价值有两部分相加组成，第一部分是即时奖励，第二部分是环境所有可能出现的下一个状态的概率乘以该下一状态的状态价值，最后求和，并加上衰减。</p>
<p>这两个转化过程也可以从下图中直观的看出：</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">状态价值函数</div>
</center>
<br>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">动作价值函数</div>
</center>
<br>
<p>把上面两个式子互相结合起来，我们可以得到：</p>
<p>$$\nu_{\pi}(s)=\sum_{a\in A}\pi(a\mid s)(R_{s}^{a}+\gamma\sum_{s&rsquo; \in S}P_{ss&rsquo;}^{a}\nu_{\pi}(s^{&rsquo;}))$$</p>
<p>$$q_\pi(s,a)=R_s^a+\gamma\sum_{s&rsquo; \in S}P_{ss&rsquo;}^a\sum_{a&rsquo; \in A}\pi(a&rsquo; \mid s&rsquo;)q_\pi(s&rsquo;,a&rsquo;)$$</p>
<h1 id="4-最优价值函数">4. 最优价值函数</h1>
<p>解决强化学习问题意味着要寻找一个最优的策略让个体在与环境交互过程中获得始终比其它策略都要多的收获，这个最优策略我们可以用 <em>π</em>∗表示。一旦找到这个最优策略$π^∗$，那么我们就解决了这个强化学习问题。一般来说，比较难去找到一个最优策略，但是可以通过比较若干不同策略的优劣来确定一个较好的策略，也就是局部最优解。</p>
<p>如何比较策略的优劣呢？一般是通过对应的价值函数来比较的，也就是说，寻找较优策略可以通过寻找较优的价值函数来完成。可以定义最优状态价值函数是所有策略下产生的众多状态价值函数中的最大者，即：</p>
<p>$$\nu_{*}(s)=\max_{\pi}\nu_{\pi}(s)$$</p>
<p>同理也可以定义最优动作价值函数是所有策略下产生的众多动作状态价值函数中的最大者，即：</p>
<p>$$q_*(s,a)=\max_\pi q_\pi(s,a)$$</p>
<p>对于最优的策略，基于动作价值函数我们可以定义为：</p>
<p>$$\pi_<em>(a|s)=\begin{cases}1&amp;\mathrm{if~}a=\mathrm{arg~}\max_{a\in A}q</em>(s,a)\0&amp;\mathrm{else}&amp;\end{cases}$$</p>
<p>只要我们找到了最大的状态价值函数或者动作价值函数，那么对应的策略 $π^*$ 就是我们强化学习问题的解。同时，利用状态价值函数和动作价值函数之间的关系，我们也可以得到:</p>
<p>$$v_<em>(s)=\max_aq_</em>(s,a)$$</p>
<p>反过来的最优价值函数关系也很容易得到：</p>
<p>$$q_{<em>}(s,a)=R_{s}^{a}+\gamma\sum_{s&rsquo; \in S}P_{ss}^{a}{}_{</em>}(\mathrm{s&rsquo;})$$</p>
<p>利用上面的两个式子也可以得到和第三节末尾类似的式子：</p>
<p>$$\nu_<em>(s)=\max_a(R_s^a+\gamma\sum_{s^{\prime}\in S}P_{ss&rsquo;}^a\nu_</em>(s&rsquo;))$$</p>
<p>$$q_<em>(s,a)=R_s^a+\gamma\sum_{s&rsquo; \in S}P_{ss&rsquo;}^a\max_{a&rsquo;}q_</em>(s&rsquo;,a&rsquo;)$$</p>
<h1 id="5-mdp实例">5. MDP实例</h1>
<p>上面的公式有点多，需要一些时间慢慢消化，这里给出一个UCL讲义上实际的例子，首先看看具体我们如何利用给定策略来计算价值函数。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">MDP 举例</div>
</center>
<br>
<p>例子是一个学生学习考试的MDP。里面左下那个圆圈位置是起点，方框那个位置是终点。上面的动作有study, pub, facebook, quit, sleep，每个状态动作对应的即时奖励R已经标出来了。我们的目标是找到最优的动作价值函数或者状态价值函数，进而找出最优的策略。</p>
<p>为了方便，我们假设衰减因子 $γ=1$, $π(a|s)=0.5$。</p>
<p>对于终点方框位置，由于其没有下一个状态，也没有当前状态的动作，因此其状态价值函数为0。对于其余四个状态，我们依次定义其价值为<em>v</em>1,<em>v</em>2,<em>v</em>3,<em>v</em>4， 分别对应左上，左下，中下，右下位置的圆圈。我们基于$\nu_{\pi}(s)=\sum_{a\in A}\pi(a|s)(R_{s}^{a}+\gamma\sum_{s&rsquo; \in S}P_{ss&rsquo;}^{a}\nu_{\pi}(s&rsquo;))$计算所有的状态价值函数。可以列出一个方程组。</p>
<ul>
<li>
<p>对于<em>v</em>1位置，我们有：$v_1=0.5*(-1+v_1)+0.5*(0+v_2)$</p>
</li>
<li>
<p>对于<em>v</em>2位置，我们有：$v_2=0.5*(-1+v_1)+0.5*(-2+v_3)$</p>
</li>
<li>
<p>对于<em>v</em>3位置，我们有：$v_3=0.5*(0+0)+0.5*(-2+v_4)$</p>
</li>
<li>
<p>对于<em>v</em>4位置，我们有：$v_4=0.5*(10+0)+0.5*(1+0.2<em>v_2+0.4</em>v_3+0.4*v_4)$</p>
</li>
</ul>
<p>解出这个方程组可以得到 $v_1=−2.3$, $v_2=−1.3$, $v_3=2.7$, $v_4=7.4$, 即每个状态的价值函数如下图：</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">MDP</div>
</center>
<br>
<p>上面我们固定了策略$ π(a|s)$, 虽然求出了每个状态的状态价值函数，但是却并不一定是最优价值函数。那么如何求出最优价值函数呢？这里由于状态机简单，求出最优的状态价值函数 $v*(s)$ 或者动作价值函数 $q*(s,a)$ s比较容易。</p>
<p>我们这次以动作价值函数 $q*(s,a)$ 来为例求解。首先终点方框处的好求。</p>
<p>$$q*(s_3,sleep)=0,q*(s_4,study)=10$$</p>
<p>接着我们就可利用 $q*(s,a)=R_{s}^{a}+\gamma\sum_{s&rsquo; \in S}P_{ss&rsquo;}^{a}\max_{a&rsquo;}q*(s&rsquo;,a&rsquo;)$ 列方程组求出所有的 $q∗(s,a)$ 。有了所有的 $q*(s,a)$,利用 $v_{<em>}(s)=\max_{a}q</em>(s,a)$ 就可以求出所有的 $v∗(s)$。最终求出的所有 $v∗(s)$ 和 $q∗(s,a)$ 如下图：</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">MDP</div>
</center>
<br>
<p>从而我们的最优决策路径是走6-&gt;6-&gt;8-&gt;10-&gt;结束。　　　　</p>
<h1 id="6-mdp小结">6. MDP小结</h1>
<p>MDP是强化学习入门的关键一步，如果这部分研究的比较清楚，后面的学习就会容易很多。因此值得多些时间在这里。虽然MDP可以直接用方程组来直接求解简单的问题，但是更复杂的问题却没有办法求解，因此我们还需要寻找其他有效的求解强化学习的方法。</p>
<p>下一篇讨论用动态规划的方法来求解强化学习的问题。</p>
<h1 id="7-ref">7. ref</h1>
<p><a href="https://www.cnblogs.com/pinard/p/9426283.html"target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/pinard/p/9426283.html<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
]]></description></item><item><title>RL学习笔记 [1] | 模型基础</title><link>https://jianye0428.github.io/posts/rl_learning_note_1/</link><pubDate>Wed, 21 Feb 2024 10:38:07 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/rl_learning_note_1/</guid><description><![CDATA[<h1 id="0-引言">0. 引言</h1>
<p>　从今天开始整理强化学习领域的知识，主要参考的资料是Sutton的强化学习书和UCL强化学习的课程。这个系列大概准备写10到20篇，希望写完后自己的强化学习碎片化知识可以得到融会贯通，也希望可以帮到更多的人，毕竟目前系统的讲解强化学习的中文资料不太多。</p>
<p>　第一篇会从强化学习的基本概念讲起，对应Sutton书的第一章和UCL课程的第一讲。</p>
<h1 id="1-强化学习在机器学习中的位置">1. 强化学习在机器学习中的位置</h1>
<p>强化学习的学习思路和人比较类似，是在实践中学习，比如学习走路，如果摔倒了，那么我们大脑后面会给一个负面的奖励值，说明走的姿势不好。然后我们从摔倒状态中爬起来，如果后面正常走了一步，那么大脑会给一个正面的奖励值，我们会知道这是一个好的走路姿势。那么这个过程和之前讲的机器学习方法有什么区别呢？</p>
<p>强化学习是和监督学习，非监督学习并列的第三种机器学习方法，从下图我们可以看出来。</p>
  <br>
  <center>
    
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">RL、SL、UL与ML的区别联系</div>
  </center>
  <br>
<p>强化学习来和监督学习最大的区别是它是没有监督学习已经准备好的训练数据输出值的。强化学习只有奖励值，但是这个奖励值和监督学习的输出值不一样，它不是事先给出的，而是延后给出的，比如上面的例子里走路摔倒了才得到大脑的奖励值。同时，强化学习的每一步与时间顺序前后关系紧密。而监督学习的训练数据之间一般都是独立的，没有这种前后的依赖关系。</p>
<p>再来看看强化学习和非监督学习的区别。也还是在奖励值这个地方。非监督学习是没有输出值也没有奖励值的，它只有数据特征。同时和监督学习一样，数据之间也都是独立的，没有强化学习这样的前后依赖关系。</p>
<h1 id="2-强化学习的建模">2. 强化学习的建模</h1>
<p>我们现在来看看强化学习这样的问题我们怎么来建模，简单的来说，是下图这样的：</p>
  <br>
  <center>
    
    <br>
    <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">大脑与环境的交互</div>
  </center>
  <br>
<p>上面的大脑代表我们的算法执行个体，我们可以操作个体来做决策，即选择一个合适的动作（Action）$A_t$。下面的地球代表我们要研究的环境,它有自己的状态模型，我们选择了动作 $A_t$ 后，环境的状态(State)会变，我们会发现环境状态已经变为 $S_{t+1}$,同时我们得到了我们采取动作 $A_t$ 的延时奖励(Reward) $R_{t+1}$。然后个体可以继续选择下一个合适的动作，然后环境的状态又会变，又有新的奖励值&hellip;这就是强化学习的思路。</p>
<p>那么我们可以整理下这个思路里面出现的强化学习要素。</p>
<ul>
<li>
<p>第一个是环境的状态 $S$, $t$ 时刻环境的状态 $S_t$ 是它的环境状态集中某一个状态。</p>
</li>
<li>
<p>第二个是个体的动作 $A$, $t$ 时刻个体采取的动作 $A_t$ 是它的动作集中某一个动作。</p>
</li>
<li>
<p>第三个是环境的奖励 $R$, $t$ 时刻个体在状态 $S_t$ 采取的动作 $A_t$ 对应的奖励 $R_{t+1}$ 会在 $t+1$ 时刻得到。</p>
</li>
<li>
<p>第四个是个体的策略(policy) $π$,它代表个体采取动作的依据，即个体会依据策略 $π$ 来选择动作。最常见的策略表达方式是一个条件概率分布 $π(a|s)$, 即在状态 $s$ 时采取动作 $a$ 的概率。即 $π(a|s)=P(A_t=a|S_t=s)$.此时概率大的动作被个体选择的概率较高。</p>
</li>
<li>
<p>第五个是个体在策略 $π$ 和状态 $s$ 时，采取行动后的价值(value)，一般用 $vπ(s)$ 表示。这个价值一般是一个期望函数。虽然当前动作会给一个延时奖励 $R_{t+1}$,但是光看这个延时奖励是不行的，因为当前的延时奖励高，不代表到了 $t+1$, $t+2$,&hellip;时刻的后续奖励也高。比如下象棋，我们可以某个动作可以吃掉对方的车，这个延时奖励是很高，但是接着后面我们输棋了。此时吃车的动作奖励值高但是价值并不高。因此我们的价值要综合考虑当前的延时奖励和后续的延时奖励。价值函数 $v_{\pi}(s)$ 一般可以表示为下式，不同的算法会有对应的一些价值函数变种，但思路相同。
$$v_{\pi}(s)=\mathbb{E}<em>π(R</em>{t+1}+γR_{t+2}+γ^2R_{t+3}+&hellip;|S_t=s)$$</p>
</li>
<li>
<p>其中 $γ$ 是第六个模型要素，即奖励衰减因子，在[0，1]之间。如果为0，则是贪婪法，即价值只由当前延时奖励决定，如果是1，则所有的后续状态奖励和当前奖励一视同仁。大多数时候，我们会取一个0到1之间的数字，即当前延时奖励的权重比后续奖励的权重大。</p>
</li>
<li>
<p>第七个是环境的状态转化模型，可以理解为一个概率状态机，它可以表示为一个概率模型，即在状态 $s$ 下采取动作 $a$,转到下一个状态 $s′$ 的概率，表示为 $P^a_{ss′}$。</p>
</li>
<li>
<p>第八个是探索率 $ϵ$，这个比率主要用在强化学习训练迭代过程中，由于我们一般会选择使当前轮迭代价值最大的动作，但是这会导致一些较好的但我们没有执行过的动作被错过。因此我们在训练选择最优动作时，会有一定的概率 $ϵ$ 不选择使当前轮迭代价值最大的动作，而选择其他的动作。</p>
</li>
</ul>
<p>以上8个就是强化学习模型的基本要素了。当然，在不同的强化学习模型中，会考虑一些其他的模型要素，或者不考虑上述要素的某几个，但是这8个是大多数强化学习模型的基本要素。</p>
<h1 id="3-强化学习的简单实例">3. 强化学习的简单实例</h1>
<p>这里给出一个简单的强化学习例子Tic-Tac-Toe。这是一个简单的游戏，在一个3x3的九宫格里，两个人轮流下，直到有个人的棋子满足三个一横一竖或者一斜，赢得比赛游戏结束，或者九宫格填满也没有人赢，则和棋。</p>
<p>这个例子的完整代码在<a href="https://github.com/ljpzzz/machinelearning/blob/master/reinforcement-learning/introduction.py"target="_blank" rel="external nofollow noopener noreferrer">github<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>。例子只有一个文件，很简单，代码首先会用两个电脑选手训练模型，然后可以让人和机器对战。当然，由于这个模型很简单，所以只要你不乱走，最后的结果都是和棋，当然想赢电脑也是不可能的。</p>
<p>我们重点看看这个例子的模型，理解上面第二节的部分。如何训练强化学习模型可以先不管。代码部分大家可以自己去看，只有300多行。</p>
<ul>
<li>
<p>首先看第一个要素环境的状态 $S$。这是一个九宫格，每个格子有三种状态，即没有棋子(取值0)，有第一个选手的棋子(取值1)，有第二个选手的棋子(取值-1)。那么这个模型的状态一共有$3^9=19683$个。</p>
</li>
<li>
<p>接着我们看个体的动作 $A$，这里只有9个格子，每次也只能下一步，所以最多只有9个动作选项。实际上由于已经有棋子的格子是不能再下的，所以动作选项会更少。实际可以选择动作的就是那些取值为0的格子。</p>
</li>
<li>
<p>第三个是环境的奖励 $R$，这个一般是我们自己设计。由于我们的目的是赢棋，所以如果某个动作导致的改变到的状态可以使我们赢棋，结束游戏，那么奖励最高，反之则奖励最低。其余的双方下棋动作都有奖励，但奖励较少。特别的，对于先下的棋手，不会导致结束的动作奖励要比后下的棋手少。</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># give reward to two players</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">giveReward</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">currentState</span><span class="o">.</span><span class="n">winner</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">p1Symbol</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">p1</span><span class="o">.</span><span class="n">feedReward</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">p2</span><span class="o">.</span><span class="n">feedReward</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">currentState</span><span class="o">.</span><span class="n">winner</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">p2Symbol</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">p1</span><span class="o">.</span><span class="n">feedReward</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">p2</span><span class="o">.</span><span class="n">feedReward</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">p1</span><span class="o">.</span><span class="n">feedReward</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">p2</span><span class="o">.</span><span class="n">feedReward</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>第四个是个体的策略(policy) $π$，这个一般是学习得到的，我们会在每轮以较大的概率选择当前价值最高的动作，同时以较小的概率去探索新动作，在这里AI的策略如下面代码所示。里面的exploreRate就是我们的第八个要素探索率 $ϵ$。即策略是以 $1−ϵ$ 的概率选择当前最大价值的动作，以 $ϵ$ 的概率随机选择新动作。</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># determine next action</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">takeAction</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">state</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">states</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="n">nextStates</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">  <span class="n">nextPositions</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">BOARD_ROWS</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">BOARD_COLS</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="n">state</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">nextPositions</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="n">nextStates</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">state</span><span class="o">.</span><span class="n">nextState</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">symbol</span><span class="p">)</span><span class="o">.</span><span class="n">getHash</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">binomial</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">exploreRate</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">nextPositions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Not sure if truncating is the best way to deal with exploratory step</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Maybe it&#39;s better to only skip this step rather than forget all the history</span>
</span></span><span class="line"><span class="cl">    <span class="bp">self</span><span class="o">.</span><span class="n">states</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">action</span> <span class="o">=</span> <span class="n">nextPositions</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">action</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">symbol</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">action</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">values</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="nb">hash</span><span class="p">,</span> <span class="n">pos</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">nextStates</span><span class="p">,</span> <span class="n">nextPositions</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">values</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="bp">self</span><span class="o">.</span><span class="n">estimations</span><span class="p">[</span><span class="nb">hash</span><span class="p">],</span> <span class="n">pos</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">values</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">values</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">action</span> <span class="o">=</span> <span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="n">action</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">symbol</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">action</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>第五个是价值函数，代码里用value表示。价值函数的更新代码里只考虑了当前动作的现有价值和得到的奖励两部分，可以认为我们的第六个模型要素衰减因子 $γ$ 为0。具体的代码部分如下，价值更新部分的代码加粗。具体为什么会这样更新价值函数我们以后会讲。</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># update estimation according to reward</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">feedReward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">reward</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">states</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span>
</span></span><span class="line"><span class="cl">  <span class="bp">self</span><span class="o">.</span><span class="n">states</span> <span class="o">=</span> <span class="p">[</span><span class="n">state</span><span class="o">.</span><span class="n">getHash</span><span class="p">()</span> <span class="k">for</span> <span class="n">state</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">states</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="n">target</span> <span class="o">=</span> <span class="n">reward</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="n">latestState</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">states</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="n">value</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">estimations</span><span class="p">[</span><span class="n">latestState</span><span class="p">]</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">stepSize</span> <span class="o">*</span> <span class="p">(</span><span class="n">target</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">estimations</span><span class="p">[</span><span class="n">latestState</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">      <span class="bp">self</span><span class="o">.</span><span class="n">estimations</span><span class="p">[</span><span class="n">latestState</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span></span><span class="line"><span class="cl">      <span class="n">target</span> <span class="o">=</span> <span class="n">value</span>
</span></span><span class="line"><span class="cl">  <span class="bp">self</span><span class="o">.</span><span class="n">states</span> <span class="o">=</span> <span class="p">[]</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>第七个是环境的状态转化模型, 这里由于每一个动作后，环境的下一个模型状态是确定的，也就是九宫格的每个格子是否有某个选手的棋子是确定的，因此转化的概率都是1，不存在某个动作后会以一定的概率到某几个新状态，比较简单。</p>
</li>
</ul>
<p>从这个例子，相信大家对于强化学习的建模会有一个初步的认识了。　　　　　　　　</p>
<p>以上就是强化学习的模型基础，下一篇会讨论马尔科夫决策过程。</p>
]]></description></item><item><title>车辆路径规划之Dubins曲线与RS曲线简述</title><link>https://jianye0428.github.io/posts/dubinsandrs/</link><pubDate>Tue, 20 Feb 2024 09:10:15 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/dubinsandrs/</guid><description><![CDATA[<h2 id="0-描述">0. 描述</h2>
<p>Dubins和RS曲线都是路径规划的经典算法，其中车辆运动学利用RS曲线居多，因此简单介绍Dubins并引出RS曲线。</p>
<p>花了点时间看了二者的论文，并阅读了一个开源的代码。</p>
<h2 id="1-dubins曲线">1. Dubins曲线</h2>
<p>Dubins曲线是在满足曲率约束和规定的始端和末端的切线（进入方向）的条件下，连接两个二维平面的最短路径。它满足给定的运动曲率约束，即转弯半径大于等于给定的半径。</p>
<p>假设顺时针圆周运动为R，逆时针圆周运动为L，直线运动为S。求出Dubins曲线，用任务来表达就是</p>
<p>给了车辆起始位置 $(x_{start},y_{start})$ ，车辆的朝向 $\theta_{start}$ ，再给一个车辆的目标位置 $(x_{end},y_{end})$ ，车辆的目标朝向为 $\theta_{end}$ 。车辆最多能实现的曲率为 $K_{max}$ 。车辆不可以做后退运动，只能向前开。</p>
<p>规划的曲线分三段，第一段是绕固定圆心的L或R，第二段是L/R/S，第三段是L/R。用这三段曲线可以使车辆从初始位姿连续的移动到目标位姿。</p>
<p>三段曲线可以组成的集合有6种={LSL、RSR、RSL、LSR、RLR、LRL}。这六种可能中最短的路径就是Dubins曲线。</p>
<p>网上有很多关于Dubins曲线的文章，都很简单。先把初始位姿和目标位姿做一下差值，得到一个更简单的坐标系。再通过画圆和直线，求解一些方程，就可以计算出不同选择路径的长度值。再从中取最小的，就可以得到Dubins曲线了。这里不多介绍。</p>
<p>有关Dubins的文章有很多，对于6种不同的路径，都有对应的公式去计算每段的长度值。</p>
<h2 id="2-reeds-shepp曲线">2. Reeds-Shepp曲线</h2>
<p><strong>1. 原理</strong></p>
<p><strong>“利用倒挡的RS曲线可以比Dubins曲线更优”</strong></p>
<p>论文《Optimal paths for a car that goes both forwards and backwards》提出了Reeds-Shepp曲线。这篇论文由Reeds和Shepp在1990年发表。他们提出了一种能够计算出车辆以固定转弯半径，由一个姿态向另一个姿态运动的最短路径的曲线，即Reeds-Shepp曲线，简称为RS曲线。</p>
<p>对于Dubins曲线，当我们需要车辆位置不变原地掉头时，有如下图的情况：</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">Dubins曲线</div>
</center>
<br>
<p>图A和图B都可以达到目标。根据Dubins曲线的定义，我们知道图B是最优的路线，同时存在另外一条曲线图C，也能达到相同的效果。但这和我们平时开车显然不同，因为我们的车辆是可以挂倒挡的。我们选择图D代表的路径，可以更快达到目标。</p>
<p>相较于Dubins曲线，RS曲线有了进一步的约束条件：要求每个点的曲率半径都大于1，同时允许车辆可以后退。当车辆可以倒退时，路径有可能被缩短变得更优，而此时Dubins曲线将不能满足要求。作者对RS曲线的所有可能进行了简化表示，在文中做出了一系列定义，我按照文章的顺序进行讲解。</p>
<p><strong>2. 定义</strong></p>
<p>•C代表左转（L）或右转（R），S代表沿直线行驶。C^+和C^-的上标代表前进和后退（在车辆里就是换档）。因此，CC代表的就是LR或者RL。</p>
<p>• $C^+<em>{\pi/2}$ 代表前进方向弧长走 $\pi/2$，C^-</em>{-\pi/2}代表后退方向弧长走\pi/2。所以再通用一些，C^\pm_t表达式中的C可以代表L、R或者S，上标代表前进方向，下标t是和上标正负号相同的代表弧长的值。</p>
<p>•C_uC_u这两个需要连在一起出现，代表两段弧长相等。</p>
<p>在诸如C^+_tC^-_uC^-_vv^+_w这样的路径族（由四段组成的路径，同样的还有C^-_tC^+_uC^+_vv^-_w……等）中，自由参数t,u,v,w一共有4个参数，比条件的数量（目标位置和角度）多了1个，因此对于给定的终点条件通常存在多个解。我们对族中的路径进行优化，能够得到一个额外的方程，结果就是 v = u，或v = π/2。这样看参数仍然是三个。</p>
<p>作者在后面会证明，确实还有类似于C^+C^-C^+C^-C^+C^-这样的路径存在，这样的路径并不在作者提到的形式之中。但是这种路径往往在我们的形式中有相同的替代路径。对于不在作者集合中的路径，将不会出现在简单的前向场景中。</p>
<p>作者提出了两种描述方式，一种是用\pm代表的正负方向</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;"></div>
</center>
<br>
<p>另一种是用 | 代表的档位变化</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>以车辆为例，如果用真实的左打轮和右打轮，加上档位变化，一共会有48种不同的路径，如下图。由于有一些路径会有多个公式来表达，所以这48种路径最多会有68个公式。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;"></div>
</center>
<br>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>Dubins曲线和我们的证明方式不同。Dubins证明了任何终点条件下都会存在路径，即问题的下限被确定了。同时，任何路径长度小于 \pi/8的路径一定是一个CSC类型的路径。然后容易得到，每个路径必须由有限的C和S组成，最终路径简化为了CSC和CCC两种可能。作者没有能够用Dubins的方法来解决本文章提到的车辆反向运动问题。作者在第7节证明了在不增加路径长度的情况下，最多5段就能表示路径，证明方法与Dubins类似。</p>
<p>作者除了用数学公式来推导证明，还用计算机来做了验证：设置了一个包含很多条子路径的集合W，随机出起始条件和终止条件，如果在集合W中找到了两条路径就能连接起点终点，那么集合W显然就是不充分的，就要对集合W进行一些修剪。最终用这种方式得到了一个最小的有效集合W。一旦猜测出了W，作者再次使用计算机来帮助进行大量情况下的广泛代数运算，以验证上述方法可以给出严格的证明。最后，作者发现证明可以简化为上图，这样普通人可以在没有计算机检查细节的情况下轻松理解。但作者认为，如果没有使用计算机，他们永远不可能找到正确的子路径集。（这实际上表明作者是在计算机辅助下，成功地找到了RS曲线的解，并通过广泛的代数运算验证了他们的方法。最终，他们再反过来简化证明过程，最终让RS曲线更易于理解。）</p>
<h2 id="3-等效运算">3. 等效运算</h2>
<p>作者提到，并不是每次都需要计算48种路径，因为存在一些基本变换规则可以简化计算</p>
<ul>
<li>第一种等效运算：”timeflip”——时间变换</li>
</ul>
<p>路径 $l^+ r^- s^- l^-$ 和路径 l^-r^+s^+l^+ 之间的关系就是时间变换，可以看出其实就是前进和后退动作替换了一下</p>
<p>当我们想求沿路径 l^-r^+s^+l^+ 从 [0,0,0] 到 [x,y,\phi] 时 ，我们可以求沿路径 l^+r^-s^-l^-从 [0,0,0] 到 [-x,y,-\phi]，求出的路径 l^+r^-s^-l^-中每段走的弧长，就是待求路径 l^-r^+s^+l^+ 的弧长结果</p>
<ul>
<li>第二种等效运算：“reflect”——反射变换</li>
</ul>
<p>路径 l^+r^-s^-l^- 和路径 r^+l^-s^-r^- 之间的关系就是反射变换，可以看出其实就是向左和向右替换了一下</p>
<p>当我们想求沿路径 r^+l^-s^-r^- 从 [0,0,0] 到 [x,y,\phi] 时 ，我们可以求沿路径 l^+r^-s^-l^-从 [0,0,0] 到 [x,-y,-\phi]，求出的路径 l^+r^-s^-l^-中每段走的弧长，就是待求路径 r^+l^-s^-r^- 的弧长结果</p>
<ul>
<li>第三种等效运算：“backwards”——反向变换</li>
</ul>
<p>路径 l^+r^-s^-l^- 和路径 l^-s^-r^-l^+ 之间的关系就是反向变换，可以看出其实两条路径前后顺序颠倒了一下</p>
<p>当我们想求沿路径 l^-s^-r^-l^+ 从 [0,0,0] 到 [x,y,\phi] 时 ，我们可以求沿路径 l^+r^-s^-l^-从 [0,0,0] 到 [xcos\phi+ysin\phi,xsin\phi-ycos\phi,\phi]，求出的路径 l^+r^-s^-l^-中每段走的弧长，就是待求路径 l^-s^-r^-l^+ 的弧长结果</p>
<p>上面提到了三种变换关系来简化运算，简单理解一下就是：</p>
<p>从 [0,0,0] 到 [x,y,\phi] 需要求解的三个路径 l^-r^+s^+l^+、r^+l^-s^-r^- 、l^-s^-r^-l^+，通过分别改变终点的坐标，均可以通过求解路径 l^+r^-s^-l^- 得到每段轨迹的弧长或前进距离</p>
<h2 id="4-流程与代码">4. 流程与代码</h2>
<p>与Dubins曲线一致，RS曲线每种路径也有对应的公式可以计算。</p>
<p>第一步：起始点坐标变换，令起点坐标变为(0,0,0)，终点的坐标转换为起点坐标系下的坐标，从而简化后续计算</p>
<p>q0 = [sx, sy, syaw]  # 起点:x,y,yaw</p>
<p>q1 = [gx, gy, gyaw]  # 终点:x,y,yaw</p>
<p>dx = q1[0] - q0[0]</p>
<p>dy = q1[1] - q0[1]</p>
<p>dth = q1[2] - q0[2]</p>
<p>c = math.cos(q0[2])</p>
<p>s = math.sin(q0[2])</p>
<p>x = (c * dx + s * dy) * max_curvature</p>
<p>y = (-s * dx + c * dy) * max_curvature</p>
<p># 起点变成了(0,0,0),终点坐标变成了(x, y, dth)</p>
<p>第二步：计算路径</p>
<p>利用三种基本定理，计算全部的路径</p>
<p>第三步：选择路径</p>
<p>选择最优的路径，并对生成的路径进行差值，得到路径上的每一个路径点</p>
<h2 id="5-总结">5. 总结</h2>
<p>原理基本上很清楚，暂时对可选路径计算的优化没有深究，之后再说。</p>
<p>ref: <a href="https://mp.weixin.qq.com/s/RfAEnFtUW7KkG7cSPqmWUw"target="_blank" rel="external nofollow noopener noreferrer">https://mp.weixin.qq.com/s/RfAEnFtUW7KkG7cSPqmWUw<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
]]></description></item><item><title>Git 命令查询</title><link>https://jianye0428.github.io/posts/commandsheet/</link><pubDate>Fri, 02 Feb 2024 09:32:18 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/commandsheet/</guid><description><![CDATA[<h1 id="git-常用命令汇总">Git 常用命令汇总</h1>
<h2 id="常规操作">常规操作</h2>
<ul>
<li><code>git push origin test</code> 推送本地分支到远程仓库</li>
<li><code>git rm -r --cached 文件/文件夹名字</code> 取消文件被版本控制</li>
<li><code>git reflog</code> 获取执行过的命令</li>
<li><code>git log --graph</code> 查看分支合并图</li>
<li><code>git merge --no-ff -m '合并描述'</code> 分支名 不使用<code>Fast forward</code>方式合并，采用这种方式合并可以看到合并记录</li>
<li><code>git check-ignore -v 文件名</code> 查看忽略规则</li>
<li><code>git add -f 文件名</code> 强制将文件提交</li>
</ul>
<h3 id="git-创建项目仓库">Git 创建项目仓库</h3>
<ul>
<li><code>git init</code> 初始化</li>
<li><code>git remote add origin url</code> 关联远程仓库</li>
<li><code>git pull</code></li>
<li><code>git fetch</code> 获取远程仓库中所有的分支到本地</li>
</ul>
<h3 id="忽略已加入到版本库中的文件">忽略已加入到版本库中的文件</h3>
<ul>
<li><code>git update-index --assume-unchanged file</code> 忽略单个文件</li>
<li><code>git rm -r --cached 文件/文件夹名字</code> (. 忽略全部文件)</li>
</ul>
<h3 id="取消忽略文件">取消忽略文件</h3>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git update-index --no-assume-unchanged file</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="拉取上传免密码">拉取、上传免密码</h3>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git config --global credential.helper store</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="分支操作">分支操作</h2>
<ul>
<li><code>git branch</code> 创建分支</li>
<li><code>git branch -b</code> 创建并切换到新建的分支上</li>
<li><code>git checkout</code> 切换分支</li>
<li><code>git branch</code> 查看分支列表</li>
<li><code>git branch -v</code> 查看所有分支的最后一次操作</li>
<li><code>git branch -vv</code> 查看当前分支</li>
<li><code>git branch -b 分支名 origin/分支名</code> 创建远程分支到本地</li>
<li><code>git branch --merged</code> 查看别的分支和当前分支合并过的分支</li>
<li><code>git branch --no-merged</code> 查看未与当前分支合并的分支</li>
<li><code>git branch -d 分支名</code> 删除本地分支</li>
<li><code>git branch -D 分支名</code> 强行删除分支</li>
<li><code>git push origin --delete 分支名</code> 删除远程仓库分支</li>
<li><code>git merge 分支名</code> 合并分支到当前分支上</li>
<li><code>git push -u &lt;remote&gt; &lt;local_branch&gt;</code> 关联本地分支到远程分支</li>
<li><code>git push --set-upstream &lt;remote&gt; &lt;local_branch&gt;</code> 关联本地分支到远程分支</li>
</ul>
<h2 id="暂存操作">暂存操作</h2>
<ul>
<li><code>git stash</code> 暂存当前修改</li>
<li><code>git stash apply</code> 恢复最近的一次暂存</li>
<li><code>git stash pop</code> 恢复暂存并删除暂存记录</li>
<li><code>git stash list</code> 查看暂存列表</li>
<li><code>git stash drop 暂存名</code>(例：stash@{0}) 移除某次暂存</li>
<li><code>git stash clear</code> 清除暂存</li>
</ul>
<h2 id="回退操作">回退操作</h2>
<ul>
<li><code>git reset --hard HEAD^</code> 回退到上一个版本</li>
<li><code>git reset --hard commitId</code> 回退到某个版本</li>
<li><code>git checkout -- file</code>撤销修改的文件(如果文件加入到了暂存区，则回退到暂存区的，如果文件加入到了版本库，则还原至加入版本库之后的状态)</li>
<li><code>git reset HEAD file</code> 撤回暂存区的文件修改到工作区</li>
</ul>
<h2 id="标签操作">标签操作</h2>
<ul>
<li><code>git tag 标签名</code> 添加标签(默认对当前版本)</li>
<li><code>git tag 标签名 commitId</code> 对某一提交记录打标签</li>
<li><code>git tag -a 标签名 -m '描述'</code> 创建新标签并增加备注</li>
<li><code>git tag</code> 列出所有标签列表</li>
<li><code>git show 标签名</code> 查看标签信息</li>
<li><code>git tag -d 标签名</code> 删除本地标签</li>
<li><code>git push origin 标签名</code> 推送标签到远程仓库</li>
<li><code>git push origin --tags</code> 推送所有标签到远程仓库</li>
<li><code>git push origin :refs/tags/标签名</code> 从远程仓库中删除标签</li>
</ul>
<h2 id="远程仓库">远程仓库</h2>
<ul>
<li><code>git remote -v</code>查看远程仓库地址</li>
<li><code>git remote show origin</code>查看远程仓库详情信息</li>
</ul>
<h2 id="查看某个-commit-提交属于哪个分支">查看某个 commit 提交属于哪个分支</h2>
<ul>
<li><code>git branch -l --contains &lt;commit_id&gt;</code> 本地分支</li>
<li><code>git branch -r --contains &lt;commit_id&gt;</code> 远程分支</li>
<li><code>git branch --all --contains &lt;commit_id&gt;</code> 所有分支</li>
</ul>
]]></description></item><item><title>Git 核心知识点总结</title><link>https://jianye0428.github.io/posts/gitnotes2/</link><pubDate>Fri, 02 Feb 2024 08:13:18 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/gitnotes2/</guid><description><![CDATA[<h1 id="git核心知识总结">Git核心知识总结</h1>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">Git 总览</div>
</center>
<br>
<h2 id="1什么是git">1.什么是Git</h2>
<p>在了解Git之前，我们先了解一下版本控制这个概念。</p>
<h3 id="11-什么是版本控制">1.1 什么是版本控制</h3>
<p>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 除了项目源代码，你可以对任何类型的文件进行版本控制。</p>
<h3 id="12-为什么需要版本控制">1.2 为什么需要版本控制</h3>
<p>有了它你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态，你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致项目问题出现的原因，又是谁在何时报告了某个功能缺陷等等。</p>
<h3 id="13-本地版本控制系统">1.3 本地版本控制系统</h3>
<p>许多人习惯用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。 这么做唯一的好处就是简单，但是特别容易犯错。 有时候会混淆所在的工作目录，一不小心会写错文件或者覆盖意想外的文件。</p>
<p>为了解决这个问题，人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异。</p>
<p>Git是当前最先进、最主流的分布式版本控制系统，免费、开源！核心能力就是版本控制。再具体一点，就是面向代码文件的版本控制，代码的任何修改历史都会被记录管理起来，意味着可以恢复到到以前的任意时刻状态。支持跨区域多人协作编辑，是团队项目开发的必备基础，所以Git也就成了程序员的必备技能。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">本地版本控制系统</div>
</center>
<br>
<h2 id="2git的来源">2.Git的来源</h2>
<p>Git是一种分布式版本控制系统，它的设计和开发最初由林纳斯·托瓦兹（Linus Torvalds）领导，他也是Linux操作系统的创始人。Git的开发始于2005年，其背景和初始目的与Linux开发社区的需求密切相关。</p>
<h3 id="21-背景和初始动机">2.1 背景和初始动机</h3>
<p>在Git之前，Linux内核的开发使用的是一个名为BitKeeper的商业版本控制系统。这个系统对Linux社区是免费的，但在2005年，由于一些争议和许可问题，Linux社区失去了对BitKeeper的免费许可。这促使托瓦兹寻找一个新的工具来管理Linux内核的开发。</p>
<p>托瓦兹对版本控制系统有几个明确的需求和目标：</p>
<ol>
<li><strong>「性能」</strong>：由于Linux内核的庞大和复杂性，性能成为一个关键因素。Git需要高效地处理大型项目。</li>
<li><strong>「分布式架构」</strong>：Git被设计为分布式系统，意味着每个开发者的计算机上都有整个代码库的完整历史记录，这样可以减少对中央服务器的依赖。</li>
<li><strong>「数据完整性」</strong>：Git强调数据的完整性。它通过对文件内容和目录结构使用SHA-1哈希来确保代码历史不被篡改。</li>
<li><strong>「简单的分支和合并」</strong>：在Linux开发中，分支和合并操作非常频繁。Git被设计为使这些操作尽可能简单和高效。</li>
</ol>
<h3 id="22-git的发展">2.2 Git的发展</h3>
<p>Git最初是作为一个命令行工具发布的，但随着时间的推移，围绕Git开发了大量的图形界面工具和增强功能，使其更加用户友好。Git迅速在开源社区中获得了广泛的接受，并逐渐成为世界上最流行的版本控制系统。</p>
<h3 id="23-github和git的普及">2.3 GitHub和Git的普及</h3>
<p>Git的普及也与GitHub这样的平台紧密相关。GitHub是一个基于Web的Git版本库托管服务，它提供了图形界面，并增加了如分叉、拉取请求和社交网络功能等特性，这些都极大地促进了Git的普及和开源文化的发展。</p>
<h2 id="3git的特点">3.Git的特点</h2>
<p>开源免费，使用广泛。</p>
<ul>
<li>强大的文档（代码）的历史版本管理，直接记录完整快照（完整内容，而非差异），支持回滚、对比。</li>
<li>分布式多人协作的的代码协同开发，几乎所有操作都是本地执行的，支持代码合并、代码同步。</li>
<li>简单易用的分支管理，支持高效的创建分支、合并分支。</li>
</ul>
<h2 id="4git的基本概念">4.Git的基本概念</h2>
<h3 id="41-概念汇总">4.1 概念汇总</h3>
<table>
<thead>
<tr>
<th style="text-align:left">概念名称</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">工作区（Workspace）</td>
<td style="text-align:left">就是在电脑里能看到的代码库目录，是我们搬砖的地方，新增、修改的文件会提交到暂存区</td>
</tr>
<tr>
<td style="text-align:left">暂存区（stage 或 index）</td>
<td style="text-align:left">用于临时存放文件的修改，实际上上它只是一个文件（.git/index），保存待提交的文件列表信息。</td>
</tr>
<tr>
<td style="text-align:left">版本库/仓库（Repository）</td>
<td style="text-align:left">Git的管理仓库，管理版本的数据库，记录文件/目录状态的地方，所有内容的修改记录（版本）都在这里。</td>
</tr>
<tr>
<td style="text-align:left">服务端/远程仓库（origin 或 remote）</td>
<td style="text-align:left">服务端的版本库，专用的Git服务器，为多人共享提供服务，承担中心服务器的角色。本地版本库通过push指令把代码推送到服务端版本库。</td>
</tr>
<tr>
<td style="text-align:left">本地仓库</td>
<td style="text-align:left">用户机器上直接使用的版本库</td>
</tr>
<tr>
<td style="text-align:left">分支（Branch）</td>
<td style="text-align:left">分支是从主线分离出去的“副本”，可以独立操作而互不干扰，仓库初始化就有一个默认主分支master。</td>
</tr>
<tr>
<td style="text-align:left">头（HEAD）</td>
<td style="text-align:left">HEAD类似一个“指针”，指向当前活动分支的最新版本。</td>
</tr>
<tr>
<td style="text-align:left">提交（Commit）</td>
<td style="text-align:left">把暂存区的所有变更的内容提交到当前仓库的活动分支。</td>
</tr>
<tr>
<td style="text-align:left">推送（Push）</td>
<td style="text-align:left">将本地仓库的版本推送到服务端（远程）仓库，与他人共享。</td>
</tr>
<tr>
<td style="text-align:left">拉取（Pull）</td>
<td style="text-align:left">从服务端（远程）仓库获取更新到本地仓库，获取他人共享的更新。</td>
</tr>
<tr>
<td style="text-align:left">获取（Fetch）</td>
<td style="text-align:left">从服务端（远程）仓库更新，作用同拉取（Pull），区别是不会自动合并。</td>
</tr>
<tr>
<td style="text-align:left">冲突（Conflict）</td>
<td style="text-align:left">多人对同一文件的工作副本进行更改，并将这些更改合并到仓库时就会面临冲突，需要人工合并处理。</td>
</tr>
<tr>
<td style="text-align:left">合并（Merge）</td>
<td style="text-align:left">对有冲突的文件进行合并操作，Git会自动合并变更内容，无法自动处理的冲突内容会提示人工处理。</td>
</tr>
<tr>
<td style="text-align:left">标签（Tags）</td>
<td style="text-align:left">标签指的是某个分支某个特定时间点的状态，可以理解为提交记录的别名，常用来标记版本。</td>
</tr>
<tr>
<td style="text-align:left">master（或main）</td>
<td style="text-align:left">仓库的“master”分支，默认的主分支，初始化仓库就有了。Github上创建的仓库默认名字为“main”</td>
</tr>
<tr>
<td style="text-align:left">origin/master</td>
<td style="text-align:left">表示远程仓库（origin）的“master”分支</td>
</tr>
<tr>
<td style="text-align:left">origin/HEAD</td>
<td style="text-align:left">表示远程仓库（origin）的最新提交的位置，一般情况等于“origin/master”</td>
</tr>
</tbody>
</table>
<h3 id="42-工作区暂存区仓库">4.2 工作区/暂存区/仓库</h3>
<p>工作区（Workspace）就是在电脑里能看到的代码库目录，是我们搬砖的地方，新增、修改的文件会提交到暂存区。</p>
<ul>
<li>在这里新增文件、修改文件内容，或删除文件。</li>
</ul>
<p>暂存区（stage或index）用于临时存放文件的修改，实际上上它只是一个文件（.git/index），保存待提交的文件列表信息。</p>
<ul>
<li>用git add 命令将工作区的修改保存到暂存区。</li>
</ul>
<p>版本库/仓库（Repository仓库）Git的管理仓库，管理版本的数据库，记录文件/目录状态的地方，所有内容的修改记录（版本）都在这里。就是工作区目录下的隐藏文件夹.git，包含暂存区、分支、历史记录等信息。</p>
<ul>
<li>用git commit 命令将暂存区的内容正式提交到版本库。</li>
<li>master 为仓库的默认分支master，HEAD是一个“指针”指向当前分支的最新提交，默认指向最新的master。</li>
</ul>
<h3 id="43-git的基本流程">4.3 Git的基本流程</h3>
<p>Git的工作流程核心就下面几个步骤。</p>
<ol>
<li>准备仓库：创建或从服务端克隆一个仓库。</li>
<li>编写代码：在工作目录中添加、修改代码。</li>
<li>暂存（git add）：将需要进行版本管理的文件放入暂存区域。</li>
<li>提交（git commit）：将暂存区域的文件提交到Git仓库。</li>
<li>推送（git push）：将本地仓库推送到远程仓库，同步版本库。</li>
<li>获取更新（fetch/pull）：从服务端更新到本地，获取他人推送的更新，与他人协作、共享。</li>
</ol>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">Git 工作 流程</div>
</center>
<br>
<ul>
<li><code>git commit -a</code> 指令省略了add到暂存区的步骤，直接提交工作区的修改内容到版本库，不包括新增的文件。</li>
<li><code>git fetch</code>、<code>git pull</code> 都是从远程服务端获取最新记录，区别是git pull多了一个步骤，就是自动合并更新工作区。</li>
<li><code>git checkout .</code> 、<code>git checkout [file]</code> 会清除工作区中未添加到暂存区的修改，用暂存区内容替换工作区。</li>
<li><code>git checkout HEAD .</code>、 <code>git checkout HEAD [file]</code> 会清除工作区、暂存区的修改，用HEAD指向的当前分支最新版本替换暂存区、工作区。</li>
<li><code>git diff</code> 用来对比不同部分之间的区别，如暂存区、工作区，最新版本与未提交内容，不同版本之间等。</li>
<li><code>git reset</code> 是专门用来撤销修改、回退版本的指令，替代上面checkout的撤销功能。</li>
</ul>
<p><strong>「基本的 Git 工作流程如下：」</strong></p>
<ol>
<li>在工作目录中修改文件。</li>
<li>暂存文件，将文件的快照放入暂存区域。</li>
<li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</li>
</ol>
<h3 id="44-git的状态">4.4 Git的状态</h3>
<p>Git在执行提交的时候，不是直接将工作区的修改保存到仓库，而是将暂存区域的修改保存到仓库。要提交文件，首先需要把文件加入到暂存区域中。因此，Git管理的文件有三（+2）种状态：</p>
<ul>
<li><strong>「未跟踪(untracked)：」</strong> 新添加的文件，或被移除跟踪的文件，未建立跟踪，通过git add添加暂存并建立跟踪。</li>
<li><strong>「未修改：」</strong> 从仓库签出的文件默认状态，修改后就是“已修改”状态了。</li>
<li><strong>「已修改(modified)：」</strong> 文件被修改后的状态。</li>
<li><strong>「已暂存(staged)：」</strong> 修改、新增的文件添加到暂存区后的状态。</li>
<li><strong>「已提交(committed)：」</strong> 从暂存区提交到版本库。</li>
</ul>
<h2 id="5git的安装">5.Git的安装</h2>
<p>Git官网：https://www.git-scm.com/ 下载安装包进行安装。Git的使用有两种方式：</p>
<ul>
<li><strong>「命令行」</strong>：Git的命令通过系统命令行工具，或Git提供的命令行工具运行（<code>C:\Program Files\Git\git-bash.exe</code>）</li>
<li><strong>「GUI工具」</strong>：Windows(GUI)、Mac(GUI)工具，需单独安装，使用更简单、更易上手。</li>
</ul>
<p><strong>「下一步傻瓜式安装即可。」</strong></p>
<p>指令<code>git --version</code>查看安装版本号</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ git --version
</span></span><span class="line"><span class="cl">git version 2.39.2.windows.1</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="6git快速入门">6.Git快速入门</h2>
<h3 id="61-创建仓库">6.1 创建仓库</h3>
<p>创建仓库的方式有两种。</p>
<ol>
<li>一种是创建全新的仓库，基于<code>git init</code>命令来，会在当前目录初始化创建仓库。</li>
<li>一种是通过<code>git clone + 仓库地址</code>的方式，一般叫做克隆远程仓库。</li>
</ol>
<p>首先准备一个本地的工作目录：GitRepo</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">新建本地仓库</div>
</center>
<br>
然后gitbash打开，初始化为git仓库。
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ git init
</span></span><span class="line"><span class="cl">Initialized empty Git repository in D:/IDEA Workplace/GitRepo/.git/</span></span></code></pre></td></tr></table>
</div>
</div><p>创建完多出了一个被隐藏的<code>.git</code>目录，这就是本地仓库Git的工作目录。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">生成.git文件夹</div>
</center>
<br>
<p>克隆远程仓库，如在gitee上创建的仓库 <code>https://gitee.com/gaoziman/vue3-doc.git</code></p>
<p>通过以下命令进行克隆：</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git clone https://gitee.com/gaoziman/vue3-doc.git</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">拉取远程代码</div>
</center>
<br>
<p>可以看到远程仓库就出现在我们的本地工作空间</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">远程代码出现在本地仓库</div>
</center>
<br>
<h3 id="62-暂存区add">6.2 暂存区add</h3>
<p><code>git add</code>命令就是把要提交的所有修改放到 <strong>「暂存区（Stage）」</strong>，然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到仓库。</p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>「指令」</strong></th>
<th style="text-align:left"><strong>「描述」</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git add [file1] [file2]</td>
<td style="text-align:left">添加文件到暂存区，包括修改的文件、新增的文件</td>
</tr>
<tr>
<td style="text-align:left">git add [dir]</td>
<td style="text-align:left">同上，添加目录到暂存区，包括子目录</td>
</tr>
<tr>
<td style="text-align:left">git add .</td>
<td style="text-align:left">同上，添加**「所有」**修改、新增文件（未跟踪）到暂存区</td>
</tr>
<tr>
<td style="text-align:left">git rm [file]</td>
<td style="text-align:left">删除工作区文件，并且将这次删除放入暂存区</td>
</tr>
</tbody>
</table>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 查看仓库状态</span>
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Your branch is up to date with <span class="s1">&#39;origin/master&#39;</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Changes not staged <span class="k">for</span> commit:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git add &lt;file&gt;...&#34;</span> to update what will be committed<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git restore &lt;file&gt;...&#34;</span> to discard changes in working directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">        modified:   Nodejs.md
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">no changes added to commit <span class="o">(</span>use <span class="s2">&#34;git add&#34;</span> and/or <span class="s2">&#34;git commit -a&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Administrator@WIN-20231112VVY MINGW64 /d/IDEA Workplace/GitRepo/vue3-doc/01-环境 <span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 添加到指定文件到暂存区</span>
</span></span><span class="line"><span class="cl">$ git add Nodejs.md
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Administrator@WIN-20231112VVY MINGW64 /d/IDEA Workplace/GitRepo/vue3-doc/01-环境 <span class="o">(</span>master<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 继续查看仓库状态</span>
</span></span><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Your branch is up to date with <span class="s1">&#39;origin/master&#39;</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Changes to be committed:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git restore --staged &lt;file&gt;...&#34;</span> to unstage<span class="o">)</span>
</span></span><span class="line"><span class="cl">        modified:   Nodejs.md</span></span></code></pre></td></tr></table>
</div>
</div><p>修改之后通过 <code>git add 文件名</code> 即可把文件提交至暂存区</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">把文件提交至暂存区</div>
</center>
<br>
<h3 id="63-commit提交">6.3 commit提交</h3>
<p><code>git commit</code>提交是以时间顺序排列被保存到数据库中的，就如游戏关卡一样，每一次提交（commit）就会产生一条记录：<code>id + 描述 + 快照内容</code>。</p>
<ul>
<li><strong>「commit id」</strong>：根据修改的文件内容采用摘要算法（SHA1）计算出不重复的40位字符，这么长是因为Git是分布式的，要保证唯一性、完整性，一般本地指令中可以只用前几位（6）。即使多年以后，依然可通过<code>id</code>找到曾经的任何内容和变动，再也不用担心丢失了。</li>
<li><strong>「描述」</strong>：针对本次提交的描述说明，建议**「准确」**填写，就跟代码中的注释一样，很重要。</li>
<li><strong>「快照」</strong>：就是完整的版本文件，以对象树的结构存在仓库下<code>\.git\objects</code>目录里，这也是Git效率高的秘诀之一。</li>
</ul>
<p>我们可以通过 <code>git reflog</code> 查看所有的提交记录包括回退记录。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">查看回退记录</div>
</center>
<br>
<p>我们可以通过提交所有的指令到仓库。</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"> git commit -a -m<span class="s1">&#39;修改README的版权信息&#39;</span></span></span></code></pre></td></tr></table>
</div>
</div><p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 <code>--amend</code> 选项的提交命令尝试重新提交：</p>
<p>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git commit --amend -m <span class="o">[</span>message<span class="o">]</span></span></span></code></pre></td></tr></table>
</div>
</div><p>取消暂存的文件</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git reset filename</span></span></code></pre></td></tr></table>
</div>
</div><p>撤消对文件的修改:</p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git checkout -- filename</span></span></code></pre></td></tr></table>
</div>
</div><p>用参数 <code>--oneline</code> 可以让日志输出更简洁（一行）</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">git log --oneline 输出</div>
</center>
<br>
<p><strong>「🔥指令：」</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>「指令」</strong></th>
<th style="text-align:left"><strong>「描述」</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git commit -m &lsquo;说明&rsquo;</td>
<td style="text-align:left">提交变更，参数<code>-m</code>设置提交的描述信息，应该正确提交，不带该参数会进入说明编辑模式</td>
</tr>
<tr>
<td style="text-align:left">git commit -a</td>
<td style="text-align:left">参数<code>-a</code>，表示直接从工作区提交到版本库，略过了<code>git add</code>步骤，不包括新增的文件</td>
</tr>
<tr>
<td style="text-align:left">git commit [file]</td>
<td style="text-align:left">提交暂存区的指定文件到仓库区</td>
</tr>
<tr>
<td style="text-align:left">git commit &ndash;amend -m</td>
<td style="text-align:left">使用一次新的<code>commit</code>，替代上一次提交，会修改<code>commit</code>的<code>hash</code>值（id）</td>
</tr>
<tr>
<td style="text-align:left">git log -n20</td>
<td style="text-align:left">查看日志(最近20条)，不带参数<code>-n</code>则显示所有日志</td>
</tr>
<tr>
<td style="text-align:left">git log -n20 &ndash;oneline</td>
<td style="text-align:left">参数“<code>--oneline</code>”可以让日志输出更简洁（一行）</td>
</tr>
<tr>
<td style="text-align:left">git log -n20 &ndash;graph</td>
<td style="text-align:left">参数“<code>--graph</code>”可视化显示分支关系</td>
</tr>
<tr>
<td style="text-align:left">git log &ndash;follow [file]</td>
<td style="text-align:left">显示某个文件的版本历史</td>
</tr>
<tr>
<td style="text-align:left">git blame [file]</td>
<td style="text-align:left">以列表形式显示指定文件的修改记录</td>
</tr>
<tr>
<td style="text-align:left">git <strong>「reflog」</strong></td>
<td style="text-align:left">查看所有可用的历史版本记录（实际是HEAD变更记录），包含被回退的记录（<strong>「重要」</strong>）</td>
</tr>
<tr>
<td style="text-align:left">git status</td>
<td style="text-align:left">查看本地仓库状态，比较常用的指令，加参数<code>-s</code>简洁模式</td>
</tr>
</tbody>
</table>
<h3 id="64-提交的唯一标识id">6.4 提交的唯一标识ID</h3>
<p>每一个提交都有一个唯一标识，主要就是提交的<code>hash</code>值<code>commit id</code>，在很多指令中会用到，如版本回退、拣选提交等，需要指定一个提交。那标识唯一提交有两种方式：</p>
<ul>
<li>首先就是<code>commit id</code>，一个40位编码，指令中使用的时候可以只输入前几位（6位）即可。</li>
<li>还有一种就是HEAD~n，是基于当前<code>HEAD</code>位置的一个相对坐标。
<ul>
<li><code>HEAD</code> 表示当前分支的最新版本，是比较常用的参数。</li>
<li><code>HEAD^</code>上一个版本，<code>HEAD^^</code> 上上一个版本。</li>
<li><code>HEAD~</code> 或<code>HEAD~1</code> 表示上一个版本，以此类推，<code>HEAD^10</code> 为最近第10个版本。</li>
<li><code>HEAD@{2}</code>在<code>git reflog</code>日志中标记的提交记录索引。</li>
</ul>
</li>
</ul>
<p>通过<code>git log</code>、<code>git reflog</code>可以查看历史日志，可以看每次提交的唯一编号（hash）。区别是<code>git reflog</code>可以查看所有操作的记录（实际是HEAD变更记录），包括被撤销回退的提交记录。</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git reflog -n10
</span></span><span class="line"><span class="cl">5acc914 <span class="o">(</span>HEAD -&gt; main<span class="o">)</span> HEAD@<span class="o">{</span>0<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">738748b <span class="o">(</span>dev<span class="o">)</span> HEAD@<span class="o">{</span>1<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">9312c3e HEAD@<span class="o">{</span>2<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">db03fcb HEAD@<span class="o">{</span>3<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">1b81fb3 HEAD@<span class="o">{</span>4<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">41ea423 HEAD@<span class="o">{</span>5<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">d3e15f9 HEAD@<span class="o">{</span>6<span class="o">}</span>: reset: moving to d3e15f9
</span></span><span class="line"><span class="cl">1b81fb3 HEAD@<span class="o">{</span>7<span class="o">}</span>: reset: moving to HEAD~1
</span></span><span class="line"><span class="cl">41ea423 HEAD@<span class="o">{</span>8<span class="o">}</span>: reset: moving to HEAD~
</span></span><span class="line"><span class="cl">d3e15f9 HEAD@<span class="o">{</span>9<span class="o">}</span>: reset: moving to HEAD~</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">查看变更记录</div>
</center>
<br>
<h3 id="65-diff比较">6.5 diff比较</h3>
<p><code>git diff</code>用来比较不同文件版本之间的差异。</p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>「指令」</strong></th>
<th style="text-align:left"><strong>「描述」</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>「git diff」</strong></td>
<td style="text-align:left">查看暂存区和工作区的差异</td>
</tr>
<tr>
<td style="text-align:left">git diff [file]</td>
<td style="text-align:left">同上，指定文件</td>
</tr>
<tr>
<td style="text-align:left">git diff &ndash;cached</td>
<td style="text-align:left">查看已暂存的改动，就是暂存区与新版本<code>HEAD</code>进行比较</td>
</tr>
<tr>
<td style="text-align:left">git diff &ndash;staged</td>
<td style="text-align:left">同上</td>
</tr>
<tr>
<td style="text-align:left">git diff &ndash;cached [file]</td>
<td style="text-align:left">同上，指定文件</td>
</tr>
<tr>
<td style="text-align:left">git diff HEAD</td>
<td style="text-align:left">查看已暂存的+未暂存的所有改动，就是与最新版本<code>HEAD</code>进行比较</td>
</tr>
<tr>
<td style="text-align:left">git diff HEAD~</td>
<td style="text-align:left">同上，与上一个版本比较。<code>HEAD~</code>表示上一个版本，<code>HEAD~10</code>为最近第10个版本</td>
</tr>
<tr>
<td style="text-align:left">git diff [id] [id]</td>
<td style="text-align:left">查看两次提交之间的差异</td>
</tr>
<tr>
<td style="text-align:left">git diff [branch]</td>
<td style="text-align:left">查看工作区和分支直接的差异</td>
</tr>
</tbody>
</table>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 查看文件的修改</span>
</span></span><span class="line"><span class="cl">$ git diff README.md
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看两次提交的差异</span>
</span></span><span class="line"><span class="cl">$ git diff 8f4244 1da22
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示今天你写了多少行代码：工作区+暂存区</span>
</span></span><span class="line"><span class="cl">$ git diff --shortstat <span class="s2">&#34;@{10 day ago}&#34;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="7远程仓库">7.远程仓库</h2>
<p>Git作为分布式的版本管理系统，我们每个本地终端都有属于自己的Git仓库。但团队协作还需一个中间仓库，作为控制中心，同步各个仓库。于是服务端（远程）仓库就来承担这个职责，服务端不仅有仓库，还配套相关管理功能，这就是所谓的 <strong>「远程仓库」</strong> 。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">远程仓库</div>
</center>
<br>
远程仓库有好几种，大致分为下面几种。
<ul>
<li>公共Git服务器，如Github、码云Gitee、腾讯Coding等。</li>
<li>搭建私有Git服务器，如开源的Gitlab、Gitea、等。</li>
</ul>
<h3 id="71-远程仓库指令">7.1 远程仓库指令</h3>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>「指令」</strong></th>
<th style="text-align:left"><strong>「描述」</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git clone [git地址]</td>
<td style="text-align:left">从远程仓库克隆到本地（当前目录）</td>
</tr>
<tr>
<td style="text-align:left">git remote -v</td>
<td style="text-align:left">查看所有远程仓库，不带参数<code>-v</code>只显示名称</td>
</tr>
<tr>
<td style="text-align:left">git remote show [remote]</td>
<td style="text-align:left">显示某个远程仓库的信息</td>
</tr>
<tr>
<td style="text-align:left">git remote add [name] [url]</td>
<td style="text-align:left">增加一个新的远程仓库，并命名</td>
</tr>
<tr>
<td style="text-align:left">git remote rename [old] [new]</td>
<td style="text-align:left">修改远程仓库名称</td>
</tr>
<tr>
<td style="text-align:left"><strong>「git pull [remote] [branch]」</strong></td>
<td style="text-align:left">取回远程仓库的变化，并与本地版本合并</td>
</tr>
<tr>
<td style="text-align:left"><strong>「git pull」</strong></td>
<td style="text-align:left">同上，针对当前分支</td>
</tr>
<tr>
<td style="text-align:left">git fetch [remote]</td>
<td style="text-align:left">获取远程仓库的所有变动到本地仓库，不会自动合并！需要手动合并</td>
</tr>
<tr>
<td style="text-align:left"><strong>「git push」</strong></td>
<td style="text-align:left">推送当前分支到远程仓库</td>
</tr>
<tr>
<td style="text-align:left">git push [remote] [branch]</td>
<td style="text-align:left">推送本地当前分支到远程仓库的指定分支</td>
</tr>
<tr>
<td style="text-align:left">git push [remote] &ndash;force/-f</td>
<td style="text-align:left">强行推送当前分支到远程仓库，即使有冲突，⚠️很危险！</td>
</tr>
<tr>
<td style="text-align:left">git push [remote] &ndash;all</td>
<td style="text-align:left">推送所有分支到远程仓库</td>
</tr>
<tr>
<td style="text-align:left">git push –u</td>
<td style="text-align:left">参数<code>–u</code>表示与远程分支建立关联，第一次执行的时候用，后面就不需要了</td>
</tr>
<tr>
<td style="text-align:left">git remote rm [remote-name]</td>
<td style="text-align:left">删除远程仓库</td>
</tr>
<tr>
<td style="text-align:left">git pull &ndash;rebase</td>
<td style="text-align:left">使用rebase的模式进行合并</td>
</tr>
</tbody>
</table>
<h3 id="72-push和pull">7.2 push和pull</h3>
<p><code>git push</code>、<code>git pull</code>是团队协作中最常用的指令，用于同步本地、服务端的更新，与他人协作。</p>
<p><strong>「🔸推送」</strong>（push）：推送本地仓库到远程仓库。</p>
<ul>
<li>如果推送的更新与服务端存在冲突，则会被拒绝，<code>push</code>失败。一般是有其他人推送了代码，导致文件冲突，可以先<code>pull</code>代码，在本地进行合并，然后再<code>push</code>。</li>
</ul>
<p><strong>「🔸拉取」</strong>（pull）：从服务端（远程）仓库更新到本地仓库。</p>
<ul>
<li><code>git pull</code>：拉取服务端的最新提交到本地，并与本地合并，合并过程同分支的合并。</li>
<li><code>git fetch</code>：拉取服务端的最新提交到本地，不会自动合并，也不会更新工作区。</li>
</ul>
<h3 id="74-fetch和pull有什么区别">7.4 fetch和pull有什么区别</h3>
<h4 id="1-git-fetch">1. Git Fetch</h4>
<p><code>git fetch</code>命令用于从另一个仓库（例如，远程仓库）下载新的分支和数据，但不会自动合并或修改你当前工作目录下的文件或分支。<code>fetch</code> 命令会把远程仓库的所有信息拉取到本地仓库，但这些改动不会反映在你的当前工作分支上，除非你明确地进行合并。</p>
<p>换句话说，<code>git fetch</code>是一种安全的方式来查看别人已经做了哪些工作，而这些变更在你用<code>git fetch</code>之后不会影响你当前的工作状态。如果你想要让这些变更影响你的当前分支，你需要用<code>git merge</code>手动合并，如<code>git merge origin/master</code>（如果你是从<code>master</code>分支上fetch的）。</p>
<h4 id="2-git-pull">2. Git Pull</h4>
<p><code>git pull</code>命令实际上是<code>git fetch</code>加上<code>git merge</code>命令的组合。当你执行<code>git pull</code>，Git会从远程仓库获取最新的版本信息，然后尝试自动合并到你当前的分支。通常情况下，这意味着它将远程的更新内容合并到你当前分支的本地副本中。</p>
<p>在简单的情况下，<code>git pull</code>会顺利地将远程变更合并到你的本地分支，你的工作流程可以无缝继续。然而，如果在fetch的数据与你本地的修改存在冲突时，你可能需要手动解决这些冲突。</p>
<h4 id="3-使用场景对比">3. 使用场景对比</h4>
<p>在不清楚远程分支的情况下，你可能更倾向于首先使用<code>git fetch</code>来查看有哪些更新，待检查完更新内容后再决定是否合并到当前分支。这是一种更为谨慎的做法，尤其适用于复杂的合并操作，或者当你不希望自动将更改应用到本地仓库时使用。</p>
<p>另一方面，如果你相信远程的变更不会引起任何问题，并且希望你的本地分支保持与远程分支的同步，可以直接使用<code>git pull</code>。</p>
<h4 id="4案例">4.案例</h4>
<p>获取远程仓库的更新数据，但不合并到当前分支：</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git fetch origin</span></span></code></pre></td></tr></table>
</div>
</div><p>获取远程仓库的更新数据并自动合并到当前分支：</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git pull origin master  # 拉取origin远程仓库的master分支并合并到当前分支</span></span></code></pre></td></tr></table>
</div>
</div><p><code>git fetch</code>用于安全地查看远程变更，而<code>git pull</code>则用于获取并立刻应用这些变更。两者合适的使用取决于你想如何管理远程数据和本地分支的关系。</p>
<h2 id="8分支">8.分支</h2>
<p>几乎每一种版本控制系统都以某种形式支持分支，一个分支代表一条独立的开发线。</p>
<p>使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">分支示意</div>
</center>
<br>
<p>Git 分支实际上是指向更改快照的指针。</p>
<p>有人把 Git 的分支模型称为**「必杀技特性」**，而正是因为它，将 <strong>「Git」</strong> 从版本控制系统家族里区分出来。</p>
<h3 id="81-branch">8.1 branch</h3>
<p>加入，准备1月份发布新版本，要新开发一些新功能，占领市场。你和小伙伴 <strong>「张三」</strong> 一起负责开发一个新功能A，开发周期2周，在这两周你们的代码不能影响其他人，不影响主分支。这个时候就可以为这个新功能创建一个分支，你们两在这个分支上干活，2周后代码开发完了、测试通过，就可以合并进要发版的开发分支了。安全、高效，不影响其他人工作，完美！</p>
<p>实际开发中，我们可能会有多个分支进行开发。</p>
<ul>
<li><strong>「master」</strong>：作为主分支，存放稳定的代码，就是开发后测试通过的代码，不允许随便修改和合并。</li>
<li><strong>「开发分支」</strong>：用于团队日常开发用，比如团队计划12月份开发10个功能并发版，则在此分支上进行，不影响主分支的稳定，如果我们开发到一个成熟阶段，依然可以合并到master主分支。</li>
</ul>
<blockquote>
<p>❝</p>
<p>**「分支」**就是指向某一个提交记录的“指针”引用，因此创建分支是非常快的，不管仓库多大。当我们运行<code>git branch dev</code>创建了一个名字为<code>dev</code>的分支，Git实际上是在<code>.git\refs\heads</code>下创建一个<code>dev</code>的引用文件（没有扩展名）。</p>
<p>❞</p>
</blockquote>
<h3 id="82-分支命令">8.2 分支命令</h3>
<p>我这里讲这些命令总结为思维导图，大家可以参考一下。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">branch 分支示意导图</div>
</center>
<br>
<p>列出了当前的所有分支，星号“*”开头的“main”为当前活动分支。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">列出当前的所有分支</div>
</center>
<br>
<h3 id="83-分支冲突">8.3 分支冲突</h3>
<p>把两个分支的修改内容合并到一起，常用的合并指令<code>git merge [branch]</code>，将分支<code>[branch]</code>合并到当前分支。根据要合并的内容的不同，具体合并过程就会有多种情况。</p>
<p>首先我们准备一个案例项目，我已经在gitee准备好了，非常简单，只有三个简单的文件。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">gitee 代码</div>
</center>
<br>
<h4 id="1-快速合并">1. 快速合并</h4>
<p>合并<code>dev</code>到<code>master</code>，注意要先切换到<code>master</code>分支，然后执行<code>git merge dev</code>，把<code>dev</code>合并到当前分支。</p>
<p>首先创建dev分支并切换到dev分支上去。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">创建dev分支</div>
</center>
<br>
<p>然后再dev分支上面创建一个b.txt文件，随之提交到远程仓库中。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>可以看到我们远程仓库的dev分支上面已经有了b.txt这个文件。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>然后切换到master分支上面，把dev分支合并到我们的master主分支上面。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>同时可以看到我们远程仓库中master分支也同步到了dev分支的b.txt文件。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<h4 id="2-普通合并">2. 普通合并</h4>
<p>如果<code>master</code>有变更，存在分支交叉，则会把两边的变更合并成一个提交。</p>
<ul>
<li>如果两边变更的文件不同，没有什么冲突，就自动合并了。</li>
<li>如果有修改同一个文件，则会存在冲突，到底该采用哪边的，程序无法判断，就换产生冲突。冲突内容需要人工修改后再重新提交，才能完成最终的合并。</li>
</ul>
<p>我们在远程仓库master分支中手动更改a.txt文件来演示。</p>
<h5 id="1-第一种情况">1. 第一种情况</h5>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时我们在本地仓库中更改其他文件，只要不是a.txt即可，然后push到远程。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时发现我们当前本地仓库的版本号与远程仓库master分支的版本号不一致，导致提交不上去。</p>
<p>这种情况还是比较简单的，只需要通过 <code>git pull</code> 命令将本地版本与远程版本同步即可</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时会进行自动合并到本地分支，并当做一次提交，提交信息大家也可以进行更改，我这里默认即可。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时再次提交即可成功提交到远程仓库中。</p>
<h5 id="2-第二种情况">2. 第二种情况</h5>
<p>上面那种方式处理起来比较简单，因为是处理不同的文件。</p>
<p>下面我来演示一下对于同一个文件冲突情况进行解决。</p>
<p>我们在远程仓库手动添加了以下这句话进行对b.txt文件的修改。(可以理解为程序员A修改了b.txt文件并提交到远程仓库中去。)</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时程序员B也在本地修改了b.txt文件。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>然后通过一系列命令提交至远程仓库。</p>
<p>可以发现出现冲突之后，我们立即通过git pull 命令进行了同步，但是初始我们的这里发生了很多变化，变成了**「master | MENERGING」**。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时这种情况就是因为在自动合并的时候出现了冲突，git无法帮助我们解决，需要我们自己手动解决冲突。</p>
<p>然后我们在本地打开b.txt文件。</p>
<p>可以看到确实也把远程更改的内容同步过来了，这里就需要我们手动解决，由我们和另外一个程序员协商到底是保留谁的内容或者是都保留。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
此时我们觉得都进行保留，然后删除其他多余内容。
<p>然后进行代码提交。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>此时可以发现远程仓库b.txt文件内容已经发现了改变，并且是由我们手动解决并提交的。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>大功告成!!</p>
<h2 id="9git的版本回退">9.Git的版本回退</h2>
<p>如果发现我们编写代码中写错了要怎么办，但又分好几种情况，我们依次往下看。</p>
<ul>
<li>❓还没提交的怎么撤销？ &ndash; checkout
<ul>
<li>还未提交的修改（工作区、暂存区）不想要了，用签出指令（checkout）进行撤销清除。</li>
<li>或者用<code>checkout</code>的新版回滚指令<code>reset</code>。</li>
</ul>
</li>
<li>❓<strong>「已提交但么有push的提交如何撤销？」</strong>—— <code>reset</code>、<code>revert</code></li>
<li>❓<strong>「已push的提交如何撤销？」</strong>—— 同上，先本地撤销，然后强制推送<code>git push origin -f</code>，<strong>「⚠️注意慎用！」</strong> 记得先<code>pull</code>获取更新。</li>
</ul>
<h3 id="91-版本回退命令">9.1 版本回退命令</h3>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>「指令」</strong></th>
<th style="text-align:left"><strong>「描述」</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">git checkout .</td>
<td style="text-align:left">撤销工作区的（未暂存）修改，把暂存区恢复到工作区。不影响暂存区，如果没暂存，则撤销所有工作区修改</td>
</tr>
<tr>
<td style="text-align:left">git checkout [file]</td>
<td style="text-align:left">同上，<code>file</code>指定文件</td>
</tr>
<tr>
<td style="text-align:left">git checkout HEAD .</td>
<td style="text-align:left">撤销工作区、暂存区的修改，用<code>HEAD</code>指向的当前分支最新版本替换工作区、暂存区</td>
</tr>
<tr>
<td style="text-align:left">git checkout HEAD [file]</td>
<td style="text-align:left">同上，<code>file</code>指定文件</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">git reset</td>
<td style="text-align:left">撤销暂存区状态，同<code>git reset HEAD</code>，不影响工作区</td>
</tr>
<tr>
<td style="text-align:left">git reset HEAD [file]</td>
<td style="text-align:left">同上，指定文件<code>file</code>，<code>HEAD</code>可省略</td>
</tr>
<tr>
<td style="text-align:left">git reset [commit]</td>
<td style="text-align:left">回退到指定版本，清空暂存区，不影响工作区。工作区需要手动<code>git checkout</code>签出</td>
</tr>
<tr>
<td style="text-align:left">git reset &ndash;soft [commit]</td>
<td style="text-align:left">移动分支<code>master</code>、<code>HEAD</code>到指定的版本，不影响暂存区、工作区，需手动<code>git checkout</code>签出更新</td>
</tr>
<tr>
<td style="text-align:left">git reset &ndash;hard HEAD</td>
<td style="text-align:left">撤销工作区、暂存区的修改，用当前最新版</td>
</tr>
<tr>
<td style="text-align:left">git reset &ndash;hard HEAD~</td>
<td style="text-align:left">回退到上一个版本，并重置工作区、暂存区内容。</td>
</tr>
<tr>
<td style="text-align:left">git reset &ndash;hard [commit]</td>
<td style="text-align:left">回退到指定版本，并重置工作区、暂存区内容。</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">git <strong>「revert」</strong>[commit]</td>
<td style="text-align:left">撤销一个提交，会用一个新的提交（原提交的逆向操作）来完成撤销操作，如果已<code>push</code>则重新<code>push</code>即可</td>
</tr>
</tbody>
</table>
<ul>
<li><code>git checkout .</code>、<code>git checkout [file]</code> 会清除工作区中未添加到暂存区的修改，用暂存区内容替换工作区。</li>
<li><code>git checkout HEAD .</code>、<code>git checkout HEAD [file]</code> 会清除工作区、暂存区的修改，用HEAD指向的当前分支最新版本替换暂存区、工作区。</li>
</ul>
<h4 id="1-只撤销工作区的修改未暂存">1. 只撤销工作区的修改（未暂存）</h4>
<p>撤销工作区的（未暂存）修改，把暂存区恢复到工作区。不影响暂存区，如果没暂存，则撤销所有工作区修改。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<h4 id="2-撤销工作区暂存区的修改">2. 撤销工作区、暂存区的修改</h4>
<p>撤销工作区、暂存区的修改，用<code>HEAD</code>指向的当前分支最新版本替换工作区、暂存区</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<h3 id="92-reset">9.2 reset</h3>
<p><code>reset</code>是专门用来撤销修改、回退版本的指令，支持的场景比较多，多种撤销姿势，所以参数组合也比较多。简单理解就是移动<code>master</code>分支、<code>HEAD</code>的“指针”地址，理解这一点就基本掌握<code>reset</code>了。</p>
<p><code>reset</code>有三种模式，对应三种参数：<code>mixed</code>（默认模式）、<code>soft</code>、<code>hard</code>。三种参数的主要区别就是对工作区、暂存区的操作不同。</p>
<ul>
<li><code>mixed</code>为默认模式，参数可以省略。</li>
<li>只有<code>hard</code>模式会重置工作区、暂存区，一般用这个模式会多一点。</li>
</ul>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<table>
<thead>
<tr>
<th style="text-align:left">模式名称</th>
<th style="text-align:left"><strong>「描述」</strong></th>
<th style="text-align:left"><strong>「HEAD的位置」</strong></th>
<th style="text-align:left"><strong>「暂存区」</strong></th>
<th style="text-align:left"><strong>「工作区」</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>「soft」</strong></td>
<td style="text-align:left">回退到某一个版本，工作区不变，需手动<code>git checkout</code></td>
<td style="text-align:left">修改</td>
<td style="text-align:left">不修改</td>
<td style="text-align:left">不修改</td>
</tr>
<tr>
<td style="text-align:left"><strong>「mixed」</strong>(默认)</td>
<td style="text-align:left">撤销暂存区状态，不影响工作区，需手动<code>git checkout</code></td>
<td style="text-align:left">修改</td>
<td style="text-align:left">修改</td>
<td style="text-align:left">不修改</td>
</tr>
<tr>
<td style="text-align:left"><strong>「hard」</strong></td>
<td style="text-align:left">重置未提交修改（工作区、暂存区）</td>
<td style="text-align:left">修改</td>
<td style="text-align:left">修改</td>
<td style="text-align:left">修改</td>
</tr>
</tbody>
</table>
<p>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p>
<h4 id="1-撤销暂存区">1. 撤销暂存区</h4>
<p>这个其实跟刚刚的 <code>git checkout HEAD .</code>是一样的。</p>
<h4 id="2-撤销工作区暂存区修改">2. 撤销工作区、暂存区修改</h4>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git reset --hard HEAD</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="3-回退版本库到上一个版本并重置工作区暂存">3. 回退版本库到上一个版本，并重置工作区、暂存</h4>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git reset --hard HEAD~</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到他已经回到了我们上一个版本。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>通过git log 日志查看也没有了之前的记录，而是被HEAD指向到上一个版本。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<h4 id="4-回到原来的版本并重置工作区暂存">4. 回到原来的版本，并重置工作区、暂存</h4>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ git reset --hard 891350d</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到他又回到上上一步，也就是对上一步操作进行撤销。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<h4 id="5-查看所有历史提交记录">5. 查看所有历史提交记录</h4>
<div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git reflog</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<h2 id="10idea集成git">10.IDEA集成Git</h2>
<p>通过以上内容，我们对Git整个工作流程有了一些认识，以及知道如何使用Git进行平时的开发。</p>
<p>但是在真实的开发中，我们可能并不是使用命令行进行操作，而是在IDEA中进行图形化操作，我们写完代码即可进行提交。</p>
<p>我们打开IDEA，依次在settings &mdash;》Version Control &mdash;》 Git。</p>
<p>选择自己的Git安装路径，然后进行测试看是否成功。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>点击Test之后看到自己对应的Git版本号之后即可说明我们初步测试成功。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>然后就可以在IDEA中进行代码的编写。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
然后讲代码push到远程仓库。
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">BP Network</div>
</center>
<br>
<p>相比于命令行，IDEA的图形化操作是不是让人更省心，简单易上手。</p>
<h2 id="11参考文献">11.参考文献</h2>
<ul>
<li><a href="https://git-scm.com/book/zh/v2"target="_blank" rel="external nofollow noopener noreferrer">https://git-scm.com/book/zh/v2<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://www.yuque.com/kanding/ktech/ccgylqhnb94ug4bu#LlJg3"target="_blank" rel="external nofollow noopener noreferrer">https://www.yuque.com/kanding/ktech/ccgylqhnb94ug4bu#LlJg3<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://javaguide.cn/tools/git/git-intro.html"target="_blank" rel="external nofollow noopener noreferrer">https://javaguide.cn/tools/git/git-intro.html<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://www.yiibai.com/git"target="_blank" rel="external nofollow noopener noreferrer">https://www.yiibai.com/git<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
</ul>
]]></description></item><item><title>CMake 笔记 | [45] 使用Doxygen构建文档</title><link>https://jianye0428.github.io/posts/cmake_note_45/</link><pubDate>Thu, 01 Feb 2024 13:11:17 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_45/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><strong>文档在所有的软件项目都是有必要的：</strong></p>
<ul>
<li><strong>对于用户来说，了解如何获得并构建代码，并且如何有效地使用源代码或库；</strong></li>
<li><strong>对于开发人员来说，文档可用来描述你源码细节，并帮助其他程序员参与其中为该项目作出贡献。</strong></li>
</ul>
<p><strong><code>Doxygen</code>是非常流行的源代码文档工具。可以在代码中添加文档标记作为注释，而后运行<code>Doxygen</code>提取这些注释，并以<code>Doxyfile</code>配置文件中定义的格式创建文档。<code>Doxygen</code>可以输出<code>HTML</code>、<code>XML</code>，甚至<code>LaTeX</code>或<code>PDF</code>。本篇，将使用CMake来构建<code>Doxygen</code>文档。</strong></p>
</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── cmake
</span></span><span class="line"><span class="cl">│   └── UseDoxygenDoc.cmake
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── docs
</span></span><span class="line"><span class="cl">│   ├── Doxyfile.in
</span></span><span class="line"><span class="cl">│   └── front_page.md
</span></span><span class="line"><span class="cl">└── src
</span></span><span class="line"><span class="cl">    ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">    ├── hello_world.cpp
</span></span><span class="line"><span class="cl">    ├── message.cpp
</span></span><span class="line"><span class="cl">    └── message.hpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter10/01"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter10/01<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">GNUInstallDirs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_LIBRARY_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_RUNTIME_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list</span><span class="p">(</span><span class="n">APPEND</span> <span class="n">CMAKE_MODULE_PATH</span> <span class="s">&#34;${CMAKE_SOURCE_DIR}/cmake&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">UseDoxygenDoc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_doxygen_doc</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">BUILD_DIR</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">_build</span>
</span></span><span class="line"><span class="cl">  <span class="n">DOXY_FILE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">docs</span><span class="o">/</span><span class="n">Doxyfile</span><span class="p">.</span><span class="n">in</span>
</span></span><span class="line"><span class="cl">  <span class="n">TARGET_NAME</span>
</span></span><span class="line"><span class="cl">    <span class="n">docs</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMENT</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;HTML documentation&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_doxygen_doc</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">BUILD_DIR</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">_build</span>
</span></span><span class="line"><span class="cl">  <span class="n">DOXY_FILE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">docs</span><span class="o">/</span><span class="n">Doxyfile</span><span class="p">.</span><span class="n">in</span>
</span></span><span class="line"><span class="cl">  <span class="n">TARGET_NAME</span>
</span></span><span class="line"><span class="cl">    <span class="n">docs</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMENT</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;HTML documentation&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这是一个自定义函数，该函数在<code>cmake/UseDoxygenDox.cmake</code>中被定义。有四个参数：<code>BUILD_DIR</code>,<code>DOXY_FILE</code>,<code>TARGET_NAME</code>以及<code>COMMENT</code>。具体使用方法，请参考下面的介绍。</p>
<p>当然，为了能够使用<code>Doxygen</code>需要事先执行以下命令安装：</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo apt install doxygen</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>cmake/UseDoxygenDoc.cmake</strong></p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">Perl</span> <span class="n">REQUIRED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">Doxygen</span> <span class="n">REQUIRED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">function</span><span class="p">(</span><span class="n">add_doxygen_doc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">oneValueArgs</span> <span class="n">BUILD_DIR</span> <span class="n">DOXY_FILE</span> <span class="n">TARGET_NAME</span> <span class="n">COMMENT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">multiValueArgs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">cmake_parse_arguments</span><span class="p">(</span><span class="n">DOXY_DOC</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;${options}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;${oneValueArgs}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;${multiValueArgs}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">ARGN</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">configure_file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">DOXY_DOC_DOXY_FILE</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">DOXY_DOC_BUILD_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">Doxyfile</span>
</span></span><span class="line"><span class="cl">    <span class="err">@</span><span class="n">ONLY</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">add_custom_target</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">DOXY_DOC_TARGET_NAME</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMAND</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">DOXYGEN_EXECUTABLE</span><span class="p">}</span> <span class="n">Doxyfile</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORKING_DIRECTORY</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">DOXY_DOC_BUILD_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMENT</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;Building ${DOXY_DOC_COMMENT} with Doxygen&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">VERBATIM</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Added ${DOXY_DOC_TARGET_NAME} [Doxygen] target to build documentation&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endfunction</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>set(options)</code>: 定义一个变量<code>options</code>，在这里没有列出任何选项，表示该函数没有不带值的选项参数。</li>
<li><code>set(oneValueArgs BUILD_DIR DOXY_FILE TARGET_NAME COMMENT)</code>: 定义了接受单个值的参数。这里列出了四个参数：<code>BUILD_DIR</code>是文档构建的目录，<code>DOXY_FILE</code>是Doxygen的配置文件，<code>TARGET_NAME</code>是CMake目标的名字，<code>COMMENT</code>是构建时显示的注释。</li>
<li><code>set(multiValueArgs)</code>: 定义了接受多个值的参数，但在此脚本中未使用。</li>
<li><code>cmake_parse_arguments(DOXY_DOC ...)</code>: 用于解析调用函数时传入的参数，并将解析后的值存储到<code>DOXY_DOC</code>变量中。</li>
<li><code>configure_file(...)</code>: 用于处理配置文件。它将<code>DOXY_DOC_DOXY_FILE</code>参数指定的Doxygen配置文件复制到<code>DOXY_DOC_BUILD_DIR</code>参数指定的构建目录，并替换其中的变量。</li>
<li><code>add_custom_target(...)</code>: 添加了一个自定义的目标到CMake，执行这个目标时，它会在<code>DOXY_DOC_BUILD_DIR</code>目录下运行Doxygen来生成文档。</li>
<li><code>COMMAND ${DOXYGEN_EXECUTABLE} Doxyfile</code>: 这是实际调用Doxygen命令的部分。</li>
<li><code>WORKING_DIRECTORY ${DOXY_DOC_BUILD_DIR}</code>: 指定了Doxygen命令运行的工作目录。</li>
<li><code>COMMENT &quot;Building ${DOXY_DOC_COMMENT} with Doxygen&quot;</code>: 设置了当执行这个CMake目标时显示的注释。</li>
<li><code>VERBATIM</code>: 保证了命令行在所有平台上以字面意义执行，没有任何变化。</li>
<li><code>message(STATUS &quot;Added ${DOXY_DOC_TARGET_NAME} [Doxygen] target to build documentation&quot;)</code>: 这行打印一条状态消息，告诉用户已经添加了一个名为<code>${DOXY_DOC_TARGET_NAME}</code>的目标，用于构建文档。</li>
</ul>
<p><strong>docs/Doxyfile.in</strong></p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span><span class="lnt">267
</span><span class="lnt">268
</span><span class="lnt">269
</span><span class="lnt">270
</span><span class="lnt">271
</span><span class="lnt">272
</span><span class="lnt">273
</span><span class="lnt">274
</span><span class="lnt">275
</span><span class="lnt">276
</span><span class="lnt">277
</span><span class="lnt">278
</span><span class="lnt">279
</span><span class="lnt">280
</span><span class="lnt">281
</span><span class="lnt">282
</span><span class="lnt">283
</span><span class="lnt">284
</span><span class="lnt">285
</span><span class="lnt">286
</span><span class="lnt">287
</span><span class="lnt">288
</span><span class="lnt">289
</span><span class="lnt">290
</span><span class="lnt">291
</span><span class="lnt">292
</span><span class="lnt">293
</span><span class="lnt">294
</span><span class="lnt">295
</span><span class="lnt">296
</span><span class="lnt">297
</span><span class="lnt">298
</span><span class="lnt">299
</span><span class="lnt">300
</span><span class="lnt">301
</span><span class="lnt">302
</span><span class="lnt">303
</span><span class="lnt">304
</span><span class="lnt">305
</span><span class="lnt">306
</span><span class="lnt">307
</span><span class="lnt">308
</span><span class="lnt">309
</span><span class="lnt">310
</span><span class="lnt">311
</span><span class="lnt">312
</span><span class="lnt">313
</span><span class="lnt">314
</span><span class="lnt">315
</span><span class="lnt">316
</span><span class="lnt">317
</span><span class="lnt">318
</span><span class="lnt">319
</span><span class="lnt">320
</span><span class="lnt">321
</span><span class="lnt">322
</span><span class="lnt">323
</span><span class="lnt">324
</span><span class="lnt">325
</span><span class="lnt">326
</span><span class="lnt">327
</span><span class="lnt">328
</span><span class="lnt">329
</span><span class="lnt">330
</span><span class="lnt">331
</span><span class="lnt">332
</span><span class="lnt">333
</span><span class="lnt">334
</span><span class="lnt">335
</span><span class="lnt">336
</span><span class="lnt">337
</span><span class="lnt">338
</span><span class="lnt">339
</span><span class="lnt">340
</span><span class="lnt">341
</span><span class="lnt">342
</span><span class="lnt">343
</span><span class="lnt">344
</span><span class="lnt">345
</span><span class="lnt">346
</span><span class="lnt">347
</span><span class="lnt">348
</span><span class="lnt">349
</span><span class="lnt">350
</span><span class="lnt">351
</span><span class="lnt">352
</span><span class="lnt">353
</span><span class="lnt">354
</span><span class="lnt">355
</span><span class="lnt">356
</span><span class="lnt">357
</span><span class="lnt">358
</span><span class="lnt">359
</span><span class="lnt">360
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="c1"># Doxyfile 1.8.14</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Project related configuration options</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">DOXYFILE_ENCODING</span>      <span class="o">=</span> <span class="n">UTF</span><span class="o">-</span><span class="mi">8</span>
</span></span><span class="line"><span class="cl"><span class="n">PROJECT_NAME</span>           <span class="o">=</span> <span class="n">recipe</span><span class="o">-</span><span class="mi">01</span>
</span></span><span class="line"><span class="cl"><span class="n">PROJECT_NUMBER</span>         <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">PROJECT_BRIEF</span>          <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">PROJECT_LOGO</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">OUTPUT_DIRECTORY</span>       <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">CREATE_SUBDIRS</span>         <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">OUTPUT_LANGUAGE</span>        <span class="o">=</span> <span class="n">English</span>
</span></span><span class="line"><span class="cl"><span class="n">BRIEF_MEMBER_DESC</span>      <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">REPEAT_BRIEF</span>           <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">ABBREVIATE_BRIEF</span>       <span class="o">=</span> <span class="s2">&#34;The $name class&#34;</span> \
</span></span><span class="line"><span class="cl">                         <span class="s2">&#34;The $name widget&#34;</span> \
</span></span><span class="line"><span class="cl">                         <span class="s2">&#34;The $name file&#34;</span> \
</span></span><span class="line"><span class="cl">                         <span class="n">is</span> \
</span></span><span class="line"><span class="cl">                         <span class="n">provides</span> \
</span></span><span class="line"><span class="cl">                         <span class="n">specifies</span> \
</span></span><span class="line"><span class="cl">                         <span class="n">contains</span> \
</span></span><span class="line"><span class="cl">                         <span class="n">represents</span> \
</span></span><span class="line"><span class="cl">                         <span class="n">a</span> \
</span></span><span class="line"><span class="cl">                         <span class="n">an</span> \
</span></span><span class="line"><span class="cl">                         <span class="n">the</span>
</span></span><span class="line"><span class="cl"><span class="n">ALWAYS_DETAILED_SEC</span>    <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">INLINE_INHERITED_MEMB</span>  <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">FULL_PATH_NAMES</span>        <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">STRIP_FROM_PATH</span>        <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">STRIP_FROM_INC_PATH</span>    <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">SHORT_NAMES</span>            <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">JAVADOC_AUTOBRIEF</span>      <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">QT_AUTOBRIEF</span>           <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">MULTILINE_CPP_IS_BRIEF</span> <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">INHERIT_DOCS</span>           <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">SEPARATE_MEMBER_PAGES</span>  <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">TAB_SIZE</span>               <span class="o">=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl"><span class="n">ALIASES</span>                <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">TCL_SUBST</span>              <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">OPTIMIZE_OUTPUT_FOR_C</span>  <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">OPTIMIZE_OUTPUT_JAVA</span>   <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">OPTIMIZE_FOR_FORTRAN</span>   <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">OPTIMIZE_OUTPUT_VHDL</span>   <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTENSION_MAPPING</span>      <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">MARKDOWN_SUPPORT</span>       <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">AUTOLINK_SUPPORT</span>       <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">BUILTIN_STL_SUPPORT</span>    <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">CPP_CLI_SUPPORT</span>        <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">SIP_SUPPORT</span>            <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">IDL_PROPERTY_SUPPORT</span>   <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">DISTRIBUTE_GROUP_DOC</span>   <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">SUBGROUPING</span>            <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">INLINE_GROUPED_CLASSES</span> <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">INLINE_SIMPLE_STRUCTS</span>  <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">TYPEDEF_HIDES_STRUCT</span>   <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">LOOKUP_CACHE_SIZE</span>      <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Build related configuration options</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTRACT_ALL</span>            <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTRACT_PRIVATE</span>        <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTRACT_PACKAGE</span>        <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTRACT_STATIC</span>         <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTRACT_LOCAL_CLASSES</span>  <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTRACT_LOCAL_METHODS</span>  <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTRACT_ANON_NSPACES</span>   <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">HIDE_UNDOC_MEMBERS</span>     <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">HIDE_UNDOC_CLASSES</span>     <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">HIDE_FRIEND_COMPOUNDS</span>  <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">HIDE_IN_BODY_DOCS</span>      <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">INTERNAL_DOCS</span>          <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">CASE_SENSE_NAMES</span>       <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">HIDE_SCOPE_NAMES</span>       <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">SHOW_INCLUDE_FILES</span>     <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">SHOW_GROUPED_MEMB_INC</span>  <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">FORCE_LOCAL_INCLUDES</span>   <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">INLINE_INFO</span>            <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">SORT_MEMBER_DOCS</span>       <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">SORT_BRIEF_DOCS</span>        <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">SORT_MEMBERS_CTORS_1ST</span> <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">SORT_GROUP_NAMES</span>       <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">SORT_BY_SCOPE_NAME</span>     <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">STRICT_PROTO_MATCHING</span>  <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_TODOLIST</span>      <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_TESTLIST</span>      <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_BUGLIST</span>       <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_DEPRECATEDLIST</span><span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">ENABLED_SECTIONS</span>       <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">MAX_INITIALIZER_LINES</span>  <span class="o">=</span> <span class="mi">30</span>
</span></span><span class="line"><span class="cl"><span class="n">SHOW_USED_FILES</span>        <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">SHOW_FILES</span>             <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">SHOW_NAMESPACES</span>        <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">FILE_VERSION_FILTER</span>    <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">LAYOUT_FILE</span>            <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">CITE_BIB_FILES</span>         <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to warning and progress messages</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">QUIET</span>                  <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">WARNINGS</span>               <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">WARN_IF_UNDOCUMENTED</span>   <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">WARN_IF_DOC_ERROR</span>      <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">WARN_NO_PARAMDOC</span>       <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">WARN_FORMAT</span>            <span class="o">=</span> <span class="s2">&#34;$file:$line: $text&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">WARN_LOGFILE</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the input files</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">INPUT</span>                  <span class="o">=</span> <span class="err">@</span><span class="n">PROJECT_SOURCE_DIR</span><span class="err">@</span><span class="o">/</span><span class="n">src</span> \
</span></span><span class="line"><span class="cl">                         <span class="err">@</span><span class="n">PROJECT_SOURCE_DIR</span><span class="err">@</span><span class="o">/</span><span class="n">docs</span>
</span></span><span class="line"><span class="cl"><span class="n">INPUT_ENCODING</span>         <span class="o">=</span> <span class="n">UTF</span><span class="o">-</span><span class="mi">8</span>
</span></span><span class="line"><span class="cl"><span class="n">FILE_PATTERNS</span>          <span class="o">=</span> <span class="o">*.</span><span class="n">c</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">cc</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">cxx</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">cpp</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">c</span><span class="o">++</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">java</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">ii</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">ixx</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">ipp</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">i</span><span class="o">++</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">inl</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">idl</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">ddl</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">odl</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">h</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">hh</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">hxx</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">hpp</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">h</span><span class="o">++</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">cs</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">d</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">php</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">php4</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">php5</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">phtml</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">inc</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">m</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">markdown</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">md</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">mm</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">dox</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">py</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">pyw</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">f90</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">f95</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">f03</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">f08</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">f</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="k">for</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">tcl</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">vhd</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">vhdl</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">ucf</span> \
</span></span><span class="line"><span class="cl">                         <span class="o">*.</span><span class="n">qsf</span>
</span></span><span class="line"><span class="cl"><span class="n">RECURSIVE</span>              <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">EXCLUDE</span>                <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">EXCLUDE_SYMLINKS</span>       <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">EXCLUDE_PATTERNS</span>       <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">EXCLUDE_SYMBOLS</span>        <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">EXAMPLE_PATH</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">EXAMPLE_PATTERNS</span>       <span class="o">=</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl"><span class="n">EXAMPLE_RECURSIVE</span>      <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">IMAGE_PATH</span>             <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">INPUT_FILTER</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">FILTER_PATTERNS</span>        <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">FILTER_SOURCE_FILES</span>    <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">FILTER_SOURCE_PATTERNS</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">USE_MDFILE_AS_MAINPAGE</span> <span class="o">=</span> <span class="n">front_page</span><span class="o">.</span><span class="n">md</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to source browsing</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">SOURCE_BROWSER</span>         <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">INLINE_SOURCES</span>         <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">STRIP_CODE_COMMENTS</span>    <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">REFERENCED_BY_RELATION</span> <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">REFERENCES_RELATION</span>    <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">REFERENCES_LINK_SOURCE</span> <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">SOURCE_TOOLTIPS</span>        <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">USE_HTAGS</span>              <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">VERBATIM_HEADERS</span>       <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the alphabetical class index</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">ALPHABETICAL_INDEX</span>     <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">COLS_IN_ALPHA_INDEX</span>    <span class="o">=</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="n">IGNORE_PREFIX</span>          <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the HTML output</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_HTML</span>          <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_OUTPUT</span>            <span class="o">=</span> <span class="n">html</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_FILE_EXTENSION</span>    <span class="o">=</span> <span class="o">.</span><span class="n">html</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_HEADER</span>            <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_FOOTER</span>            <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_STYLESHEET</span>        <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_EXTRA_STYLESHEET</span>  <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_EXTRA_FILES</span>       <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_COLORSTYLE_HUE</span>    <span class="o">=</span> <span class="mi">220</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_COLORSTYLE_SAT</span>    <span class="o">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_COLORSTYLE_GAMMA</span>  <span class="o">=</span> <span class="mi">80</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_TIMESTAMP</span>         <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_DYNAMIC_SECTIONS</span>  <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">HTML_INDEX_NUM_ENTRIES</span> <span class="o">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_DOCSET</span>        <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">DOCSET_FEEDNAME</span>        <span class="o">=</span> <span class="s2">&#34;Doxygen generated docs&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">DOCSET_BUNDLE_ID</span>       <span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="n">doxygen</span><span class="o">.</span><span class="n">Project</span>
</span></span><span class="line"><span class="cl"><span class="n">DOCSET_PUBLISHER_ID</span>    <span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="n">doxygen</span><span class="o">.</span><span class="n">Publisher</span>
</span></span><span class="line"><span class="cl"><span class="n">DOCSET_PUBLISHER_NAME</span>  <span class="o">=</span> <span class="n">Publisher</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_HTMLHELP</span>      <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">CHM_FILE</span>               <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">HHC_LOCATION</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_CHI</span>           <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">CHM_INDEX_ENCODING</span>     <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">BINARY_TOC</span>             <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">TOC_EXPAND</span>             <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_QHP</span>           <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">QCH_FILE</span>               <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">QHP_NAMESPACE</span>          <span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="n">doxygen</span><span class="o">.</span><span class="n">Project</span>
</span></span><span class="line"><span class="cl"><span class="n">QHP_VIRTUAL_FOLDER</span>     <span class="o">=</span> <span class="n">doc</span>
</span></span><span class="line"><span class="cl"><span class="n">QHP_CUST_FILTER_NAME</span>   <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">QHP_CUST_FILTER_ATTRS</span>  <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">QHP_SECT_FILTER_ATTRS</span>  <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">QHG_LOCATION</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_ECLIPSEHELP</span>   <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">ECLIPSE_DOC_ID</span>         <span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="n">doxygen</span><span class="o">.</span><span class="n">Project</span>
</span></span><span class="line"><span class="cl"><span class="n">DISABLE_INDEX</span>          <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_TREEVIEW</span>      <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">ENUM_VALUES_PER_LINE</span>   <span class="o">=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl"><span class="n">TREEVIEW_WIDTH</span>         <span class="o">=</span> <span class="mi">250</span>
</span></span><span class="line"><span class="cl"><span class="n">EXT_LINKS_IN_WINDOW</span>    <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">FORMULA_FONTSIZE</span>       <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="n">FORMULA_TRANSPARENT</span>    <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">USE_MATHJAX</span>            <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">MATHJAX_FORMAT</span>         <span class="o">=</span> <span class="n">HTML</span><span class="o">-</span><span class="n">CSS</span>
</span></span><span class="line"><span class="cl"><span class="n">MATHJAX_RELPATH</span>        <span class="o">=</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">cdnjs</span><span class="o">.</span><span class="n">cloudflare</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">ajax</span><span class="o">/</span><span class="n">libs</span><span class="o">/</span><span class="n">mathjax</span><span class="o">/</span><span class="mf">2.7</span><span class="o">.</span><span class="mi">2</span><span class="o">/</span>
</span></span><span class="line"><span class="cl"><span class="n">MATHJAX_EXTENSIONS</span>     <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">MATHJAX_CODEFILE</span>       <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">SEARCHENGINE</span>           <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">SERVER_BASED_SEARCH</span>    <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTERNAL_SEARCH</span>        <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">SEARCHENGINE_URL</span>       <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">SEARCHDATA_FILE</span>        <span class="o">=</span> <span class="n">searchdata</span><span class="o">.</span><span class="n">xml</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTERNAL_SEARCH_ID</span>     <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTRA_SEARCH_MAPPINGS</span>  <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the LaTeX output</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_LATEX</span>         <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">LATEX_OUTPUT</span>           <span class="o">=</span> <span class="n">latex</span>
</span></span><span class="line"><span class="cl"><span class="n">LATEX_CMD_NAME</span>         <span class="o">=</span> <span class="n">latex</span>
</span></span><span class="line"><span class="cl"><span class="n">MAKEINDEX_CMD_NAME</span>     <span class="o">=</span> <span class="n">makeindex</span>
</span></span><span class="line"><span class="cl"><span class="n">COMPACT_LATEX</span>          <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">PAPER_TYPE</span>             <span class="o">=</span> <span class="n">a4</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTRA_PACKAGES</span>         <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">LATEX_HEADER</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">LATEX_FOOTER</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">LATEX_EXTRA_FILES</span>      <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">PDF_HYPERLINKS</span>         <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">USE_PDFLATEX</span>           <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">LATEX_BATCHMODE</span>        <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">LATEX_HIDE_INDICES</span>     <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">LATEX_SOURCE_CODE</span>      <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">LATEX_BIB_STYLE</span>        <span class="o">=</span> <span class="n">plain</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the RTF output</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_RTF</span>           <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">RTF_OUTPUT</span>             <span class="o">=</span> <span class="n">rtf</span>
</span></span><span class="line"><span class="cl"><span class="n">COMPACT_RTF</span>            <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">RTF_HYPERLINKS</span>         <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">RTF_STYLESHEET_FILE</span>    <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">RTF_EXTENSIONS_FILE</span>    <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the man page output</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_MAN</span>           <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">MAN_OUTPUT</span>             <span class="o">=</span> <span class="n">man</span>
</span></span><span class="line"><span class="cl"><span class="n">MAN_EXTENSION</span>          <span class="o">=</span> <span class="o">.</span><span class="mi">3</span>
</span></span><span class="line"><span class="cl"><span class="n">MAN_LINKS</span>              <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the XML output</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_XML</span>           <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">XML_OUTPUT</span>             <span class="o">=</span> <span class="n">xml</span>
</span></span><span class="line"><span class="cl"><span class="n">XML_PROGRAMLISTING</span>     <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the DOCBOOK output</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_DOCBOOK</span>       <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">DOCBOOK_OUTPUT</span>         <span class="o">=</span> <span class="n">docbook</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options for the AutoGen Definitions output</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_AUTOGEN_DEF</span>   <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the Perl module output</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_PERLMOD</span>       <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">PERLMOD_LATEX</span>          <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">PERLMOD_PRETTY</span>         <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">PERLMOD_MAKEVAR_PREFIX</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the preprocessor</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">ENABLE_PREPROCESSING</span>   <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">MACRO_EXPANSION</span>        <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">EXPAND_ONLY_PREDEF</span>     <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">SEARCH_INCLUDES</span>        <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">INCLUDE_PATH</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">INCLUDE_FILE_PATTERNS</span>  <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">PREDEFINED</span>             <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">EXPAND_AS_DEFINED</span>      <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">SKIP_FUNCTION_MACROS</span>   <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to external references</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">TAGFILES</span>               <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_TAGFILE</span>       <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">ALLEXTERNALS</span>           <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTERNAL_GROUPS</span>        <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">EXTERNAL_PAGES</span>         <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">PERL_PATH</span>              <span class="o">=</span> <span class="err">@</span><span class="n">PERL_EXECUTABLE</span><span class="err">@</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Configuration options related to the dot tool</span>
</span></span><span class="line"><span class="cl"><span class="c1">#---------------------------------------------------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="n">CLASS_DIAGRAMS</span>         <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">MSCGEN_PATH</span>            <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">DIA_PATH</span>               <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">HIDE_UNDOC_RELATIONS</span>   <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">HAVE_DOT</span>               <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">DOT_NUM_THREADS</span>        <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">DOT_FONTNAME</span>           <span class="o">=</span> <span class="n">Helvetica</span>
</span></span><span class="line"><span class="cl"><span class="n">DOT_FONTSIZE</span>           <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="n">DOT_FONTPATH</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">CLASS_GRAPH</span>            <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">COLLABORATION_GRAPH</span>    <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">GROUP_GRAPHS</span>           <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">UML_LOOK</span>               <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">UML_LIMIT_NUM_FIELDS</span>   <span class="o">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="n">TEMPLATE_RELATIONS</span>     <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">INCLUDE_GRAPH</span>          <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">INCLUDED_BY_GRAPH</span>      <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">CALL_GRAPH</span>             <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">CALLER_GRAPH</span>           <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">GRAPHICAL_HIERARCHY</span>    <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">DIRECTORY_GRAPH</span>        <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">DOT_IMAGE_FORMAT</span>       <span class="o">=</span> <span class="n">png</span>
</span></span><span class="line"><span class="cl"><span class="n">INTERACTIVE_SVG</span>        <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">DOT_PATH</span>               <span class="o">=</span> <span class="err">@</span><span class="n">DOXYGEN_DOT_PATH</span><span class="err">@</span>
</span></span><span class="line"><span class="cl"><span class="n">DOTFILE_DIRS</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">MSCFILE_DIRS</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">DIAFILE_DIRS</span>           <span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="n">DOT_GRAPH_MAX_NODES</span>    <span class="o">=</span> <span class="mi">50</span>
</span></span><span class="line"><span class="cl"><span class="n">MAX_DOT_GRAPH_DEPTH</span>    <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">DOT_TRANSPARENT</span>        <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">DOT_MULTI_TARGETS</span>      <span class="o">=</span> <span class="n">NO</span>
</span></span><span class="line"><span class="cl"><span class="n">GENERATE_LEGEND</span>        <span class="o">=</span> <span class="n">YES</span>
</span></span><span class="line"><span class="cl"><span class="n">DOT_CLEANUP</span>            <span class="o">=</span> <span class="n">YES</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这是一个<code>Doxygen</code>的模板！</p>
</div>
    </div>
  </div>
<p><strong>src/CMakeLists.txt</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_library</span><span class="p">(</span><span class="n">message</span> <span class="n">STATIC</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">hello_world</span> <span class="n">hello_world</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">hello_world</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/message.hpp</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iosfwd&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @file message.hpp
</span></span></span><span class="line"><span class="cl"><span class="cm"> **/</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @class Message
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @brief Forwards string to screen
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @author jiangli
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @date 2024
</span></span></span><span class="line"><span class="cl"><span class="cm"> **/</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Message</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">   * @brief Constructor from a string
</span></span></span><span class="line"><span class="cl"><span class="cm">   * @param[in] m a message
</span></span></span><span class="line"><span class="cl"><span class="cm">   **/</span>
</span></span><span class="line"><span class="cl">  <span class="n">Message</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">)</span> <span class="o">:</span> <span class="n">message_</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">   * @brief Constructor from a character array
</span></span></span><span class="line"><span class="cl"><span class="cm">   * @param[in] m a message
</span></span></span><span class="line"><span class="cl"><span class="cm">   **/</span>
</span></span><span class="line"><span class="cl">  <span class="n">Message</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">m</span><span class="p">)</span> <span class="o">:</span> <span class="n">message_</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="n">m</span><span class="p">))</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">,</span> <span class="n">Message</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">obj</span><span class="p">.</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">os</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// The message to be forwarded to screen
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">message_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">   * @brief Function to forward message to screen
</span></span></span><span class="line"><span class="cl"><span class="cm">   * @param[in, out] os output stream
</span></span></span><span class="line"><span class="cl"><span class="cm">   **/</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/message.cpp</strong></p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;message.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">Message</span><span class="o">::</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;This is my very nice message: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">message_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">os</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/hello_world.cpp</strong></p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;message.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Message</span> <span class="n">say_hello</span><span class="p">(</span><span class="s">&#34;Hello, CMake World!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">say_hello</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">Message</span> <span class="n">say_goodbye</span><span class="p">(</span><span class="s">&#34;Goodbye, CMake World&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">say_goodbye</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir build <span class="p">&amp;</span> <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake ..
</span></span><span class="line"><span class="cl">cmake --build . --target docs</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">doxygen 文档</div>
</center>
<br>
<p>![Image](data:image/svg+xml,%3C%3Fxml version=&lsquo;1.0&rsquo; encoding=&lsquo;UTF-8&rsquo;%3F%3E%3Csvg width=&lsquo;1px&rsquo; height=&lsquo;1px&rsquo; viewBox=&lsquo;0 0 1 1&rsquo; version=&lsquo;1.1&rsquo; xmlns=&lsquo;<a href="http://www.w3.org/2000/svg%27"target="_blank" rel="external nofollow noopener noreferrer">http://www.w3.org/2000/svg'<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> xmlns:xlink=&lsquo;<a href="http://www.w3.org/1999/xlink%27%3E%3Ctitle%3E%3C/title%3E%3Cg"target="_blank" rel="external nofollow noopener noreferrer">http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> stroke=&lsquo;none&rsquo; stroke-width=&lsquo;1&rsquo; fill=&lsquo;none&rsquo; fill-rule=&lsquo;evenodd&rsquo; fill-opacity=&lsquo;0&rsquo;%3E%3Cg transform=&lsquo;translate(-249.000000, -126.000000)&rsquo; fill=&rsquo;%23FFFFFF&rsquo;%3E%3Crect x=&lsquo;249&rsquo; y=&lsquo;126&rsquo; width=&lsquo;1&rsquo; height=&lsquo;1&rsquo;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>
<p>![Image](data:image/svg+xml,%3C%3Fxml version=&lsquo;1.0&rsquo; encoding=&lsquo;UTF-8&rsquo;%3F%3E%3Csvg width=&lsquo;1px&rsquo; height=&lsquo;1px&rsquo; viewBox=&lsquo;0 0 1 1&rsquo; version=&lsquo;1.1&rsquo; xmlns=&lsquo;<a href="http://www.w3.org/2000/svg%27"target="_blank" rel="external nofollow noopener noreferrer">http://www.w3.org/2000/svg'<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> xmlns:xlink=&lsquo;<a href="http://www.w3.org/1999/xlink%27%3E%3Ctitle%3E%3C/title%3E%3Cg"target="_blank" rel="external nofollow noopener noreferrer">http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> stroke=&lsquo;none&rsquo; stroke-width=&lsquo;1&rsquo; fill=&lsquo;none&rsquo; fill-rule=&lsquo;evenodd&rsquo; fill-opacity=&lsquo;0&rsquo;%3E%3Cg transform=&lsquo;translate(-249.000000, -126.000000)&rsquo; fill=&rsquo;%23FFFFFF&rsquo;%3E%3Crect x=&lsquo;249&rsquo; y=&lsquo;126&rsquo; width=&lsquo;1&rsquo; height=&lsquo;1&rsquo;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>
<p>cmake45</p>
<p>cmake · 目录</p>
<p>上一篇CMake:验证自己生成的库</p>
<p>People who liked this content also liked</p>
<p>CMake:超级构建模式</p>
<p>Hope Hut</p>
<p>不喜欢</p>
<p>不看的原因</p>
<p>OK</p>
<ul>
<li>内容质量低</li>
<li>不看此公众号</li>
</ul>
<p></p>
<p>值得苦练的100道Python经典练手题，（附详细答案）建议收藏</p>
<p>编程课代表</p>
<p>不喜欢</p>
<p>不看的原因</p>
<p>OK</p>
<ul>
<li>内容质量低</li>
<li>不看此公众号</li>
</ul>
<p></p>
<p>Deno 1.40、Shikiji 0.10、Mantine 7.5、Bun for Windows、Rsdoctor、Zed</p>
<p>前端仓库</p>
<p>不喜欢</p>
<p>不看</p>
]]></description></item><item><title>CMake 笔记 | [44] 验证自己生成的库</title><link>https://jianye0428.github.io/posts/cmake_note_44/</link><pubDate>Thu, 01 Feb 2024 13:11:14 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_44/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>经过上一篇（<a href="https://mp.weixin.qq.com/s?__biz=MzkxMzI5Mjk4Mg==&amp;mid=2247485493&amp;idx=1&amp;sn=153d11f6db08ef0f70ce8bb95d7e0417&amp;scene=21#wechat_redirect"target="_blank" rel="external nofollow noopener noreferrer">CMake:输出库（像其他优秀的库一样优雅）<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>），我们已经构建出了优雅的库。本篇，我们将基于上一篇的内容，写一个简单的使用demo进行验证！</strong></div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">└── use_message.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter9/04"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter9/04<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.5</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">use</span><span class="o">-</span><span class="n">message</span>
</span></span><span class="line"><span class="cl">  <span class="n">LANGUAGES</span> <span class="n">CXX</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_PREFIX_PATH</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">jiangli</span><span class="o">/</span><span class="n">repo</span><span class="o">/</span><span class="n">tutorials</span><span class="o">/</span><span class="n">cmake</span><span class="o">-</span><span class="n">tutorial</span><span class="o">/</span><span class="n">chapter9</span><span class="o">/</span><span class="mo">03</span><span class="o">/</span><span class="n">output</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">cmake</span><span class="o">/</span><span class="n">example</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">message</span> <span class="n">REQUIRED</span> <span class="n">CONFIG</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">message_FOUND</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Found message: (found version ${message_VERSION})&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include_directories</span><span class="p">(</span><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">jiangli</span><span class="o">/</span><span class="n">repo</span><span class="o">/</span><span class="n">tutorials</span><span class="o">/</span><span class="n">cmake</span><span class="o">-</span><span class="n">tutorial</span><span class="o">/</span><span class="n">chapter9</span><span class="o">/</span><span class="mo">03</span><span class="o">/</span><span class="n">output</span><span class="o">/</span><span class="n">include</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">use_message</span> <span class="n">use_message</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">use_message</span> <span class="n">message</span><span class="o">::</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>这里，我们没有对我们的库添加到环境变量中，所以为了使<code>find_package</code>命令能够找到我们的库，需要在<code>find_package</code>命令前设置库所在的<code>cmake</code>文件路径。</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">set(CMAKE_PREFIX_PATH /home/jiangli/repo/tutorials/cmake-tutorial/chapter9/03/output/share/cmake/example)</span></span></code></pre></td></tr></table>
</div>
</div><p>如果我们把生成的库设置到环境变量中，那么我们就可以省略掉这一步骤！</p>
</div>
    </div>
  </div>
<p><strong>use_message.cpp</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;message/message.hpp&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Message</span> <span class="n">say_hello</span><span class="p">(</span><span class="s">&#34;Hello, CMake World!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">say_hello</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">Message</span> <span class="n">say_goodbye</span><span class="p">(</span><span class="s">&#34;Goodbye, CMake World&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">say_goodbye</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir build <span class="p">&amp;</span> <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake ..
</span></span><span class="line"><span class="cl">make .
</span></span><span class="line"><span class="cl">./use_message</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">验证生成的库</div>
</center>
<br>
<p>![Image](data:image/svg+xml,%3C%3Fxml version=&lsquo;1.0&rsquo; encoding=&lsquo;UTF-8&rsquo;%3F%3E%3Csvg width=&lsquo;1px&rsquo; height=&lsquo;1px&rsquo; viewBox=&lsquo;0 0 1 1&rsquo; version=&lsquo;1.1&rsquo; xmlns=&lsquo;<a href="http://www.w3.org/2000/svg%27"target="_blank" rel="external nofollow noopener noreferrer">http://www.w3.org/2000/svg'<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> xmlns:xlink=&lsquo;<a href="http://www.w3.org/1999/xlink%27%3E%3Ctitle%3E%3C/title%3E%3Cg"target="_blank" rel="external nofollow noopener noreferrer">http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> stroke=&lsquo;none&rsquo; stroke-width=&lsquo;1&rsquo; fill=&lsquo;none&rsquo; fill-rule=&lsquo;evenodd&rsquo; fill-opacity=&lsquo;0&rsquo;%3E%3Cg transform=&lsquo;translate(-249.000000, -126.000000)&rsquo; fill=&rsquo;%23FFFFFF&rsquo;%3E%3Crect x=&lsquo;249&rsquo; y=&lsquo;126&rsquo; width=&lsquo;1&rsquo; height=&lsquo;1&rsquo;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>
<p>![Image](data:image/svg+xml,%3C%3Fxml version=&lsquo;1.0&rsquo; encoding=&lsquo;UTF-8&rsquo;%3F%3E%3Csvg width=&lsquo;1px&rsquo; height=&lsquo;1px&rsquo; viewBox=&lsquo;0 0 1 1&rsquo; version=&lsquo;1.1&rsquo; xmlns=&lsquo;<a href="http://www.w3.org/2000/svg%27"target="_blank" rel="external nofollow noopener noreferrer">http://www.w3.org/2000/svg'<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> xmlns:xlink=&lsquo;<a href="http://www.w3.org/1999/xlink%27%3E%3Ctitle%3E%3C/title%3E%3Cg"target="_blank" rel="external nofollow noopener noreferrer">http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> stroke=&lsquo;none&rsquo; stroke-width=&lsquo;1&rsquo; fill=&lsquo;none&rsquo; fill-rule=&lsquo;evenodd&rsquo; fill-opacity=&lsquo;0&rsquo;%3E%3Cg transform=&lsquo;translate(-249.000000, -126.000000)&rsquo; fill=&rsquo;%23FFFFFF&rsquo;%3E%3Crect x=&lsquo;249&rsquo; y=&lsquo;126&rsquo; width=&lsquo;1&rsquo; height=&lsquo;1&rsquo;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>
<p>cmake45</p>
<p>cmake · 目录</p>
<p>上一篇CMake:输出库（像其他优秀的库一样优雅）下一篇CMake:使用Doxygen构建文档</p>
<p>People who liked this content also liked</p>
<p>CMake:超级构建模式</p>
<p>Hope Hut</p>
<p>不喜欢</p>
<p>不看的原因</p>
<p>OK</p>
<ul>
<li>内容质量低</li>
<li>不看此公众号</li>
</ul>
<p></p>
<p>CMake:使用函数和宏重用代码</p>
<p>Hope Hut</p>
<p>不喜欢</p>
<p>不看的原因</p>
<p>OK</p>
<ul>
<li>内容质量低</li>
<li>不看此公众号</li>
</ul>
<p></p>
<p>CMake:使用Doxygen构建文档</p>
<p>Hope Hut</p>
<p>不喜欢</p>
<p>不看的原因</p>
<p>OK</p>
<ul>
<li>内容质量低</li>
<li>不看此公众号</li>
</ul>
<p></p>
<p></p>
<p>Scan to Follow</p>
<p>people underline</p>
]]></description></item><item><title>CMake 笔记 | [43] 输出库</title><link>https://jianye0428.github.io/posts/cmake_note_43/</link><pubDate>Thu, 01 Feb 2024 13:11:11 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_43/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>前面的笔记中（<a href="https://mp.weixin.qq.com/s?__biz=MzkxMzI5Mjk4Mg==&amp;mid=2247484287&amp;idx=1&amp;sn=df3b9fb1c0e4c2497b114cdebb6ac2bf&amp;scene=21#wechat_redirect"target="_blank" rel="external nofollow noopener noreferrer">CMake：静态库和动态库的详解(Linux/Windows)<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>），展示了如何输出动态库和静态库，但是存在一些问题，如只输出了其头文件、符号表和库文件，但实际我们希望，当其他人编译并安装了我们的库，库就能更容易找到，如配置完环境变换或者指定库的路径。这篇笔记将展示CMake如何让我们导出目标，以便其他使用CMake的项目可以轻松地获取它们。</strong></div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── cmake
</span></span><span class="line"><span class="cl">│   └── messageConfig.cmake.in
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">│   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   ├── hello_world.cpp
</span></span><span class="line"><span class="cl">│   ├── message.cpp
</span></span><span class="line"><span class="cl">│   └── message.hpp
</span></span><span class="line"><span class="cl">└── <span class="nb">test</span>
</span></span><span class="line"><span class="cl">    └── CMakeLists.txt</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter9/03"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter9/03<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp"># CMake 3.6 needed for IMPORTED_TARGET option
</span></span></span><span class="line"><span class="cl"><span class="cp"># to pkg_search_module
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.6</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example</span>
</span></span><span class="line"><span class="cl">  <span class="n">LANGUAGES</span> <span class="n">CXX</span>
</span></span><span class="line"><span class="cl">  <span class="n">VERSION</span> <span class="mf">1.0.0</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># &lt;&lt;&lt; General set up &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cp"># 检查是否已经设置了安装前缀
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">if</span><span class="p">(</span><span class="n">CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="cp"># 设置安装目录为项目源目录下的output文件夹
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="n">set</span><span class="p">(</span><span class="n">CMAKE_INSTALL_PREFIX</span> <span class="s">&#34;${CMAKE_SOURCE_DIR}/output/&#34;</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;...&#34;</span> <span class="n">FORCE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Project will be installed to ${CMAKE_INSTALL_PREFIX}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">CMAKE_BUILD_TYPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">CMAKE_BUILD_TYPE</span> <span class="n">Release</span> <span class="n">CACHE</span> <span class="n">STRING</span> <span class="s">&#34;Build type&#34;</span> <span class="n">FORCE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Build type set to ${CMAKE_BUILD_TYPE}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">GNUInstallDirs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_LIBRARY_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_RUNTIME_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># Offer the user the choice of overriding the installation directories
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_LIBDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for libraries&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_BINDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for executables&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_INCLUDEDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_INCLUDEDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for header files&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">WIN32</span> <span class="n">AND</span> <span class="n">NOT</span> <span class="n">CYGWIN</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">DEF_INSTALL_CMAKEDIR</span> <span class="n">CMake</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">DEF_INSTALL_CMAKEDIR</span> <span class="n">share</span><span class="o">/</span><span class="n">cmake</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_CMAKEDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">DEF_INSTALL_CMAKEDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for CMake files&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># Report to user
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">foreach</span><span class="p">(</span><span class="n">p</span> <span class="n">LIB</span> <span class="n">BIN</span> <span class="n">INCLUDE</span> <span class="n">CMAKE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">file</span><span class="p">(</span><span class="n">TO_NATIVE_PATH</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_PREFIX</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_</span><span class="err">$</span><span class="p">{</span><span class="n">p</span><span class="p">}</span><span class="n">DIR</span><span class="p">}</span> <span class="n">_path</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Installing ${p} components to ${_path}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">unset</span><span class="p">(</span><span class="n">_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endforeach</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">enable_testing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">test</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>上述cmake在上一篇<a href="https://mp.weixin.qq.com/s?__biz=MzkxMzI5Mjk4Mg==&amp;mid=2247485469&amp;idx=1&amp;sn=24c81bc819c02b4c01367c593117276a&amp;scene=21#wechat_redirect"target="_blank" rel="external nofollow noopener noreferrer">cmake:导出头文件<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>相关代码详细分析过了，请移步到上一篇参考。</p>
<p><strong>cmake/messageConfig.cmake.in</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="err">@</span><span class="n">PACKAGE_INIT</span><span class="err">@</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="s">&#34;${CMAKE_CURRENT_LIST_DIR}/messageTargets.cmake&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">check_required_components</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;message-shared&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;message-static&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;message-hello-world_wDSO&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;message-hello-world_wAR&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># Remove dependency on UUID if on Windows
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">WIN32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">TARGET</span> <span class="n">PkgConfig</span><span class="o">::</span><span class="n">UUID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">find_package</span><span class="p">(</span><span class="n">PkgConfig</span> <span class="n">REQUIRED</span> <span class="n">QUIET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">pkg_search_module</span><span class="p">(</span><span class="n">UUID</span> <span class="n">REQUIRED</span> <span class="n">uuid</span> <span class="n">IMPORTED_TARGET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="err">@</span><span class="n">PACKAGE_INIT</span><span class="err">@</span></span></span></code></pre></td></tr></table>
</div>
</div><p>占位符将使用<code>configure_package_config_file</code>命令进行替换。如果项目成功构建，那么将在<code>messageConfig.cmake</code>文件中进行替换：</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">get_filename_component</span><span class="p">(</span><span class="n">PACKAGE_PREFIX_DIR</span> <span class="s">&#34;${CMAKE_CURRENT_LIST_DIR}/../../../&#34;</span> <span class="n">ABSOLUTE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">macro</span><span class="p">(</span><span class="n">set_and_check</span> <span class="n">_var</span> <span class="n">_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">_var</span><span class="p">}</span> <span class="s">&#34;${_file}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">EXISTS</span> <span class="s">&#34;${_file}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">FATAL_ERROR</span> <span class="s">&#34;File or directory ${_file} referenced by variable ${_var} does not exist !&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endmacro</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">macro</span><span class="p">(</span><span class="n">check_required_components</span> <span class="n">_NAME</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">foreach</span><span class="p">(</span><span class="n">comp</span> <span class="err">$</span><span class="p">{</span><span class="err">$</span><span class="p">{</span><span class="n">_NAME</span><span class="p">}</span><span class="n">_FIND_COMPONENTS</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="err">$</span><span class="p">{</span><span class="n">_NAME</span><span class="p">}</span><span class="n">_</span><span class="err">$</span><span class="p">{</span><span class="n">comp</span><span class="p">}</span><span class="n">_FOUND</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">_NAME</span><span class="p">}</span><span class="n">_FIND_REQUIRED_</span><span class="err">$</span><span class="p">{</span><span class="n">comp</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">        <span class="n">set</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">_NAME</span><span class="p">}</span><span class="n">_FOUND</span> <span class="n">FALSE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">endforeach</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endmacro</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="s">&#34;${CMAKE_CURRENT_LIST_DIR}/messageTargets.cmake&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>包含为目标自动生成的导出文件。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">check_required_components</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;message-shared&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;message-static&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;message-hello-world_wDSO&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;message-hello-world_wAR&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>检查静态库和动态库，以及两个<code>Hello, World</code>可执行文件是否带有<code>CMake</code>提供的<code>check_required_components</code>函数。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">WIN32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">TARGET</span> <span class="n">PkgConfig</span><span class="o">::</span><span class="n">UUID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">find_package</span><span class="p">(</span><span class="n">PkgConfig</span> <span class="n">REQUIRED</span> <span class="n">QUIET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">pkg_search_module</span><span class="p">(</span><span class="n">UUID</span> <span class="n">REQUIRED</span> <span class="n">uuid</span> <span class="n">IMPORTED_TARGET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>检查目标<code>PkgConfig::UUID</code>是否存在。如果没有，再次搜索<code>UUID</code>库(只在非Windows操作系统下有效)。</p></div>
    </div>
  </div>
<p><strong>src/CMakeLists.txt</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp"># Search for pkg-config and UUID
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">find_package</span><span class="p">(</span><span class="n">PkgConfig</span> <span class="n">QUIET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">PKG_CONFIG_FOUND</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">pkg_search_module</span><span class="p">(</span><span class="n">UUID</span> <span class="n">uuid</span> <span class="n">IMPORTED_TARGET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">TARGET</span> <span class="n">PkgConfig</span><span class="o">::</span><span class="n">UUID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Found libuuid&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">UUID_FOUND</span> <span class="n">TRUE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># &lt;&lt;&lt; Build targets &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp"># SHARED library
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_library</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span> <span class="n">SHARED</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">GenerateExportHeader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">generate_export_header</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">BASE_NAME</span> <span class="s">&#34;message&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EXPORT_MACRO_NAME</span> <span class="s">&#34;MESSAGE_LIB_API&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EXPORT_FILE_NAME</span> <span class="s">&#34;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/message_export.h&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">STATIC_DEFINE</span> <span class="s">&#34;MESSAGE_STATIC_DEFINE&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">DEFINE_NO_DEPRECATED</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">message</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_compile_definitions</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">HAVE_UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="n">INTERFACE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="nl">INSTALL_INTERFACE</span><span class="p">:</span><span class="n">USING_MESSAGE</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="nl">BUILD_INTERFACE</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_INCLUDEDIR</span><span class="p">}</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="nl">INSTALL_INTERFACE</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_INCLUDEDIR</span><span class="p">}</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">PkgConfig</span><span class="o">::</span><span class="n">UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_target_properties</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">POSITION_INDEPENDENT_CODE</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">CXX_VISIBILITY_PRESET</span> <span class="n">hidden</span>
</span></span><span class="line"><span class="cl">    <span class="n">VISIBILITY_INLINES_HIDDEN</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">SOVERSION</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_VERSION_MAJOR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_NAME</span> <span class="s">&#34;message&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DEBUG_POSTFIX</span> <span class="s">&#34;_d&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">PUBLIC_HEADER</span> <span class="s">&#34;message.hpp;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/message_export.h&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">MACOSX_RPATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># STATIC library
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_library</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span> <span class="n">STATIC</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">message</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_compile_definitions</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="n">message_STATIC_DEFINE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">HAVE_UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="n">INTERFACE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="nl">INSTALL_INTERFACE</span><span class="p">:</span><span class="n">USING_MESSAGE</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="nl">BUILD_INTERFACE</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_INCLUDEDIR</span><span class="p">}</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="nl">INSTALL_INTERFACE</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_INCLUDEDIR</span><span class="p">}</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">PkgConfig</span><span class="o">::</span><span class="n">UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_target_properties</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">POSITION_INDEPENDENT_CODE</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">ARCHIVE_OUTPUT_NAME</span> <span class="s">&#34;message&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DEBUG_POSTFIX</span> <span class="s">&#34;_sd&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">RELEASE_POSTFIX</span> <span class="s">&#34;_s&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">PUBLIC_HEADER</span> <span class="s">&#34;message.hpp;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/message_export.h&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># EXECUTABLES
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_executable</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span> <span class="n">hello_world</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wAR</span> <span class="n">hello_world</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wAR</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># &lt;&lt;&lt; Install and export targets &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">install</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">TARGETS</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">    <span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span>
</span></span><span class="line"><span class="cl">    <span class="n">hello</span><span class="o">-</span><span class="n">world_wAR</span>
</span></span><span class="line"><span class="cl">  <span class="n">EXPORT</span>
</span></span><span class="line"><span class="cl">    <span class="n">messageTargets</span>
</span></span><span class="line"><span class="cl">  <span class="n">ARCHIVE</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_LIBDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">lib</span>
</span></span><span class="line"><span class="cl">  <span class="n">RUNTIME</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_BINDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">bin</span>
</span></span><span class="line"><span class="cl">  <span class="n">LIBRARY</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_LIBDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">lib</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC_HEADER</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_INCLUDEDIR</span><span class="p">}</span><span class="o">/</span><span class="n">message</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">dev</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">install</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">EXPORT</span>
</span></span><span class="line"><span class="cl">    <span class="n">messageTargets</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAMESPACE</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;message::&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">DESTINATION</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_CMAKEDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMPONENT</span>
</span></span><span class="line"><span class="cl">    <span class="n">dev</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">CMakePackageConfigHelpers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">write_basic_package_version_file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">messageConfigVersion</span><span class="p">.</span><span class="n">cmake</span>
</span></span><span class="line"><span class="cl">  <span class="n">VERSION</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_VERSION</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMPATIBILITY</span> <span class="n">SameMajorVersion</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">configure_package_config_file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">cmake</span><span class="o">/</span><span class="n">messageConfig</span><span class="p">.</span><span class="n">cmake</span><span class="p">.</span><span class="n">in</span>
</span></span><span class="line"><span class="cl">  <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">messageConfig</span><span class="p">.</span><span class="n">cmake</span>
</span></span><span class="line"><span class="cl">  <span class="n">INSTALL_DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_CMAKEDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">install</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">FILES</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">messageConfig</span><span class="p">.</span><span class="n">cmake</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">messageConfigVersion</span><span class="p">.</span><span class="n">cmake</span>
</span></span><span class="line"><span class="cl">  <span class="n">DESTINATION</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_CMAKEDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">install</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">EXPORT</span>
</span></span><span class="line"><span class="cl">    <span class="n">messageTargets</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAMESPACE</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;message::&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">DESTINATION</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_CMAKEDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMPONENT</span>
</span></span><span class="line"><span class="cl">    <span class="n">dev</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong><code>EXPORT messageTargets</code></strong>:
<ul>
<li>这里指定要安装的导出集名称。<code>messageTargets</code> 是一个之前定义的导出集，其中包含了项目中的一些目标（例如库或可执行文件）。</li>
<li>这些目标是在 CMake 构建过程中定义并构建的，<code>EXPORT</code> 关键字用于指明这些目标在安装时应当被导出为一组。本篇是将动态库、静态库以及对应的头文件打包成了一组（messageTargets）</li>
</ul>
</li>
<li><strong><code>NAMESPACE &quot;message::&quot;</code></strong>:
<ul>
<li>这个命令为导出的目标设置了一个命名空间前缀。在这种情况下，任何导出的目标都将被前缀 <code>message::</code> 所标记。</li>
<li>如，如果有一个名为 <code>message-shared</code> 的库，在其他项目中通过 <code>find_package</code> 查找和链接时，可以使用 <code>message::message-shared</code> 来引用它。</li>
</ul>
</li>
<li><strong><code>DESTINATION ${INSTALL_CMAKEDIR}</code></strong>:
<ul>
<li>指定导出的目标（<code>messageTargets</code>）应当被安装到的目标文件夹。</li>
<li><code>${INSTALL_CMAKEDIR}</code> 是一个变量，它在主 <code>CMakeLists.txt</code>中定义了。</li>
</ul>
</li>
<li><strong><code>COMPONENT dev</code></strong>:
<ul>
<li><code>COMPONENT</code> 关键字用于指定这部分安装属于哪个组件。在这里，组件被命名为 <code>dev</code>。</li>
<li>在 CMake 中，可以将安装分成多个组件，例如库文件、头文件、文档等，以便在安装时可以选择性地安装特定的组件。<code>dev</code> 组件可能包含开发相关的文件，比如 CMake 配置和库文件。</li>
</ul>
</li>
</ul>
</div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">CMakePackageConfigHelpers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">write_basic_package_version_file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">messageConfigVersion</span><span class="p">.</span><span class="n">cmake</span>
</span></span><span class="line"><span class="cl">  <span class="n">VERSION</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_VERSION</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMPATIBILITY</span> <span class="n">SameMajorVersion</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">configure_package_config_file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">cmake</span><span class="o">/</span><span class="n">messageConfig</span><span class="p">.</span><span class="n">cmake</span><span class="p">.</span><span class="n">in</span>
</span></span><span class="line"><span class="cl">  <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">messageConfig</span><span class="p">.</span><span class="n">cmake</span>
</span></span><span class="line"><span class="cl">  <span class="n">INSTALL_DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_CMAKEDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">install</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">FILES</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">messageConfig</span><span class="p">.</span><span class="n">cmake</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">messageConfigVersion</span><span class="p">.</span><span class="n">cmake</span>
</span></span><span class="line"><span class="cl">  <span class="n">DESTINATION</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_CMAKEDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong><code>include(CMakePackageConfigHelpers)</code></strong>:
<ul>
<li>命令包含了 CMake 模块 <code>CMakePackageConfigHelpers</code>，该模块提供了一些辅助宏和函数，用于生成和配置包配置文件。</li>
<li>这些辅助工具简化了创建兼容不同项目的配置文件的过程。</li>
</ul>
</li>
<li><strong><code>write_basic_package_version_file</code></strong>:
<ul>
<li>生成一个包版本文件，该文件包含了关于包版本和兼容性的信息。</li>
<li><code>${CMAKE_CURRENT_BINARY_DIR}/messageConfigVersion.cmake</code> 指定生成文件的路径和名称。</li>
<li><code>VERSION ${PROJECT_VERSION}</code> 指定了包的当前版本，<code>${PROJECT_VERSION}</code> 是在 CMake 中定义的项目版本变量。</li>
<li><code>COMPATIBILITY SameMajorVersion</code> 指定了版本兼容性规则。在本篇，它表明包是与同一主要版本号的其他版本兼容的。</li>
</ul>
</li>
<li><strong><code>configure_package_config_file</code></strong>:
<ul>
<li>命令用于从一个 <code>.in</code> 模板文件生成一个包配置文件。</li>
<li><code>${PROJECT_SOURCE_DIR}/cmake/messageConfig.cmake.in</code> 是模板文件的路径，这个文件通常包含了配置信息，如库的位置、依赖项等。</li>
<li><code>${CMAKE_CURRENT_BINARY_DIR}/messageConfig.cmake</code> 是输出文件的路径和名称。</li>
<li><code>INSTALL_DESTINATION ${INSTALL_CMAKEDIR}</code> 指定了安装时配置文件的目标目录。</li>
</ul>
</li>
<li><strong><code>install</code> 命令</strong>:
<ul>
<li>这个 <code>install</code> 命令用于安装前面生成的配置文件。</li>
<li><code>FILES</code> 关键字后面列出了要安装的文件：生成的 <code>messageConfig.cmake</code> 和 <code>messageConfigVersion.cmake</code> 文件。</li>
<li><code>DESTINATION ${INSTALL_CMAKEDIR}</code> 指定了这些文件的安装目录。</li>
</ul>
</li>
</ul>
</div>
    </div>
  </div>
<p><strong>src/message.hpp</strong></p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iosfwd&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;message_export.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">class</span> <span class="nc">MESSAGE_LIB_API</span> <span class="n">Message</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">Message</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">)</span> <span class="o">:</span> <span class="n">message_</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">,</span> <span class="n">Message</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">obj</span><span class="p">.</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">os</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">message_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GetUUID</span><span class="p">();</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/message.cpp</strong></p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;message.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#ifdef HAVE_UUID
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;uuid/uuid.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">Message</span><span class="o">::</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;This is my very nice message: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">message_</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;...and here is its UUID: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">GetUUID</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">os</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#ifdef HAVE_UUID
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GetUUID</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_t</span> <span class="n">uuid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_generate</span><span class="p">(</span><span class="n">uuid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">uuid_str</span><span class="p">[</span><span class="mi">37</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_unparse_lower</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">uuid_str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_clear</span><span class="p">(</span><span class="n">uuid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">uuid_cxx</span><span class="p">(</span><span class="n">uuid_str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">uuid_cxx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">#else
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GetUUID</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s">&#34;Ooooops, no UUID for you!&#34;</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/hello_world.cpp</strong></p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;message.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Message</span> <span class="n">say_hello</span><span class="p">(</span><span class="s">&#34;Hello, CMake World!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">say_hello</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">Message</span> <span class="n">say_goodbye</span><span class="p">(</span><span class="s">&#34;Goodbye, CMake World&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">say_goodbye</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>test/CMakeLists.txt</strong></p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">test_shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">test_static</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wAR</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p build
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">$ cmake ..
</span></span><span class="line"><span class="cl">$ cmake --build . --target install</span></span></code></pre></td></tr></table>
</div>
</div><p>安装树结构：</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">output
</span></span><span class="line"><span class="cl">   ├── bin
</span></span><span class="line"><span class="cl">   │   ├── hello-world_wAR
</span></span><span class="line"><span class="cl">   │   └── hello-world_wDSO
</span></span><span class="line"><span class="cl">   ├── include
</span></span><span class="line"><span class="cl">   │   └── message
</span></span><span class="line"><span class="cl">   │       ├── message_export.h
</span></span><span class="line"><span class="cl">   │       └── message.hpp
</span></span><span class="line"><span class="cl">   ├── lib
</span></span><span class="line"><span class="cl">   │   ├── libmessage_s.a
</span></span><span class="line"><span class="cl">   │   ├── libmessage.so -&gt; libmessage.so.1
</span></span><span class="line"><span class="cl">   │   └── libmessage.so.1
</span></span><span class="line"><span class="cl">   └── share
</span></span><span class="line"><span class="cl">       └── cmake
</span></span><span class="line"><span class="cl">           └── example
</span></span><span class="line"><span class="cl">               ├── messageConfig.cmake
</span></span><span class="line"><span class="cl">               ├── messageConfigVersion.cmake
</span></span><span class="line"><span class="cl">               ├── messageTargets.cmake
</span></span><span class="line"><span class="cl">               └── messageTargets-release.cmake</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>CMake 笔记 | [42] 导出头文件</title><link>https://jianye0428.github.io/posts/cmake_note_42/</link><pubDate>Thu, 01 Feb 2024 13:11:08 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_42/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><strong>其实，本篇的相关内容已经在</strong><a href="https://mp.weixin.qq.com/s?__biz=MzkxMzI5Mjk4Mg==&amp;mid=2247484287&amp;idx=1&amp;sn=df3b9fb1c0e4c2497b114cdebb6ac2bf&amp;scene=21#wechat_redirect"target="_blank" rel="external nofollow noopener noreferrer"><strong>CMake：静态库和动态库的详解(Linux/Windows)</strong><i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a><strong>笔记中已经详细介绍了具体使用方法，且展示了<code>CMake</code>提供了与平台无关的方式实现的功能。但是，没有处理符号可见性的问题。关于符号的可见性的最佳方式是规定动态库只公开最小的符号，从而限制代码中定义的对象和函数对外的可见性。</strong></p>
<p><strong>我们希望在默认情况下，动态库定义的所有符号都对外隐藏。这将使得项目的贡献者，能够清楚地划分库和外部代码之间的接口，因为他们必须显式地标记所有要在项目外部使用的符号。</strong></p>
</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">│   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   ├── hello_world.cpp
</span></span><span class="line"><span class="cl">│   ├── message.cpp
</span></span><span class="line"><span class="cl">│   └── message.hpp
</span></span><span class="line"><span class="cl">└── <span class="nb">test</span>
</span></span><span class="line"><span class="cl">    └── CMakeLists.txt</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter9/02"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter9/02<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp"># CMake 3.6 needed for IMPORTED_TARGET option
</span></span></span><span class="line"><span class="cl"><span class="cp"># to pkg_search_module
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.6</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">example</span>
</span></span><span class="line"><span class="cl">  <span class="n">LANGUAGES</span> <span class="n">CXX</span>
</span></span><span class="line"><span class="cl">  <span class="n">VERSION</span> <span class="mf">1.0.0</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># &lt;&lt;&lt; General set up &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># 检查是否已经设置了安装前缀
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">if</span><span class="p">(</span><span class="n">CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="cp"># 设置安装目录为项目源目录下的output文件夹
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="n">set</span><span class="p">(</span><span class="n">CMAKE_INSTALL_PREFIX</span> <span class="s">&#34;${CMAKE_SOURCE_DIR}/output/&#34;</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;...&#34;</span> <span class="n">FORCE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Project will be installed to ${CMAKE_INSTALL_PREFIX}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">CMAKE_BUILD_TYPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">CMAKE_BUILD_TYPE</span> <span class="n">Release</span> <span class="n">CACHE</span> <span class="n">STRING</span> <span class="s">&#34;Build type&#34;</span> <span class="n">FORCE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Build type set to ${CMAKE_BUILD_TYPE}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">GNUInstallDirs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_LIBRARY_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_RUNTIME_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># Offer the user the choice of overriding the installation directories
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_LIBDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for libraries&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_BINDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for executables&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_INCLUDEDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_INCLUDEDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for header files&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">WIN32</span> <span class="n">AND</span> <span class="n">NOT</span> <span class="n">CYGWIN</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">DEF_INSTALL_CMAKEDIR</span> <span class="n">CMake</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">DEF_INSTALL_CMAKEDIR</span> <span class="n">share</span><span class="o">/</span><span class="n">cmake</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_CMAKEDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">DEF_INSTALL_CMAKEDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for CMake files&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># Report to user
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">foreach</span><span class="p">(</span><span class="n">p</span> <span class="n">LIB</span> <span class="n">BIN</span> <span class="n">INCLUDE</span> <span class="n">CMAKE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">file</span><span class="p">(</span><span class="n">TO_NATIVE_PATH</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_PREFIX</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_</span><span class="err">$</span><span class="p">{</span><span class="n">p</span><span class="p">}</span><span class="n">DIR</span><span class="p">}</span> <span class="n">_path</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Installing ${p} components to ${_path}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">unset</span><span class="p">(</span><span class="n">_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endforeach</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">enable_testing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">test</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/CMakeLists.txt</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp"># Search for pkg-config and UUID
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">find_package</span><span class="p">(</span><span class="n">PkgConfig</span> <span class="n">QUIET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">PKG_CONFIG_FOUND</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">pkg_search_module</span><span class="p">(</span><span class="n">UUID</span> <span class="n">uuid</span> <span class="n">IMPORTED_TARGET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">TARGET</span> <span class="n">PkgConfig</span><span class="o">::</span><span class="n">UUID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Found libuuid&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">UUID_FOUND</span> <span class="n">TRUE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># &lt;&lt;&lt; Build targets &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp"># SHARED library
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_library</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span> <span class="n">SHARED</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">message</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_compile_definitions</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">HAVE_UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">PkgConfig</span><span class="o">::</span><span class="n">UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_target_properties</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">POSITION_INDEPENDENT_CODE</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">CXX_VISIBILITY_PRESET</span> <span class="n">hidden</span>
</span></span><span class="line"><span class="cl">    <span class="n">VISIBILITY_INLINES_HIDDEN</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">SOVERSION</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_VERSION_MAJOR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_NAME</span> <span class="s">&#34;message&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DEBUG_POSTFIX</span> <span class="s">&#34;_d&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">PUBLIC_HEADER</span> <span class="s">&#34;message.hpp;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/message_export.h&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">MACOSX_RPATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">GenerateExportHeader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">generate_export_header</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">BASE_NAME</span> <span class="s">&#34;message&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EXPORT_MACRO_NAME</span> <span class="s">&#34;MESSAGE_LIB_API&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EXPORT_FILE_NAME</span> <span class="s">&#34;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/message_export.h&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">STATIC_DEFINE</span> <span class="s">&#34;MESSAGE_STATIC_DEFINE&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">DEFINE_NO_DEPRECATED</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_INCLUDEDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># STATIC library
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_library</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span> <span class="n">STATIC</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">message</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_compile_definitions</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="n">MESSAGE_STATIC_DEFINE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">HAVE_UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_INCLUDEDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">PkgConfig</span><span class="o">::</span><span class="n">UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_target_properties</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">POSITION_INDEPENDENT_CODE</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">ARCHIVE_OUTPUT_NAME</span> <span class="s">&#34;message&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DEBUG_POSTFIX</span> <span class="s">&#34;_sd&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">RELEASE_POSTFIX</span> <span class="s">&#34;_s&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">PUBLIC_HEADER</span> <span class="s">&#34;message.hpp;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/message_export.h&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># EXECUTABLES
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_executable</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span> <span class="n">hello_world</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># Prepare RPATH
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">file</span><span class="p">(</span><span class="n">RELATIVE_PATH</span> <span class="n">_rel</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_PREFIX</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_BINDIR</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_PREFIX</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">APPLE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">_rpath</span> <span class="s">&#34;@loader_path/${_rel}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">_rpath</span> <span class="s">&#34;\$ORIGIN/${_rel}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">file</span><span class="p">(</span><span class="n">TO_NATIVE_PATH</span> <span class="s">&#34;${_rpath}/${INSTALL_LIBDIR}&#34;</span> <span class="n">message_RPATH</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_target_properties</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">MACOSX_RPATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl">    <span class="n">SKIP_BUILD_RPATH</span> <span class="n">OFF</span>
</span></span><span class="line"><span class="cl">    <span class="n">BUILD_WITH_INSTALL_RPATH</span> <span class="n">OFF</span>
</span></span><span class="line"><span class="cl">    <span class="n">INSTALL_RPATH</span> <span class="s">&#34;${message_RPATH}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">INSTALL_RPATH_USE_LINK_PATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wAR</span> <span class="n">hello_world</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wAR</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># &lt;&lt;&lt; Install and export targets &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">install</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">TARGETS</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="k">static</span>
</span></span><span class="line"><span class="cl">    <span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span>
</span></span><span class="line"><span class="cl">    <span class="n">hello</span><span class="o">-</span><span class="n">world_wAR</span>
</span></span><span class="line"><span class="cl">  <span class="n">ARCHIVE</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_LIBDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">lib</span>
</span></span><span class="line"><span class="cl">  <span class="n">RUNTIME</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_BINDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">bin</span>
</span></span><span class="line"><span class="cl">  <span class="n">LIBRARY</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_LIBDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">lib</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC_HEADER</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_INCLUDEDIR</span><span class="p">}</span><span class="o">/</span><span class="n">message</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">dev</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set_target_properties</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">POSITION_INDEPENDENT_CODE</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">CXX_VISIBILITY_PRESET</span> <span class="n">hidden</span>
</span></span><span class="line"><span class="cl">    <span class="n">VISIBILITY_INLINES_HIDDEN</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">SOVERSION</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_VERSION_MAJOR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_NAME</span> <span class="s">&#34;message&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DEBUG_POSTFIX</span> <span class="s">&#34;_d&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">PUBLIC_HEADER</span> <span class="s">&#34;message.hpp;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/message_export.h&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">MACOSX_RPATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>CXX_VISIBILITY_PRESET hidden</strong>: 设置了默认的符号可见性。在这里，它被设置为隐藏，这意味着除非显式指定，否则所有符号都不会被导出。有助于减小最终的二进制文件大小，提高加载速度，并提供一定程度的封装。</li>
<li><strong>VISIBILITY_INLINES_HIDDEN 1</strong>: 当使用隐藏可见性时，这个选项也隐藏了内联函数的符号。这进一步减少了导出符号的数量。</li>
<li><strong>OUTPUT_NAME “message”</strong>: 这指定了目标的输出名称。在这种情况下，不管目标的实际名称是什么（在这里是 <code>message-shared</code>），生成的文件将被命名为 <code>message</code>。</li>
<li><strong>PUBLIC_HEADER message.hpp;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/message_export.h</strong>: 指定了公共头文件。这些文件在安装目标时会被特别对待，通常被复制到包含目录中。</li>
<li><strong>MACOSX_RPATH ON</strong>: 这是一个特定于macOS的选项，启用了相对路径（rpath）的使用。RPath是运行时搜索共享库的一种机制，这对于确保应用程序可以找到其依赖的共享库非常重要。</li>
</ul>
</div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">generate_export_header</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">BASE_NAME</span> <span class="s">&#34;message&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EXPORT_MACRO_NAME</span> <span class="s">&#34;MESSAGE_LIB_API&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EXPORT_FILE_NAME</span> <span class="s">&#34;${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/message_export.h&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">STATIC_DEFINE</span> <span class="s">&#34;MESSAGE_STATIC_DEFINE&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">DEFINE_NO_DEPRECATED</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>BASE_NAME “message”</strong>: 这指定了生成的宏的基础名称。生成的宏将基于 “message” 这个名称，例如 <code>MESSAGE_EXPORT</code>。</li>
<li><strong>EXPORT_MACRO_NAME “MESSAGE_LIB_API”</strong>: 这定义了用于导出符号的宏名称。可以使用 <code>MESSAGE_LIB_API</code> 来标记那些需要导出的类、函数或变量。</li>
<li><strong>EXPORT_FILE_NAME “${CMAKE_BINARY_DIR}/${INSTALL_INCLUDEDIR}/message_export.h”</strong>: 指定了生成的头文件的名称和位置。此头文件将包含必要的预处理器指令，用于根据是正在编译库本身还是正在使用库来改变宏的行为。</li>
<li><strong>STATIC_DEFINE “MESSAGE_STATIC_DEFINE”</strong>: 当库被静态链接时，这个宏将被定义。这对于在静态和共享链接之间透明地切换非常有用。</li>
<li><strong>DEFINE_NO_DEPRECATED</strong>: 这将定义一个宏，用于禁用库中已弃用函数的警告。这对于维护旧代码库非常有用，因为它允许开发者在不触发弃用警告的情况下编译旧代码(当然这个宏可以不使用)。</li>
</ul>
</div>
    </div>
  </div>
<p><strong>src/message.hpp</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iosfwd&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;message_export.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">class</span> <span class="nc">MESSAGE_LIB_API</span> <span class="n">Message</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">Message</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">)</span> <span class="o">:</span> <span class="n">message_</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">,</span> <span class="n">Message</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">obj</span><span class="p">.</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">os</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">message_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GetUUID</span><span class="p">();</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/hello_world.cpp</strong></p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;message.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#ifdef HAVE_UUID
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;uuid/uuid.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">Message</span><span class="o">::</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;This is my very nice message: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">message_</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;...and here is its UUID: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">GetUUID</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">os</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#ifdef HAVE_UUID
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GetUUID</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_t</span> <span class="n">uuid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_generate</span><span class="p">(</span><span class="n">uuid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">uuid_str</span><span class="p">[</span><span class="mi">37</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_unparse_lower</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">uuid_str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_clear</span><span class="p">(</span><span class="n">uuid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">uuid_cxx</span><span class="p">(</span><span class="n">uuid_str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">uuid_cxx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">#else
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GetUUID</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s">&#34;Ooooops, no UUID for you!&#34;</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>test/CMakeLists.txt</strong></p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">test_shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">test_static</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wAR</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="p">&amp;</span> mkdir build
</span></span><span class="line"><span class="cl"><span class="p">&amp;</span> <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl"><span class="p">&amp;</span> cmake ..
</span></span><span class="line"><span class="cl"><span class="p">&amp;</span> cmake --build . --target install
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Scanning dependencies of target message-static
</span></span><span class="line"><span class="cl"><span class="o">[</span> 12%<span class="o">]</span> Building CXX object src/CMakeFiles/message-static.dir/message.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 25%<span class="o">]</span> Linking CXX static library ../lib/libmessage_s.a
</span></span><span class="line"><span class="cl"><span class="o">[</span> 25%<span class="o">]</span> Built target message-static
</span></span><span class="line"><span class="cl">Scanning dependencies of target hello-world_wAR
</span></span><span class="line"><span class="cl"><span class="o">[</span> 37%<span class="o">]</span> Building CXX object src/CMakeFiles/hello-world_wAR.dir/hello_world.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 50%<span class="o">]</span> Linking CXX executable ../bin/hello-world_wAR
</span></span><span class="line"><span class="cl"><span class="o">[</span> 50%<span class="o">]</span> Built target hello-world_wAR
</span></span><span class="line"><span class="cl">Scanning dependencies of target message-shared
</span></span><span class="line"><span class="cl"><span class="o">[</span> 62%<span class="o">]</span> Building CXX object src/CMakeFiles/message-shared.dir/message.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 75%<span class="o">]</span> Linking CXX shared library ../lib/libmessage.so
</span></span><span class="line"><span class="cl"><span class="o">[</span> 75%<span class="o">]</span> Built target message-shared
</span></span><span class="line"><span class="cl">Scanning dependencies of target hello-world_wDSO
</span></span><span class="line"><span class="cl"><span class="o">[</span> 87%<span class="o">]</span> Building CXX object src/CMakeFiles/hello-world_wDSO.dir/hello_world.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span>100%<span class="o">]</span> Linking CXX executable ../bin/hello-world_wDSO
</span></span><span class="line"><span class="cl"><span class="o">[</span>100%<span class="o">]</span> Built target hello-world_wDSO
</span></span><span class="line"><span class="cl">Install the project...
</span></span><span class="line"><span class="cl">-- Install configuration: <span class="s2">&#34;Release&#34;</span>
</span></span><span class="line"><span class="cl">-- Installing: /home/jiangli/repo/tutorials/cmake-tutorial/chapter9/02/output/lib/libmessage.so.1
</span></span><span class="line"><span class="cl">-- Up-to-date: /home/jiangli/repo/tutorials/cmake-tutorial/chapter9/02/output/lib/libmessage.so
</span></span><span class="line"><span class="cl">-- Up-to-date: /home/jiangli/repo/tutorials/cmake-tutorial/chapter9/02/output/include/message/message.hpp
</span></span><span class="line"><span class="cl">-- Installing: /home/jiangli/repo/tutorials/cmake-tutorial/chapter9/02/output/include/message/message_export.h
</span></span><span class="line"><span class="cl">-- Installing: /home/jiangli/repo/tutorials/cmake-tutorial/chapter9/02/output/lib/libmessage_s.a
</span></span><span class="line"><span class="cl">-- Up-to-date: /home/jiangli/repo/tutorials/cmake-tutorial/chapter9/02/output/include/message/message.hpp
</span></span><span class="line"><span class="cl">-- Up-to-date: /home/jiangli/repo/tutorials/cmake-tutorial/chapter9/02/output/include/message/message_export.h
</span></span><span class="line"><span class="cl">-- Installing: /home/jiangli/repo/tutorials/cmake-tutorial/chapter9/02/output/bin/hello-world_wDSO
</span></span><span class="line"><span class="cl">-- Set runtime path of <span class="s2">&#34;/home/jiangli/repo/tutorials/cmake-tutorial/chapter9/02/output/bin/hello-world_wDSO&#34;</span> to <span class="s2">&#34;</span><span class="nv">$ORIGIN</span><span class="s2">/../lib&#34;</span>
</span></span><span class="line"><span class="cl">-- Installing: /home/jiangli/repo/tutorials/cmake-tutorial/chapter9/02/output/bin/hello-world_wAR</span></span></code></pre></td></tr></table>
</div>
</div><p>输出：
<br></p>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">导处头文件</div>
</center>
<br>]]></description></item><item><title>CMake 笔记 | [41] 安装项目</title><link>https://jianye0428.github.io/posts/cmake_note_41/</link><pubDate>Thu, 01 Feb 2024 13:11:05 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_41/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>这篇笔记，将通过一个小项目来介绍一些基本概念，这些概念也将在后面的笔记中使用。安装文件、库和可执行文件是一项非常基础的任务，但是也可能会带来一些问题。通过这篇笔记，展示如何使用CMake有效地避开这些问题。</strong></div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">│   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   ├── hello_world.cpp
</span></span><span class="line"><span class="cl">│   ├── message.cpp
</span></span><span class="line"><span class="cl">│   └── message.hpp
</span></span><span class="line"><span class="cl">└── <span class="nb">test</span>
</span></span><span class="line"><span class="cl">    └── CMakeLists.txt</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter9/01"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter9/01<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p><strong>src/CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp"># Search for pkg-config and UUID
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">find_package</span><span class="p">(</span><span class="n">PkgConfig</span> <span class="n">QUIET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">PKG_CONFIG_FOUND</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">pkg_search_module</span><span class="p">(</span><span class="n">UUID</span> <span class="n">uuid</span> <span class="n">IMPORTED_TARGET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">TARGET</span> <span class="n">PkgConfig</span><span class="o">::</span><span class="n">UUID</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Found libuuid&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">UUID_FOUND</span> <span class="n">TRUE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># SHARED library
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_library</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span> <span class="n">SHARED</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">message</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_compile_definitions</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">HAVE_UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">PkgConfig</span><span class="o">::</span><span class="n">UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_target_properties</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">POSITION_INDEPENDENT_CODE</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">SOVERSION</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_VERSION_MAJOR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_NAME</span> <span class="s">&#34;message&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DEBUG_POSTFIX</span> <span class="s">&#34;_d&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">PUBLIC_HEADER</span> <span class="s">&#34;message.hpp&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">MACOSX_RPATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl">    <span class="n">WINDOWS_EXPORT_ALL_SYMBOLS</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span> <span class="n">hello_world</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># Prepare RPATH
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">file</span><span class="p">(</span><span class="n">RELATIVE_PATH</span> <span class="n">_rel</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_PREFIX</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_BINDIR</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_PREFIX</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">APPLE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">_rpath</span> <span class="s">&#34;@loader_path/${_rel}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">_rpath</span> <span class="s">&#34;\$ORIGIN/${_rel}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">file</span><span class="p">(</span><span class="n">TO_NATIVE_PATH</span> <span class="s">&#34;${_rpath}/${INSTALL_LIBDIR}&#34;</span> <span class="n">message_RPATH</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_target_properties</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">MACOSX_RPATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl">    <span class="n">SKIP_BUILD_RPATH</span> <span class="n">OFF</span>
</span></span><span class="line"><span class="cl">    <span class="n">BUILD_WITH_INSTALL_RPATH</span> <span class="n">OFF</span>
</span></span><span class="line"><span class="cl">    <span class="n">INSTALL_RPATH</span> <span class="s">&#34;${message_RPATH}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">INSTALL_RPATH_USE_LINK_PATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># &lt;&lt;&lt; Install and export targets &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">install</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">TARGETS</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">    <span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span>
</span></span><span class="line"><span class="cl">  <span class="n">ARCHIVE</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_LIBDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">lib</span>
</span></span><span class="line"><span class="cl">  <span class="n">RUNTIME</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_BINDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">bin</span>
</span></span><span class="line"><span class="cl">  <span class="n">LIBRARY</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_LIBDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">lib</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC_HEADER</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_INCLUDEDIR</span><span class="p">}</span><span class="o">/</span><span class="n">message</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">dev</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">target_compile_definitions</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">BOOL</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">UUID_FOUND</span><span class="p">}</span><span class="o">&gt;:</span><span class="n">HAVE_UUID</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如果我们找到了三方库<code>UUID</code>的话，该命令会将 <code>HAVE_UUID</code> 编译定义添加到消息共享目标及其依赖库中。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>这段 CMake 脚本使用了 <code>set_target_properties</code> 命令来为 <code>message-shared</code> 这个目标（通常是一个库或可执行文件）设置一系列属性。下面我会用中文解释这些属性的含义：</p>
<div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set_target_properties</span><span class="p">(</span><span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">POSITION_INDEPENDENT_CODE</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">SOVERSION</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_VERSION_MAJOR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_NAME</span> <span class="s">&#34;message&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DEBUG_POSTFIX</span> <span class="s">&#34;_d&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">PUBLIC_HEADER</span> <span class="s">&#34;message.hpp&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">MACOSX_RPATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl">    <span class="n">WINDOWS_EXPORT_ALL_SYMBOLS</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li><strong><code>POSITION_INDEPENDENT_CODE 1</code></strong>: 设置代码为位置无关代码。这对于创建共享库是重要的，因为它允许代码在内存中的任何位置运行，这对于共享库来说是必需的。</li>
<li><strong><code>SOVERSION ${PROJECT_VERSION_MAJOR}</code></strong>: 设置共享对象版本号，这里使用的是项目的主版本号。</li>
<li><strong><code>OUTPUT_NAME &quot;message&quot;</code></strong>: 指定输出的名称。尽管目标名称是 <code>message-shared</code>，在构建时生成的文件将被命名为 <code>message</code>（例如，<code>message.dll</code> 或 <code>message.so</code>）。</li>
<li><strong><code>DEBUG_POSTFIX &quot;_d&quot;</code></strong>: 为调试版本的输出添加后缀。在构建调试版本时，输出文件的名称会有一个额外的 <code>_d</code> 后缀，有助于区分调试和发布版本。</li>
<li><strong><code>PUBLIC_HEADER &quot;message.hpp&quot;</code></strong>: 指定公共头文件。</li>
<li><strong><code>MACOSX_RPATH ON</code></strong>: 在 macOS 系统上启用 RPATH。这是一种动态库查找路径的设置方法，有助于应用程序在运行时找到其依赖的共享库。</li>
<li><strong><code>WINDOWS_EXPORT_ALL_SYMBOLS ON</code></strong>: 在 Windows 上自动导出所有符号。这对于创建 DLL（动态链接库）特别有用，因为它简化了符号导出的过程。</li>
</ol></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-18"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">file</span><span class="p">(</span><span class="n">RELATIVE_PATH</span> <span class="n">_rel</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_PREFIX</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_BINDIR</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_PREFIX</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">APPLE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">_rpath</span> <span class="s">&#34;@loader_path/${_rel}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">_rpath</span> <span class="s">&#34;\$ORIGIN/${_rel}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在这个 CMake 脚本命令中，<code>file(RELATIVE_PATH ...)</code> 用于计算两个路径之间的相对路径。</p>
<p>这个命令的目的是为了找出 <code>${CMAKE_INSTALL_PREFIX}</code> 相对于 <code>${CMAKE_INSTALL_PREFIX}/${INSTALL_BINDIR}</code> 的相对路径。换句话说，它在寻找从安装的二进制目录（<code>INSTALL_BINDIR</code>）到安装的根目录（<code>CMAKE_INSTALL_PREFIX</code>）的路径。在大多数情况下，这将简单地解析为从二进制目录向上到达根目录的相对路径（比如 <code>../</code> 或者更多级的 <code>../../</code>，取决于 <code>INSTALL_BINDIR</code> 的深度）。</p>
<p>这种类型的计算在处理安装和打包时非常有用，尤其是当需要处理可移植性和不同系统结构时。通过这样的相对路径设置，可以确保不管你的软件安装在哪里，文件和资源的相互引用都是正确的。</p>
<p>这段 CMake 脚本代码使用 <code>file(RELATIVE_PATH ...)</code> 命令计算了一个相对路径，并根据操作系统类型（Apple 系统或其他）设置了一个名为 <code>_rpath</code> 的变量，用于指定动态库的运行时搜索路径（RPATH）。下面是详细解释：</p>
<ol>
<li><strong><code>if(APPLE)</code></strong> 和 <strong><code>else()</code></strong>: 这两行代码检查当前是否在 Apple 系统（比如 macOS）上进行构建。如果是，在 Apple 系统上使用一种 RPATH 设置方法；如果不是（比如在 Linux 或 Windows 上），使用另一种方法。</li>
<li><strong><code>set(_rpath &quot;@loader_path/${_rel}&quot;)</code></strong>: 在 Apple 系统上，<code>_rpath</code> 被设置为 <code>&quot;@loader_path/${_rel}&quot;</code>。这里的 <code>@loader_path</code> 是一个特殊的标记，它表示加载动态库的可执行文件的位置。这种方法允许动态库在与可执行文件相对的路径中被找到。</li>
<li><strong><code>set(_rpath &quot;\$ORIGIN/${_rel}&quot;)</code></strong>: 在非 Apple 系统上，<code>_rpath</code> 被设置为 <code>&quot;\$ORIGIN/${_rel}&quot;</code>。这里的 <code>$ORIGIN</code> 是一个特殊的标记，它也表示加载动态库的可执行文件的位置。与 Apple 系统的方法类似，它使得动态库可以在相对于可执行文件的路径中被找到。</li>
</ol>
</div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-19"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set_target_properties</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">MACOSX_RPATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl">    <span class="n">SKIP_BUILD_RPATH</span> <span class="n">OFF</span>
</span></span><span class="line"><span class="cl">    <span class="n">BUILD_WITH_INSTALL_RPATH</span> <span class="n">OFF</span>
</span></span><span class="line"><span class="cl">    <span class="n">INSTALL_RPATH</span> <span class="s">&#34;${message_RPATH}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">INSTALL_RPATH_USE_LINK_PATH</span> <span class="n">ON</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用 <code>set_target_properties</code> 命令来为名为 <code>hello-world_wDSO</code> 的目标设置一系列属性。</p>
<ol>
<li><strong><code>MACOSX_RPATH ON</code></strong>: 这个选项用于在 macOS 系统上启用 RPATH。这意味着在 macOS 上构建时，CMake 会自动设置运行时路径，这有助于程序在运行时找到其动态库依赖。</li>
<li><strong><code>SKIP_BUILD_RPATH OFF</code></strong>: 当此选项为 OFF 时，CMake 会在构建阶段使用 RPATH。这样做确保在构建时（例如，当运行测试时），可以找到动态库。</li>
<li><strong><code>BUILD_WITH_INSTALL_RPATH OFF</code></strong>: 这个选项表示构建时不使用安装后的 RPATH。这意味着构建时和安装后使用的 RPATH 是不同的。通常，构建时的 RPATH 指向构建目录中的库，而安装后的 RPATH 指向安装目录中的库。</li>
<li><strong><code>INSTALL_RPATH &quot;${message_RPATH}&quot;</code></strong>: 这个选项设置了安装后的 RPATH。<code>${message_RPATH}</code> 是一个变量，它应该在其他地方被定义，并包含了运行时库（比如动态链接库）的路径。这意味着一旦 <code>hello-world_wDSO</code> 被安装，它会使用这个变量指定的路径来查找其运行时依赖。</li>
<li><strong><code>INSTALL_RPATH_USE_LINK_PATH ON</code></strong>: 当此选项为 ON 时，CMake 会在设置安装后的 RPATH 时考虑目标的链接路径。这意味着安装后的 RPATH 不仅会包括 <code>INSTALL_RPATH</code> 指定的路径，还会包括目标链接时使用的所有路径。这有助于确保运行时能找到所有必需的动态库，尤其是当这些库位于非标准或非默认的位置时。</li>
</ol>
<p>这些属性共同确保了 <code>hello-world_wDSO</code> 在构建、安装和运行时能正确地找到其动态链接库依赖。这是在跨平台开发和部署应用程序时非常重要的一部分，尤其是在涉及到动态链接库的情况下。</p>
</div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-20"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">install</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">TARGETS</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="o">-</span><span class="n">shared</span>
</span></span><span class="line"><span class="cl">    <span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span>
</span></span><span class="line"><span class="cl">  <span class="n">ARCHIVE</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_LIBDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">lib</span>
</span></span><span class="line"><span class="cl">  <span class="n">RUNTIME</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_BINDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">bin</span>
</span></span><span class="line"><span class="cl">  <span class="n">LIBRARY</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_LIBDIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">lib</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC_HEADER</span>
</span></span><span class="line"><span class="cl">    <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">INSTALL_INCLUDEDIR</span><span class="p">}</span><span class="o">/</span><span class="n">message</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMPONENT</span> <span class="n">dev</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用 <code>install()</code> 命令来定义如何安装 <code>message-shared</code> 和 <code>hello-world_wDSO</code> 这两个目标。</p>
<ol>
<li><strong><code>TARGETS message-shared hello-world_wDSO</code></strong>: 这指定了要安装的目标。这里有两个目标：<code>message-shared</code> 和 <code>hello-world_wDSO</code>。</li>
<li><strong><code>ARCHIVE DESTINATION ${INSTALL_LIBDIR} COMPONENT lib</code></strong>: 这部分指定静态库（<code>.a</code> 或 <code>.lib</code> 文件）的安装位置。它们将被安装到由 <code>${INSTALL_LIBDIR}</code> 变量定义的目录中，并标记为 <code>lib</code> 组件的一部分。通常，<code>${INSTALL_LIBDIR}</code> 会指向类似 <code>lib</code> 或 <code>lib64</code> 的目录。</li>
<li><strong><code>RUNTIME DESTINATION ${INSTALL_BINDIR} COMPONENT bin</code></strong>: 这定义了可执行文件（<code>hello-world_wDSO</code>）的安装位置。它们将被安装到由 <code>${INSTALL_BINDIR}</code> 变量指定的目录，通常是类似于 <code>bin</code> 的目录。这些文件被标记为 <code>bin</code> 组件的一部分。</li>
<li><strong><code>LIBRARY DESTINATION ${INSTALL_LIBDIR} COMPONENT lib</code></strong>: 这指定动态库（<code>.so</code>、<code>.dll</code> 或 <code>.dylib</code> 文件）的安装位置。就像静态库一样，它们将被安装到 <code>${INSTALL_LIBDIR}</code> 目录，并标记为 <code>lib</code> 组件的一部分。</li>
<li><strong><code>PUBLIC_HEADER DESTINATION ${INSTALL_INCLUDEDIR}/message COMPONENT dev</code></strong>: 这指定了公共头文件（如 <code>message.hpp</code>）的安装位置。这些文件将被安装到 <code>${INSTALL_INCLUDEDIR}/message</code> 目录，通常是类似于 <code>include/message</code> 的目录，作为 <code>dev</code> 组件的一部分。这使得其他开发者可以在他们自己的项目中轻松地找到并使用这些头文件。</li>
</ol></div>
    </div>
  </div>
<p><strong>src/message.h</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Message</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">Message</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">)</span> <span class="o">:</span> <span class="n">message_</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">,</span> <span class="n">Message</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">obj</span><span class="p">.</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">os</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">message_</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GetUUID</span><span class="p">();</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/message.cpp</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;message.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#ifdef HAVE_UUID
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;uuid/uuid.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">Message</span><span class="o">::</span><span class="n">PrintObject</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span> <span class="o">&amp;</span><span class="n">os</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;This is my very nice message: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">message_</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;...and here is its UUID: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">GetUUID</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">os</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#ifdef HAVE_UUID
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GetUUID</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_t</span> <span class="n">uuid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_generate</span><span class="p">(</span><span class="n">uuid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">uuid_str</span><span class="p">[</span><span class="mi">37</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_unparse_lower</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">uuid_str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">uuid_clear</span><span class="p">(</span><span class="n">uuid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">uuid_cxx</span><span class="p">(</span><span class="n">uuid_str</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">uuid_cxx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">#else
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GetUUID</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s">&#34;Ooooops, no UUID for you!&#34;</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/hello_world.cpp</strong></p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;message.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Message</span> <span class="n">say_hello</span><span class="p">(</span><span class="s">&#34;Hello, CMake World!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">say_hello</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">Message</span> <span class="n">say_goodbye</span><span class="p">(</span><span class="s">&#34;Goodbye, CMake World&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">say_goodbye</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">retu</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>test/CMakeLists.txt</strong></p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">test_shared</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">hello</span><span class="o">-</span><span class="n">world_wDSO</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.6</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">example</span>
</span></span><span class="line"><span class="cl">  <span class="n">LANGUAGES</span> <span class="n">CXX</span>
</span></span><span class="line"><span class="cl">  <span class="n">VERSION</span> <span class="mf">1.0.0</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># &lt;&lt;&lt; General set up &gt;&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_INSTALL_PREFIX</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">output</span><span class="o">/</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Project will be installed to ${CMAKE_INSTALL_PREFIX}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">CMAKE_BUILD_TYPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">CMAKE_BUILD_TYPE</span> <span class="n">Release</span> <span class="n">CACHE</span> <span class="n">STRING</span> <span class="s">&#34;Build type&#34;</span> <span class="n">FORCE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Build type set to ${CMAKE_BUILD_TYPE}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">GNUInstallDirs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_LIBRARY_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_RUNTIME_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># Offer the user the choice of overriding the installation directories
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_LIBDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for libraries&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_BINDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for executables&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_INCLUDEDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_INCLUDEDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for header files&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">WIN32</span> <span class="n">AND</span> <span class="n">NOT</span> <span class="n">CYGWIN</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">DEF_INSTALL_CMAKEDIR</span> <span class="n">CMake</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">DEF_INSTALL_CMAKEDIR</span> <span class="n">share</span><span class="o">/</span><span class="n">cmake</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_CMAKEDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">DEF_INSTALL_CMAKEDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for CMake files&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># Report to user
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">foreach</span><span class="p">(</span><span class="n">p</span> <span class="n">LIB</span> <span class="n">BIN</span> <span class="n">INCLUDE</span> <span class="n">CMAKE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">file</span><span class="p">(</span><span class="n">TO_NATIVE_PATH</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_PREFIX</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">INSTALL_</span><span class="err">$</span><span class="p">{</span><span class="n">p</span><span class="p">}</span><span class="n">DIR</span><span class="p">}</span> <span class="n">_path</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Installing ${p} components to ${_path}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">unset</span><span class="p">(</span><span class="n">_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endforeach</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">enable_testing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">test</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-21"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_LIBDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for libraries&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_BINDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for executables&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_INCLUDEDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_INCLUDEDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for header files&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">WIN32</span> <span class="n">AND</span> <span class="n">NOT</span> <span class="n">CYGWIN</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">DEF_INSTALL_CMAKEDIR</span> <span class="n">CMake</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">DEF_INSTALL_CMAKEDIR</span> <span class="n">share</span><span class="o">/</span><span class="n">cmake</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_CMAKEDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">DEF_INSTALL_CMAKEDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span> <span class="s">&#34;Installation directory for CMake files&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li><strong><code>set(INSTALL_LIBDIR ${CMAKE_INSTALL_LIBDIR} CACHE PATH &quot;Installation directory for libraries&quot;)</code></strong>: 这行设置了一个名为 <code>INSTALL_LIBDIR</code> 的变量，它定义了库文件（静态库和动态库）的安装目录。这个目录默认为 <code>CMAKE_INSTALL_LIBDIR</code> 的值，通常指向系统默认的库安装路径（如 <code>lib</code> 或 <code>lib64</code>）。</li>
<li><strong><code>set(INSTALL_BINDIR ${CMAKE_INSTALL_BINDIR} CACHE PATH &quot;Installation directory for executables&quot;)</code></strong>: 这行设置了一个名为 <code>INSTALL_BINDIR</code> 的变量，用于定义可执行文件的安装目录。这个目录默认为 <code>CMAKE_INSTALL_BINDIR</code> 的值，通常是系统默认的可执行文件安装路径（如 <code>bin</code>）。</li>
<li><strong><code>set(INSTALL_INCLUDEDIR ${CMAKE_INSTALL_INCLUDEDIR} CACHE PATH &quot;Installation directory for header files&quot;)</code></strong>: 这行设置了一个名为 <code>INSTALL_INCLUDEDIR</code> 的变量，它定义了头文件的安装目录。这个目录默认为 <code>CMAKE_INSTALL_INCLUDEDIR</code> 的值，通常指向系统默认的头文件安装路径（如 <code>include</code>）。</li>
<li><strong><code>if(WIN32 AND NOT CYGWIN)</code></strong> 和 <strong><code>else()</code></strong>: 这两行代码是一个条件语句，用于区分 Windows 系统和其他系统（如 Linux 或 macOS）。
<ul>
<li>在 Windows 系统上，如果不是在 Cygwin 环境下，<code>DEF_INSTALL_CMAKEDIR</code> 被设置为 <code>CMake</code>。这意味着 CMake 配置文件将安装到一个名为 <code>CMake</code> 的目录中。</li>
<li>在其他系统上，<code>DEF_INSTALL_CMAKEDIR</code> 被设置为 <code>share/cmake/${PROJECT_NAME}</code>。这里 <code>${PROJECT_NAME}</code> 是项目名称的变量，这个路径通常用于存放项目相关的 CMake 配置文件。</li>
</ul>
</li>
<li><strong><code>set(INSTALL_CMAKEDIR ${DEF_INSTALL_CMAKEDIR} CACHE PATH &quot;Installation directory for CMake files&quot;)</code></strong>: 这行设置了一个名为 <code>INSTALL_CMAKEDIR</code> 的变量，它定义了 CMake 配置文件的安装目录，值为前面根据平台条件设置的 <code>DEF_INSTALL_CMAKEDIR</code>。</li>
</ol>
<p>这些设置的目的是确保在不同的操作系统和环境中，项目的库文件、可执行文件、头文件和 CMake 文件都能被安装到合适的位置。通过使用这些变量，CMake 脚本可以灵活地适应不同系统的目录结构和用户的自定义安装路径。这种做法提高了项目的可移植性和灵活性，使得在不同环境下的构建和安装过程更加一致和可预测。此外，使用缓存变量（<code>CACHE PATH</code>）允许用户在配置（CMake 的 configure 阶段）时覆盖这些路径，进一步增加了灵活性。</p></div>
    </div>
  </div>
<h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir build <span class="p">&amp;</span> <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake ..
</span></span><span class="line"><span class="cl">cmake --build . --target install</span></span></code></pre></td></tr></table>
</div>
</div><p>GNU/Linux构建目录的内容如下:</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">├── build
</span></span><span class="line"><span class="cl">    ├── bin
</span></span><span class="line"><span class="cl">    │   └── hello-world_wDSO
</span></span><span class="line"><span class="cl">    ├── CMakeCache.txt
</span></span><span class="line"><span class="cl">    ├── cmake_install.cmake
</span></span><span class="line"><span class="cl">    ├── CTestTestfile.cmake
</span></span><span class="line"><span class="cl">    ├── install_manifest.txt
</span></span><span class="line"><span class="cl">    ├── lib
</span></span><span class="line"><span class="cl">    │   ├── libmessage.so -&gt; libmessage.so.1
</span></span><span class="line"><span class="cl">    │   └── libmessage.so.1
</span></span><span class="line"><span class="cl">    ├── Makefile
</span></span><span class="line"><span class="cl">    ├── src
</span></span><span class="line"><span class="cl">    ├── <span class="nb">test</span>
</span></span><span class="line"><span class="cl">    └── Testing</span></span></code></pre></td></tr></table>
</div>
</div><p>在安装位置，可以找到如下的目录结构:</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── bin
</span></span><span class="line"><span class="cl">│   └── hello-world_wDSO
</span></span><span class="line"><span class="cl">├── include
</span></span><span class="line"><span class="cl">│   └── message
</span></span><span class="line"><span class="cl">│       └── message.hpp
</span></span><span class="line"><span class="cl">└── lib
</span></span><span class="line"><span class="cl">    ├── libmessage.so -&gt; libmessage.so.1
</span></span><span class="line"><span class="cl">    └── libmessage.so.1</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="五补充内容">五、补充内容</h2>
<p><strong>安装到标准位置</strong></p>
<p>对于项目的安装来说，什么是好的布局呢？如果只有自己使用该项目，那就无所谓好或坏的布局。然而，一旦向外部发布产品，和他人共用该项目，就应该在安装项目时提供一个合理的布局。</p>
<p>我们可以遵循一些标准，CMake可以帮助我们做到这一点。实际上，<code>GNUInstallDirs.cmake</code>模块所做的就是定义这样一组变量，这些变量是安装不同类型文件的子目录的名称。</p>
<ul>
<li><strong><code>CMAKE_INSTALL_BINDIR</code></strong>：用于定义用户可执行文件所在的子目录，即所选安装目录下的bin目录。</li>
<li><strong><code>CMAKE_INSTALL_LIBDIR</code></strong>：将扩展到目标代码库(即静态库和动态库)所在的子目录。在64位系统上，它是<code>lib64</code>，而在32位系统上，它只是<code>lib</code>。</li>
<li><strong><code>CMAKE_INSTALL_INCLUDEDIR</code></strong>：使用这个变量为头文件获取正确的子目录，该变量为<code>include</code>。</li>
</ul>
<p>用户可能希望覆盖这些选项。允许在主CMakeLists.txt文件中使用以下方式覆盖选项:</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp"># Offer the user the choice
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">of</span> <span class="n">overriding</span> <span class="n">the</span> <span class="n">installation</span> <span class="n">directories</span>
</span></span><span class="line"><span class="cl"><span class="nf">set</span><span class="p">(</span><span class="n">INSTALL_LIBDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span>
</span></span><span class="line"><span class="cl"><span class="s">&#34;Installation directory for libraries&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_BINDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">PATH</span>
</span></span><span class="line"><span class="cl"><span class="s">&#34;Installation directory for executables&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">INSTALL_INCLUDEDIR</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_INCLUDEDIR</span><span class="p">}</span> <span class="n">CACHE</span>
</span></span><span class="line"><span class="cl"><span class="n">PATH</span> <span class="s">&#34;Installation directory for header files&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>重新定义了在项目中使用的<code>INSTALL_BINDIR</code>、<code>INSTALL_LIBDIR</code>和<code>INSTALL_INCLUDEDIR</code>变量。</p>
<p>当只要求安装库：</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="err">$</span> <span class="n">cmake</span> <span class="o">-</span><span class="n">D</span> <span class="n">COMPONENT</span><span class="o">=</span><span class="n">lib</span> <span class="o">-</span><span class="n">P</span> <span class="n">cmake_install</span><span class="p">.</span><span class="n">cmake</span></span></span></code></pre></td></tr></table>
</div>
</div><p>正确设置<code>RPATH</code>可能相当麻烦，但这对于用户来说无法避免。默认情况下，<code>CMake</code>设置可执行程序的<code>RPATH</code>，假设它们将从构建树运行。但是，安装之后<code>RPATH</code>被清除，当用户想要运行<code>hello-world_wDSO</code>时，就会出现问题。使用Linux上的<code>ldd</code>工具，我们可以检查构建树中的<code>hello-world_wDSO</code>可执行文件，运行<code>ldd hello-world_wDSO</code>将得到以下结果:</p>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">libmessage</span><span class="p">.</span><span class="n">so</span><span class="mf">.1</span> <span class="o">=&gt;</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">jiangli</span><span class="o">/</span><span class="n">repo</span><span class="o">/</span><span class="n">tutorials</span><span class="o">/</span><span class="n">cmake</span><span class="o">-</span><span class="n">tutorial</span><span class="o">/</span><span class="n">chapter9</span><span class="o">/</span><span class="mo">01</span><span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libmessage</span><span class="p">.</span><span class="n">so</span><span class="mf">.1</span> <span class="p">(</span><span class="mh">0x00007f43a4df7000</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在安装目录中运行ldd hello-world_wDSO将得到以下结果:</p>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">libmessage</span><span class="p">.</span><span class="n">so</span><span class="mf">.1</span> <span class="o">=&gt;</span> <span class="n">Not</span> <span class="n">found</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这显然是不行的。但是，总是硬编码<code>RPATH</code>来指向构建树或安装目录也是错误的：这两个位置中的任何一个都可能被删除，从而导致可执行文件的损坏。给出的解决方案为构建树和安装目录中的可执行文件设置了不同的<code>RPATH</code>，因此它总是指向“有意义”的位置；也就是说，尽可能接近可执行文件。在构建树中运行<code>ldd</code>显示相同的输出:</p>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">libmessage</span><span class="p">.</span><span class="n">so</span><span class="mf">.1</span> <span class="o">=&gt;</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">jiangli</span><span class="o">/</span><span class="n">repo</span><span class="o">/</span><span class="n">tutorials</span><span class="o">/</span><span class="n">cmake</span><span class="o">-</span><span class="n">tutorial</span><span class="o">/</span><span class="n">chapter9</span><span class="o">/</span><span class="mo">01</span><span class="o">/</span><span class="n">output</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="p">.</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libmessage</span><span class="p">.</span><span class="n">so</span><span class="mf">.1</span> <span class="p">(</span><span class="mh">0x00007f0ebfc4a000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">libmessage</span><span class="p">.</span><span class="n">so</span><span class="mf">.1</span> <span class="o">=&gt;</span> <span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">jiangli</span><span class="o">/</span><span class="n">repo</span><span class="o">/</span><span class="n">tutorials</span><span class="o">/</span><span class="n">cmake</span><span class="o">-</span><span class="n">tutorial</span><span class="o">/</span><span class="n">chapter9</span><span class="o">/</span><span class="mo">01</span><span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libmessage</span><span class="p">.</span><span class="n">so</span><span class="mf">.1</span> <span class="p">(</span><span class="mh">0x00007f43a4df7000</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用了带有目标参数的<code>CMake</code>安装命令，该命令还有另外4个参数:</p>
<ul>
<li><code>FILES</code>和<code>PROGRAMS</code>，分别用于安装文件或程序。安装后，并设置安装文件适当的权限。对于文件，对所有者具有读和写权限，对组以及其他用户和组具有读权限。对于程序，将授予执行权限。注意，<code>PROGRAMS</code>要与非构建目标的可执行程序一起使用。</li>
<li><code>DIRECTORY</code>，用于安装目录。当只给出一个目录名时，它通常被理解为相对于当前源目录。可以对目录的安装粒度进行控制。</li>
<li><code>SCRIPT</code>，可以使用它在CMake脚本中定义自定义安装规则。</li>
<li><code>EXPORT</code>，该参数用于导出目标。</li>
</ul>
]]></description></item><item><title>CMake 笔记 | [40] 超级构建模式</title><link>https://jianye0428.github.io/posts/cmake_note_40/</link><pubDate>Wed, 31 Jan 2024 13:51:49 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_40/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><strong>每个项目都需要处理依赖关系，使用</strong>**<code>CMake</code>很容易查询这些依赖关系，是否存在于配置项目中。前面的笔记中，展示了如何找到安装在系统上的依赖项，到目前为止我们一直使用这种模式。但是，当不满足依赖关系，我们只能使配置失败，并向用户警告失败的原因。然而，使用<code>CMake</code>可以组织我们的项目，如果在系统上找不到依赖项，就可以自动获取和构建依赖项。后续的几篇笔记将介绍和分析<code>ExternalProject.cmake</code>和<code>FetchContent.cmake</code>标准模块，及在<code>超级构建模式</code>中的使用。前者允许在构建时检索项目的依赖项，后者允许我们在配置时检索依赖项(<code>CMake</code>的<code>3.11</code>版本后添加)。使用超级构建模式，我们可以利用<code>CMake</code>作为包管理器：相同的项目中，将以相同的方式处理依赖项，无论依赖项在系统上是已经可用，还是需要重新构建。**</p>
<p><strong>首先通过一个简单示例，介绍超级构建模式。我们将展示如何使用</strong>**<code>ExternalProject_Add</code>命令来构建一个的<code>hello_world</code>程序。**</p>
</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">└── src
</span></span><span class="line"><span class="cl">      ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">      └── hello-world.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目结构：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter8/01"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter8/01<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p><strong>src/CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example_core</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">hello</span><span class="o">-</span><span class="n">world</span> <span class="n">hello_world</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/hello_world.cpp</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">say_hello</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&#34;Hello, CMake superbuild world!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">say_hello</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_property</span><span class="p">(</span><span class="n">DIRECTORY</span> <span class="n">PROPERTY</span> <span class="n">EP_BASE</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">subprojects</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">ExternalProject</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ExternalProject_Add</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span><span class="n">_core</span>
</span></span><span class="line"><span class="cl">  <span class="n">SOURCE_DIR</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">src</span>
</span></span><span class="line"><span class="cl">  <span class="n">CMAKE_ARGS</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="n">DCMAKE_CXX_COMPILER</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CXX_COMPILER</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="n">DCMAKE_CXX_STANDARD</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CXX_STANDARD</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="n">DCMAKE_CXX_EXTENSIONS</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CXX_EXTENSIONS</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="n">DCMAKE_CXX_STANDARD_REQUIRED</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">CMAKE_CACHE_ARGS</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="nl">DCMAKE_CXX_FLAGS</span><span class="p">:</span><span class="n">STRING</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CXX_FLAGS</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">BUILD_ALWAYS</span>
</span></span><span class="line"><span class="cl">    <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="n">INSTALL_COMMAND</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set_property</span><span class="p">(</span><span class="n">DIRECTORY</span> <span class="n">PROPERTY</span> <span class="n">EP_BASE</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">subprojects</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>为当前目录和底层目录设置<code>EP_BASE</code>目录属性。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">ExternalProject</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>包括<code>ExternalProject.cmake</code>标准模块。该模块提供了<code>ExternalProject_Add</code>函数。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">ExternalProject_Add</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span><span class="n">_core</span>
</span></span><span class="line"><span class="cl">  <span class="n">SOURCE_DIR</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">src</span>
</span></span><span class="line"><span class="cl">  <span class="n">CMAKE_ARGS</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="n">DCMAKE_CXX_COMPILER</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CXX_COMPILER</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="n">DCMAKE_CXX_STANDARD</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CXX_STANDARD</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="n">DCMAKE_CXX_EXTENSIONS</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CXX_EXTENSIONS</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="n">DCMAKE_CXX_STANDARD_REQUIRED</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">CMAKE_CACHE_ARGS</span>
</span></span><span class="line"><span class="cl">    <span class="o">-</span><span class="nl">DCMAKE_CXX_FLAGS</span><span class="p">:</span><span class="n">STRING</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CXX_FLAGS</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">BUILD_ALWAYS</span>
</span></span><span class="line"><span class="cl">    <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="n">INSTALL_COMMAND</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>Hello, World</code>源代码通过调用<code>ExternalProject_Add</code>函数作为外部项目添加的。外部项目的名称为<code>example_core</code>。</p>
<p><code>ExternalProject_Add</code>命令可用于添加第三方源。本篇通过将自己的项目，分为不同<code>CMake</code>项目的集合管理。本例中，主<code>CMakeLists.txt</code>和子<code>CMakeLists.txt</code>都声明了一个<code>CMake</code>项目，它们都使用了<code>project</code>命令。</p>
<p><code>ExternalProject_Add</code>有许多选项，可用于外部项目的配置和编译等所有方面。这些选择可以分为以下几类:</p>
<ul>
<li>
<p>Directory:用于调优源码的结构，并为外部项目构建目录。本篇，我们使用<code>SOURCE_DIR</code>选项让<code>CMake</code>知道源文件在<code>${CMAKE_CURRENT_LIST_DIR}/src</code>文件夹中。用于构建项目和存储临时文件的目录，也可以在此类选项或目录属性中指定。通过设置<code>EP_BASE</code>目录属性，<code>CMake</code>将按照以下布局为各个子项目设置所有目录:</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">TMP_DIR</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">EP_BASE</span><span class="o">&gt;/</span><span class="n">tmp</span><span class="o">/&lt;</span><span class="n">name</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">STAMP_DIR</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">EP_BASE</span><span class="o">&gt;/</span><span class="n">Stamp</span><span class="o">/&lt;</span><span class="n">name</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">DOWNLOAD_DIR</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">EP_BASE</span><span class="o">&gt;/</span><span class="n">Download</span><span class="o">/&lt;</span><span class="n">name</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">SOURCE_DIR</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">EP_BASE</span><span class="o">&gt;/</span><span class="n">Source</span><span class="o">/&lt;</span><span class="n">name</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">BINARY_DIR</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">EP_BASE</span><span class="o">&gt;/</span><span class="n">Build</span><span class="o">/&lt;</span><span class="n">name</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">INSTALL_DIR</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">EP_BASE</span><span class="o">&gt;/</span><span class="n">Install</span><span class="o">/&lt;</span><span class="n">name</span><span class="o">&gt;</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Download：外部项目的代码可能需要从在线存储库或资源处下载。</p>
</li>
<li>
<p>Update和Patch：可用于定义如何更新外部项目的源代码或如何应用补丁。</p>
</li>
<li>
<p>Configure：默认情况下，<code>CMake</code>会假定外部项目是使用<code>CMake</code>配置的。如下所示，我们并不局限于这种情况。如果外部项目是<code>CMake</code>项目，<code>ExternalProject_Add</code>将调用<code>CMake</code>可执行文件，并传递选项。对于本篇示例，我们通过<code>CMAKE_ARGS</code>和<code>CMAKE_CACHE_ARGS</code>选项传递配置参数。前者作为命令行参数直接传递，而后者通过<code>CMake</code>脚本文件传递。实际，脚本文件位于<code>build/subprojects/tmp/example_core/example_core- cache-.cmake</code>。然后，配置如以下所示:</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">loading initial cache file /home/jiangli/repo/tutorials/cmake-tutorial/chapter8/01/build/subprojects/tmp/example_core/example_core-cache-.cmake
</span></span><span class="line"><span class="cl">-- The CXX compiler identification is GNU 9.4.0
</span></span><span class="line"><span class="cl">-- Check <span class="k">for</span> working CXX compiler: /usr/bin/c++
</span></span><span class="line"><span class="cl">-- Check <span class="k">for</span> working CXX compiler: /usr/bin/c++ -- works
</span></span><span class="line"><span class="cl">-- Detecting CXX compiler ABI info
</span></span><span class="line"><span class="cl">-- Detecting CXX compiler ABI info - <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Detecting CXX compile features
</span></span><span class="line"><span class="cl">-- Detecting CXX compile features - <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Configuring <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Generating <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Build files have been written to: /home/jiangli/repo/tutorials/cmake-tutorial/chapter8/01/build/subprojects/Build/example_core</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Build：可用于调整外部项目的实际编译。我们使用<code>BUILD_ALWAYS</code>选项确保外部项目总会重新构建。</p>
</li>
<li>
<p>Install：这些选项用于配置应该如何安装外部项目。我们将<code>INSTALL_COMMAND</code>保留为空。</p>
</li>
<li>
<p>Test：为基于源代码构建的软件运行测试。<code>ExternalProject_Add</code>的这类选项可以用于此目的。我们的没有使用这些选项，因为<code>Hello, World</code>示例没有任何测试。</p>
</li>
</ul>
</div>
    </div>
  </div>
<h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p build
</span></span><span class="line"><span class="cl">$ cmake ..
</span></span><span class="line"><span class="cl">$ cmake --build .</span></span></code></pre></td></tr></table>
</div>
</div><p>构建目录的结构稍微复杂一些，<code>subprojects</code>文件夹的内容如下:</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">build/subprojects/
</span></span><span class="line"><span class="cl">├── Build
</span></span><span class="line"><span class="cl">│    └── example_core
</span></span><span class="line"><span class="cl">│        ├── CMakeCache.txt
</span></span><span class="line"><span class="cl">│        ├── CMakeFiles
</span></span><span class="line"><span class="cl">│        ├── cmake_install.cmake
</span></span><span class="line"><span class="cl">│        ├── hello-world
</span></span><span class="line"><span class="cl">│        └── Makefile
</span></span><span class="line"><span class="cl">├── Download
</span></span><span class="line"><span class="cl">│    └── example_core
</span></span><span class="line"><span class="cl">├── Install
</span></span><span class="line"><span class="cl">│    └── example_core
</span></span><span class="line"><span class="cl">├── Stamp
</span></span><span class="line"><span class="cl">│    └── exampleq_core
</span></span><span class="line"><span class="cl">│        ├── example_core-configure
</span></span><span class="line"><span class="cl">│        ├── example_core-done
</span></span><span class="line"><span class="cl">│        ├── example_core-download
</span></span><span class="line"><span class="cl">│        ├── example_core-install
</span></span><span class="line"><span class="cl">│        ├── example_core-mkdir
</span></span><span class="line"><span class="cl">│        ├── example_core-patch
</span></span><span class="line"><span class="cl">│        └── example_core-update
</span></span><span class="line"><span class="cl">└── tmp
</span></span><span class="line"><span class="cl">    └── example_core
</span></span><span class="line"><span class="cl">        ├── example_core-cache-.cmake
</span></span><span class="line"><span class="cl">        ├── example_core-cfgcmd.txt
</span></span><span class="line"><span class="cl">        └── example_core-cfgcmd.txt.in</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>补充内容</strong></p>
<p><code>ExternalProject.cmake</code>定义了<code>ExternalProject_Get_Property</code>命令，该命令对于检索外部项目的属性非常有用。外部项目的属性是在首次调用<code>ExternalProject_Add</code>命令时设置的。例如，在配置<code>example_core</code>时，检索要传递给<code>CMake</code>的参数可以通过以下方法实现:</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">ExternalProject_Get_Property</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span><span class="n">_core</span> <span class="n">CMAKE_ARGS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;CMAKE_ARGS of ${PROJECT_NAME}_core ${CMAKE_ARGS}&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>ExternalProject.cmake</code>模块定义了以下附加命令:</p>
<ul>
<li><code>ExternalProject_Add_Step</code>: 当添加了外部项目，此命令允许将附加的命令作为自定义步骤锁定在其上。</li>
<li><code>ExternalProject_Add_StepTargets</code>:允许将外部项目中的步骤(例如：构建和测试步骤)定义为单独的目标。这意味着可以从完整的外部项目中单独触发这些步骤，并允许对项目中的复杂依赖项，进行细粒度控制。</li>
<li><code>ExternalProject_Add_StepDependencies</code>:外部项目的步骤有时可能依赖于外部目标，而这个命令的设计目的就是处理这些情况。</li>
</ul>
]]></description></item><item><title>CMake 笔记 | [39] 构建项目策略及限制变量范围2</title><link>https://jianye0428.github.io/posts/cmake_note_39/</link><pubDate>Wed, 31 Jan 2024 13:51:46 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_39/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><strong>本篇，我们将讨论上一篇的另一种方法，并不使用<code>add_subdirectory</code>的情况下，使用<code>module include</code>组装不同的<code>CMakeLists.txt</code>文件。其允许我们使用<code>target_link_libraries</code>链接到当前目录之外定义的目标。</strong></p>
<p><strong>就项目架构而言，不推荐本篇的构建方式。</strong></p>
</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── external
</span></span><span class="line"><span class="cl">│   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   ├── conversion.cpp
</span></span><span class="line"><span class="cl">│   └── conversion.hpp
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">│   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   ├── evolution
</span></span><span class="line"><span class="cl">│   │   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   │   ├── evolution.cpp
</span></span><span class="line"><span class="cl">│   │   └── evolution.hpp
</span></span><span class="line"><span class="cl">│   ├── initial
</span></span><span class="line"><span class="cl">│   │   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   │   ├── initial.cpp
</span></span><span class="line"><span class="cl">│   │   └── initial.hpp
</span></span><span class="line"><span class="cl">│   ├── io
</span></span><span class="line"><span class="cl">│   │   ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│   │   ├── io.cpp
</span></span><span class="line"><span class="cl">│   │   └── io.hpp
</span></span><span class="line"><span class="cl">│   ├── main.cpp
</span></span><span class="line"><span class="cl">│   └── parser
</span></span><span class="line"><span class="cl">│       ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│       ├── parser.cpp
</span></span><span class="line"><span class="cl">│       └── parser.hpp
</span></span><span class="line"><span class="cl">└── tests
</span></span><span class="line"><span class="cl">    ├── catch.hpp
</span></span><span class="line"><span class="cl">    ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">    └── test.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/08"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/08<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p>将使用与上一篇相同的源代码。唯一的更改将出现在<code>CMakeLists.txt</code>文件中，我们将在下面的部分中讨论这些更改。
<strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">GNUInstallDirs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_LIBRARY_OUTPUT_DIRECTORY</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_RUNTIME_OUTPUT_DIRECTORY</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="cp"># defines targets and sources
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">include</span><span class="p">(</span><span class="n">src</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">external</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">enable_testing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">tests</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/CMakeLists.txt</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_library</span><span class="p">(</span><span class="n">automaton</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_library</span><span class="p">(</span><span class="n">evolution</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">evolution</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">initial</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">parser</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">automata</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">automata</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">automata</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="n">automaton</span>
</span></span><span class="line"><span class="cl">    <span class="n">conversion</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/evolution/CMakeLists.txt</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">automaton</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">evolution</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">evolution</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">automaton</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">evolution</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">evolution</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">evolution</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">evolution</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>其余<code>CMakeLists.txt</code>文件和<code>src/initial/CMakeLists.txt</code>相同。</p>
<p><strong>src/initial/CMakeLists.txt</strong></p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">automaton</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">initial</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">initial</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">automaton</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>定义了三个库:</p>
<ul>
<li><code>conversion</code>(在<code>external</code>定义)</li>
<li><code>automaton</code>(包含除转换之外的所有源)</li>
<li><code>evolution</code>(在<code>src/evolution</code>中定义，并通过<code>cpp_test</code>链接)</li>
</ul>
<p>我们通过使用<code>include()</code>引用<code>CMakeLists.txt</code>文件，在父范围内，仍然能保持所有目标可用。</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">src</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">external</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>构建一个包含树，记住当进入子目录(<code>src/CMakeLists.txt</code>)时，我们需要使用相对于父范围的路径:</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">evolution</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">initial</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">io</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">parser</span><span class="o">/</span><span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这样，我们就可以定义并链接到通过<code>include()</code>语句访问文件树中任何位置的目标。</p>
<h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">$ cmake ..
</span></span><span class="line"><span class="cl">$ cmake --build build
</span></span><span class="line"><span class="cl">$ ctest
</span></span><span class="line"><span class="cl">Running tests...
</span></span><span class="line"><span class="cl">Start 1: test_evolution
</span></span><span class="line"><span class="cl">1/1 Test <span class="c1">#1: test_evolution ................... Passed 0.00 sec</span>
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">1</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>补充内容</strong></p>
<p>我们可以再次使用<code>CMake</code>和<code>Graphviz</code>生成这个项目的依赖关系图:</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ cd build
</span></span><span class="line"><span class="cl">$ cmake --graphviz=example.dot ..
</span></span><span class="line"><span class="cl">$ dot -T png example.dot -o example.png</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">项目结构</div>
</center>
<br>
]]></description></item><item><title>CMake 笔记 | [38] 构建项目的策略及限制变量的范围和副作用</title><link>https://jianye0428.github.io/posts/cmake_note_38/</link><pubDate>Wed, 31 Jan 2024 13:51:42 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_38/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><strong>我们将讨论构建项目的策略，并限制变量的范围和副作用，目的是降低代码的复杂性和简化项目的维护。本篇，我们将把一个项目分割成几个范围有限的<code>CMakeLists.txt</code>文件，这些文件将使用<code>add_subdirectory</code>命令进行处理。</strong></p>
<p><strong>将源文件分割成更小、更易于管理的单元是有意义的。可以将所有源代码都编译成一个库或可执行文件。实际上，项目更喜欢将源代码编译分成更小的、定义良好的库。这样做既是为了本地化和简化依赖项，也是为了简化代码维护。这意味着如在这里所做的那样，由许多库构建一个项目是一种常见的情况。</strong></p>
</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── external
</span></span><span class="line"><span class="cl">│    ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│    ├── conversion.cpp
</span></span><span class="line"><span class="cl">│    └── conversion.hpp
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">│    ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│    ├── evolution
</span></span><span class="line"><span class="cl">│    │    ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│    │    ├── evolution.cpp
</span></span><span class="line"><span class="cl">│    │    └── evolution.hpp
</span></span><span class="line"><span class="cl">│    ├── initial
</span></span><span class="line"><span class="cl">│    │    ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│    │    ├── initial.cpp
</span></span><span class="line"><span class="cl">│    │    └── initial.hpp
</span></span><span class="line"><span class="cl">│    ├── io
</span></span><span class="line"><span class="cl">│    │    ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│    │    ├── io.cpp
</span></span><span class="line"><span class="cl">│    │    └── io.hpp
</span></span><span class="line"><span class="cl">│    ├── main.cpp
</span></span><span class="line"><span class="cl">│    └── parser
</span></span><span class="line"><span class="cl">│        ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">│        ├── parser.cpp
</span></span><span class="line"><span class="cl">│        └── parser.hpp
</span></span><span class="line"><span class="cl">└── tests
</span></span><span class="line"><span class="cl">    ├── catch.hpp
</span></span><span class="line"><span class="cl">    ├── CMakeLists.txt
</span></span><span class="line"><span class="cl">    └── test.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/07"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/07<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p>本篇的代码以及项目结构比较简单，并未涉及到新的内容，所以以下代码都没有具体讲解，相关代码的知识点都在前面笔记中。</p>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.5</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">recipe</span><span class="o">-</span><span class="mo">07</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">GNUInstallDirs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_LIBRARY_OUTPUT_DIRECTORY</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_LIBDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_RUNTIME_OUTPUT_DIRECTORY</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_INSTALL_BINDIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="cp"># defines targets and sources
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cp"># contains an &#34;external&#34; library we will link to
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">external</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cp"># enable testing and define tests
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">enable_testing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">tests</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>external/conversion.hpp</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">BinaryRepresentation</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">decimal</span><span class="p">);</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>external/conversion.cpp</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;conversion.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;bitset&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">BinaryRepresentation</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">decimal</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">bitset</span><span class="o">&lt;</span><span class="mi">8</span><span class="o">&gt;</span><span class="p">(</span><span class="n">decimal</span><span class="p">).</span><span class="n">to_string</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>external/CMakeLists.txt</strong></p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_library</span><span class="p">(</span><span class="n">conversion</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">conversion</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">conversion</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">conversion</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">conversion</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/CMakeLists.txt</strong></p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">automata</span> <span class="n">main</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">evolution</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">initial</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">io</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_subdirectory</span><span class="p">(</span><span class="n">parser</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">automata</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="n">conversion</span>
</span></span><span class="line"><span class="cl">    <span class="n">evolution</span>
</span></span><span class="line"><span class="cl">    <span class="n">initial</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/evolution/evolution.hpp</strong></p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">Evolve</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">row</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">rule_binary</span><span class="p">);</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/evolution/evolution.cpp</strong></p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;evolution.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">Evolve</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">row</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">rule_binary</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">row</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">left</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">row</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">:</span> <span class="n">i</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">center</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">right</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">row</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">ancestors</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">row</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">row</span><span class="p">[</span><span class="n">center</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">*</span> <span class="n">row</span><span class="p">[</span><span class="n">right</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">ancestors</span> <span class="o">=</span> <span class="mi">7</span> <span class="o">-</span> <span class="n">ancestors</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">new_state</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">stoi</span><span class="p">(</span><span class="n">rule_binary</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">ancestors</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">result</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">new_state</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/evolution/CMakeLists.txt</strong></p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_library</span><span class="p">(</span><span class="n">evolution</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">evolution</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="n">evolution</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">evolution</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">evolution</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/initial/initial.hpp</strong></p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">InitialDistribution</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">length</span><span class="p">);</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/initial/initial.cpp</strong></p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;initial.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">InitialDistribution</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// we start with a vector which is zeroed out
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">result</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// more or less in the middle we place a living cell
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">result</span><span class="p">[</span><span class="n">length</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/initial/CMakeLists.txt</strong></p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_library</span><span class="p">(</span><span class="n">initial</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">initial</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="n">initial</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">initial</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">initial</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/io/io.hpp</strong></p>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">PrintRow</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">row</span><span class="p">);</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/io/io.cpp</strong></p>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;io.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">PrintRow</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">row</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">row</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">row</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[](</span><span class="kt">int</span> <span class="k">const</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">value</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="sc">&#39;*&#39;</span> <span class="o">:</span> <span class="sc">&#39; &#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">});</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/io/CMakeLists.txt</strong></p>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_library</span><span class="p">(</span><span class="n">io</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">io</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="n">io</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">io</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">io</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/parser/parser.hpp</strong></p>
<div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;tuple&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">ParseArguments</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]);</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/parser/parser.cpp</strong></p>
<div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;parser.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cassert&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;tuple&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">ParseArguments</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="s">&#34;program called with wrong number of arguments&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">length</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">stoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">num_steps</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">stoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">rule_decimal</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">stoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">make_tuple</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="n">num_steps</span><span class="p">,</span> <span class="n">rule_decimal</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>src/parser/CMakeLists.txt</strong></p>
<div class="highlight" id="id-18"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_library</span><span class="p">(</span><span class="n">parser</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">parser</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="n">parser</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">parser</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">parser</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>main.cpp</strong></p>
<div class="highlight" id="id-19"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;conversion.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;evolution.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;initial.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;io.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;parser.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// parse arguments
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">length</span><span class="p">,</span> <span class="n">num_steps</span><span class="p">,</span> <span class="n">rule_decimal</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">tie</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="n">num_steps</span><span class="p">,</span> <span class="n">rule_decimal</span><span class="p">)</span> <span class="o">=</span> <span class="n">ParseArguments</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// print information about parameters
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;length: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">length</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;number of steps: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">num_steps</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;rule: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">rule_decimal</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// obtain binary representation for the rule
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">rule_binary</span> <span class="o">=</span> <span class="n">BinaryRepresentation</span><span class="p">(</span><span class="n">rule_decimal</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// create initial distribution
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">row</span> <span class="o">=</span> <span class="n">InitialDistribution</span><span class="p">(</span><span class="n">length</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// print initial configuration
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">PrintRow</span><span class="p">(</span><span class="n">row</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// the system evolves, print each step
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">step</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">step</span> <span class="o">&lt;</span> <span class="n">num_steps</span><span class="p">;</span> <span class="n">step</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">row</span> <span class="o">=</span> <span class="n">Evolve</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">rule_binary</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">PrintRow</span><span class="p">(</span><span class="n">row</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>tests/test.cpp</strong></p>
<div class="highlight" id="id-20"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;evolution.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// this tells catch to provide a main()
</span></span></span><span class="line"><span class="cl"><span class="c1">// only do this in one cpp file
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define CATCH_CONFIG_MAIN
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;catch.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">TEST_CASE</span><span class="p">(</span><span class="s">&#34;Apply rule 90&#34;</span><span class="p">,</span> <span class="s">&#34;[rule-90]&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">row</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">rule</span> <span class="o">=</span> <span class="s">&#34;01011010&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">expected_result</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">REQUIRE</span><span class="p">(</span><span class="n">Evolve</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">rule</span><span class="p">)</span> <span class="o">==</span> <span class="n">expected_result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">TEST_CASE</span><span class="p">(</span><span class="s">&#34;Apply rule 222&#34;</span><span class="p">,</span> <span class="s">&#34;[rule-222]&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">row</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">rule</span> <span class="o">=</span> <span class="s">&#34;11011110&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">expected_result</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">REQUIRE</span><span class="p">(</span><span class="n">Evolve</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">rule</span><span class="p">)</span> <span class="o">==</span> <span class="n">expected_result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>tests/CMakeLists.txt</strong></p>
<div class="highlight" id="id-21"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">cpp_test</span> <span class="n">test</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">cpp_test</span> <span class="n">evolution</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span>
</span></span><span class="line"><span class="cl">    <span class="n">test_evolution</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">cpp_test</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-22"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p build
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">$ cmake ..
</span></span><span class="line"><span class="cl">$ cmake --build .
</span></span><span class="line"><span class="cl">Scanning dependencies of target conversion
</span></span><span class="line"><span class="cl"><span class="o">[</span> 7%<span class="o">]</span> Building CXX object external/CMakeFiles/conversion.dir/conversion.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 14%<span class="o">]</span> Linking CXX static library ../lib64/libconversion.a
</span></span><span class="line"><span class="cl"><span class="o">[</span> 14%<span class="o">]</span> Built target conversion
</span></span><span class="line"><span class="cl">Scanning dependencies of target evolution
</span></span><span class="line"><span class="cl"><span class="o">[</span> 21%<span class="o">]</span> Building CXX object src/evolution/CMakeFiles/evolution.dir/evolution.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 28%<span class="o">]</span> Linking CXX static library ../../lib64/libevolution.a
</span></span><span class="line"><span class="cl"><span class="o">[</span> 28%<span class="o">]</span> Built target evolution
</span></span><span class="line"><span class="cl">Scanning dependencies of target initial
</span></span><span class="line"><span class="cl"><span class="o">[</span> 35%<span class="o">]</span> Building CXX object src/initial/CMakeFiles/initial.dir/initial.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 42%<span class="o">]</span> Linking CXX static library ../../lib64/libinitial.a
</span></span><span class="line"><span class="cl"><span class="o">[</span> 42%<span class="o">]</span> Built target initial
</span></span><span class="line"><span class="cl">Scanning dependencies of target io
</span></span><span class="line"><span class="cl"><span class="o">[</span> 50%<span class="o">]</span> Building CXX object src/io/CMakeFiles/io.dir/io.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 57%<span class="o">]</span> Linking CXX static library ../../lib64/libio.a
</span></span><span class="line"><span class="cl"><span class="o">[</span> 57%<span class="o">]</span> Built target io
</span></span><span class="line"><span class="cl">Scanning dependencies of target parser
</span></span><span class="line"><span class="cl"><span class="o">[</span> 64%<span class="o">]</span> Building CXX object src/parser/CMakeFiles/parser.dir/parser.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 71%<span class="o">]</span> Linking CXX static library ../../lib64/libparser.a
</span></span><span class="line"><span class="cl"><span class="o">[</span> 71%<span class="o">]</span> Built target parser
</span></span><span class="line"><span class="cl">Scanning dependencies of target automata
</span></span><span class="line"><span class="cl"><span class="o">[</span> 78%<span class="o">]</span> Building CXX object src/CMakeFiles/automata.dir/main.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span> 85%<span class="o">]</span> Linking CXX executable ../bin/automata
</span></span><span class="line"><span class="cl"><span class="o">[</span> 85%<span class="o">]</span> Built target automata
</span></span><span class="line"><span class="cl">Scanning dependencies of target cpp_test
</span></span><span class="line"><span class="cl"><span class="o">[</span> 92%<span class="o">]</span> Building CXX object tests/CMakeFiles/cpp_test.dir/test.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span>100%<span class="o">]</span> Linking CXX executable ../bin/cpp_test
</span></span><span class="line"><span class="cl"><span class="o">[</span>100%<span class="o">]</span> Built target cpp_test
</span></span><span class="line"><span class="cl">$ ctest
</span></span><span class="line"><span class="cl">Running tests...
</span></span><span class="line"><span class="cl">Start 1: test_evolution
</span></span><span class="line"><span class="cl">1/1 Test <span class="c1">#1: test_evolution ................... Passed 0.00 sec</span>
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">1</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>补充内容</strong></p>
<p><code>CMake</code>可以使用<code>Graphviz</code>图形可视化软件生成项目的依赖关系图:</p>
<div class="highlight" id="id-23"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ cd build
</span></span><span class="line"><span class="cl">$ cmake --graphviz=example.dot ..
</span></span><span class="line"><span class="cl">$ dot -T png example.dot -o example.png</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">cmake 项目关系依赖图</div>
</center>
<br>]]></description></item><item><title>CMake 笔记 | [37] 使用废弃函数、宏和变量</title><link>https://jianye0428.github.io/posts/cmake_note_37/</link><pubDate>Wed, 31 Jan 2024 13:51:39 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_37/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong><code>废弃</code>是在不断发展的项目开发过程中一种重要机制，它向开发人员发出信号，表明将来某个函数、宏或变量将被删除或替换。在一段时间内，函数、宏或变量将继续可访问，但会发出警告，最终可能会上升为错误。</strong></div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── cmake
</span></span><span class="line"><span class="cl">│   └── custom_guard.cmake
</span></span><span class="line"><span class="cl">└── CMakeLists.txt</span></span></code></pre></td></tr></table>
</div>
</div><p>项目结构：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/06"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter7/06<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example</span> <span class="n">LANGUAGES</span> <span class="n">NONE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">macro</span><span class="p">(</span><span class="n">custom_include_guard</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">DEFINED</span> <span class="n">included_modules</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">included_modules</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="s">&#34;${CMAKE_CURRENT_LIST_FILE}&#34;</span> <span class="n">IN_LIST</span> <span class="n">included_modules</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">WARNING</span> <span class="s">&#34;module ${CMAKE_CURRENT_LIST_FILE} processed more than once&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">list</span><span class="p">(</span><span class="n">APPEND</span> <span class="n">included_modules</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_FILE</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">endmacro</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">function</span><span class="p">(</span><span class="n">deprecate_variable</span> <span class="n">_variable</span> <span class="n">_access</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">_access</span> <span class="n">STREQUAL</span> <span class="s">&#34;READ_ACCESS&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">DEPRECATION</span> <span class="s">&#34;variable ${_variable} is deprecated&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endfunction</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">CMAKE_VERSION</span> <span class="n">VERSION_GREATER</span> <span class="s">&#34;3.9&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="cp"># deprecate custom_include_guard
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="n">macro</span><span class="p">(</span><span class="n">custom_include_guard</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">DEPRECATION</span> <span class="s">&#34;custom_include_guard is deprecated - use built-in include_guard instead&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">_custom_include_guard</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">ARGV</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="n">endmacro</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="cp"># deprecate variable included_modules
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="n">variable_watch</span><span class="p">(</span><span class="n">included_modules</span> <span class="n">deprecate_variable</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">cmake</span><span class="o">/</span><span class="n">custom_guard</span><span class="p">.</span><span class="n">cmake</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;list of all included modules: ${included_modules}&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">macro</span><span class="p">(</span><span class="n">custom_include_guard</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">DEFINED</span> <span class="n">included_modules</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">included_modules</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="s">&#34;${CMAKE_CURRENT_LIST_FILE}&#34;</span> <span class="n">IN_LIST</span> <span class="n">included_modules</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">WARNING</span> <span class="s">&#34;module ${CMAKE_CURRENT_LIST_FILE} processed more than once&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">list</span><span class="p">(</span><span class="n">APPEND</span> <span class="n">included_modules</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_LIST_FILE</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">endmacro</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>定义了一个自定义的<code>包含保护</code>机制，包括一个自定义模块(与上一篇内容相同)，并打印所有包含模块的列表。对于<code>CMake 3.10</code>或更高版本有内置的<code>include_guard</code>。但是，不能简单地删除<code>custom_include_guard</code>和<code>${included_modules}</code>，而是使用一个<code>废弃</code>警告来弃用宏和变量。某个时候，可以将该警告转换为<code>FATAL_ERROR</code>，使代码停止配置，并迫使开发人员对代码进行修改，切换到内置命令。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><code>废弃</code>函数、宏和变量的方法如下:</p>
<p>1.定义一个函数，使用它来弃用一个变量</p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">function</span><span class="p">(</span><span class="n">deprecate_variable</span> <span class="n">_variable</span> <span class="n">_access</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">_access</span> <span class="n">STREQUAL</span> <span class="s">&#34;READ_ACCESS&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">message</span><span class="p">(</span><span class="n">DEPRECATION</span> <span class="s">&#34;variable ${_variable} is deprecated&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endfunction</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>2.如果<code>CMake</code>的版本大于<code>3.9</code>，我们重新定义<code>custom_include_guard</code>并将<code>variable_watch</code>附加到<code>included_modules</code>中:</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">CMAKE_VERSION</span> <span class="n">VERSION_GREATER</span> <span class="s">&#34;3.9&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="cp"># deprecate custom_include_guard
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="n">macro</span><span class="p">(</span><span class="n">custom_include_guard</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">DEPRECATION</span> <span class="s">&#34;custom_include_guard is deprecated - use built-in include_guard instead&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">_custom_include_guard</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">ARGV</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="n">endmacro</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="cp"># deprecate variable included_modules
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="n">variable_watch</span><span class="p">(</span><span class="n">included_modules</span> <span class="n">deprecate_variable</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div></div>
    </div>
  </div>
<p><strong>cmake/custom_guard.cmake</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">custom_include_guard</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;custom.cmake is included and processed&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p build
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">$ cmake ..</span></span></code></pre></td></tr></table>
</div>
</div><p><code>CMake3.10</code>以下版本的项目会产生以下结果:</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">-- custom_custom.cmake is included and processed
</span></span><span class="line"><span class="cl">-- list of all included modules: /home/jiangli/repo/tutorials/cmake-tutorial/chapter7/06/cmake/custom.cmake</span></span></code></pre></td></tr></table>
</div>
</div><p><code>CMake3.10</code>以下版本的项目会产生以下结果:</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">CMake Deprecation Warning at CMakeLists.txt:26 <span class="o">(</span>message<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  custom_include_guard is deprecated - use built-in include_guard instead
</span></span><span class="line"><span class="cl">Call Stack <span class="o">(</span>most recent call first<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  cmake/custom_guard.cmake:1 <span class="o">(</span>custom_include_guard<span class="o">)</span>
</span></span><span class="line"><span class="cl">  CMakeLists.txt:34 <span class="o">(</span>include<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-- custom_custom.cmake is included and processed
</span></span><span class="line"><span class="cl">CMake Deprecation Warning at CMakeLists.txt:19 <span class="o">(</span>message<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  variable included_modules is deprecated
</span></span><span class="line"><span class="cl">Call Stack <span class="o">(</span>most recent call first<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  CMakeLists.txt:9999 <span class="o">(</span>deprecate_variable<span class="o">)</span>
</span></span><span class="line"><span class="cl">  CMakeLists.txt:36 <span class="o">(</span>message<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-- list of all included modules: /home/jiangli/repo/tutorials/cmake-tutorial/chapter7/06/cmake/custom_guard.cmake
</span></span><span class="line"><span class="cl">-- Configuring <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Generating <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Build files have been written to: /home/jiangli/repo/tutorials/cmake-tutorial/chapter7/06/build</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item></channel></rss>