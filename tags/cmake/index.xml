<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>CMake - 标签 - yejian's blog</title><link>https://jianye0428.github.io/tags/cmake/</link><description>CMake - 标签 - yejian's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>18817571704@163.com (Jian YE)</managingEditor><webMaster>18817571704@163.com (Jian YE)</webMaster><lastBuildDate>Wed, 31 Jan 2024 07:30:45 +0800</lastBuildDate><atom:link href="https://jianye0428.github.io/tags/cmake/" rel="self" type="application/rss+xml"/><item><title>CMake 笔记 | [30] 配置时记录Git Hash值</title><link>https://jianye0428.github.io/posts/cmake_note_30/</link><pubDate>Wed, 31 Jan 2024 07:30:45 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_30/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>大多数现代源代码存储库都使用</strong>**<code>Git</code>作为版本控制系统进行跟踪，提交的<code>Git Hash</code>决定了源代码的状态。因此，为了标记可执行文件，尝试将<code>Git Hash</code>记录到可执行文件中，方法是将哈希字符串记录在一个头文件中，该头文件可以包含在代码中。**</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── example.cpp
</span></span><span class="line"><span class="cl">└── version.hpp.in</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter6/04"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter6/04<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p><strong>version.hpp.in</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GIT_HASH</span> <span class="o">=</span> <span class="s">&#34;@GIT_HASH@&#34;</span><span class="p">;</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>example.cpp</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;version.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;This code has been configured from version &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">GIT_HASH</span>
</span></span><span class="line"><span class="cl">            <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">GIT_HASH</span> <span class="s">&#34;unknown&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">Git</span> <span class="n">QUIET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">GIT_FOUND</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">execute_process</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">GIT_EXECUTABLE</span><span class="p">}</span> <span class="n">log</span> <span class="o">-</span><span class="mi">1</span> <span class="o">--</span><span class="n">pretty</span><span class="o">=</span><span class="nl">format</span><span class="p">:</span><span class="o">%</span><span class="n">h</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_VARIABLE</span> <span class="n">GIT_HASH</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_STRIP_TRAILING_WHITESPACE</span>
</span></span><span class="line"><span class="cl">    <span class="n">ERROR_QUIET</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORKING_DIRECTORY</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Git hash is ${GIT_HASH}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">configure_file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">version</span><span class="p">.</span><span class="n">hpp</span><span class="p">.</span><span class="n">in</span>
</span></span><span class="line"><span class="cl">  <span class="n">generated</span><span class="o">/</span><span class="n">version</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="err">@</span><span class="n">ONLY</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">example</span> <span class="n">example</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">example</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">generated</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">GIT_HASH</span> <span class="s">&#34;unknown&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>由于<code>Git</code>命令可能会失败(源代码已经分发到<code>Git</code>存储库之外)，或者<code>Git</code>在系统上不可用，我们希望为这个变量设置一个默认值。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">Git</span> <span class="n">QUIET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">GIT_FOUND</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">execute_process</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">GIT_EXECUTABLE</span><span class="p">}</span> <span class="n">log</span> <span class="o">-</span><span class="mi">1</span> <span class="o">--</span><span class="n">pretty</span><span class="o">=</span><span class="nl">format</span><span class="p">:</span><span class="o">%</span><span class="n">h</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_VARIABLE</span> <span class="n">GIT_HASH</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_STRIP_TRAILING_WHITESPACE</span>
</span></span><span class="line"><span class="cl">    <span class="n">ERROR_QUIET</span>
</span></span><span class="line"><span class="cl">    <span class="n">WORKING_DIRECTORY</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用<code>find_package(Git QUIET)</code>来检测系统上是否有可用的<code>Git</code>。如果有(<code>GIT_FOUND</code>为<code>True</code>)，运行一个<code>Git</code>命令:<code>${GIT_EXECUTABLE} log -1 --pretty=format:%h</code>。这个命令给出了当前提交<code>Hash</code>的简短版本。</p>
<p>当然，这里我们可以灵活地运行<code>Git</code>命令。</p>
<p>要求<code>execute_process</code>命令将结果放入名为<code>GIT_HASH</code>的变量中，然后删除任何尾随的空格。使用<code>ERROR_QUIET</code>，如果<code>Git</code>命令由于某种原因失败，不会停止配置。</p>
</div>
    </div>
  </div>
<h2 id="三结果展示">三、结果展示</h2>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p build
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">$ cmake ..
</span></span><span class="line"><span class="cl">$ cmake --build .
</span></span><span class="line"><span class="cl">$ ./example
</span></span><span class="line"><span class="cl">This code has been configured from version 74e4aa9</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">生成保存git hash的文件</div>
</center>
<br>
<p><strong>version.hpp</strong></p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GIT_HASH</span> <span class="o">=</span> <span class="s">&#34;74e4aa9&#34;</span><span class="p">;</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>CMake 笔记 | [29] 从文件中记录项目版本</title><link>https://jianye0428.github.io/posts/cmake_note_29/</link><pubDate>Wed, 31 Jan 2024 07:30:41 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_29/</guid><description><![CDATA[<h2 id="一-导言">一、 导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>本篇内容目的和上一篇相似，但是出发点不同。我们计划是从文件中读取版本信息，而不是将其设置在CMakeLists.txt中。将版本保存在单独文件中的目的，是允许其他构建框架或开发工具使用独立于</strong>**<code>CMake</code>的信息，而不需要将信息复制到多个文件中。**</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── example.cpp
</span></span><span class="line"><span class="cl">├── version.hpp.in
</span></span><span class="line"><span class="cl">└── VERSION.txt</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter6/03"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter6/03<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p><strong>VERSION.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">2.0.1-rc-2</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>version.hpp.in</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">PROGRAM_VERSION</span> <span class="o">=</span> <span class="s">&#34;@PROGRAM_VERSION@&#34;</span><span class="p">;</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>example.cpp</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;version.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;This is output from code v&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">PROGRAM_VERSION</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Hello CMake world!&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">EXISTS</span> <span class="s">&#34;${CMAKE_CURRENT_SOURCE_DIR}/VERSION.txt&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">file</span><span class="p">(</span><span class="n">READ</span> <span class="s">&#34;${CMAKE_CURRENT_SOURCE_DIR}/VERSION.txt&#34;</span> <span class="n">PROGRAM_VERSION</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">string</span><span class="p">(</span><span class="n">STRIP</span> <span class="s">&#34;${PROGRAM_VERSION}&#34;</span> <span class="n">PROGRAM_VERSION</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">FATAL_ERROR</span> <span class="s">&#34;File ${CMAKE_CURRENT_SOURCE_DIR}/VERSION.txt not found&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">configure_file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">version</span><span class="p">.</span><span class="n">hpp</span><span class="p">.</span><span class="n">in</span>
</span></span><span class="line"><span class="cl">  <span class="n">generated</span><span class="o">/</span><span class="n">version</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="err">@</span><span class="n">ONLY</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">example</span> <span class="n">example</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">example</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">generated</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">EXISTS</span> <span class="s">&#34;${CMAKE_CURRENT_SOURCE_DIR}/VERSION.txt&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">file</span><span class="p">(</span><span class="n">READ</span> <span class="s">&#34;${CMAKE_CURRENT_SOURCE_DIR}/VERSION.txt&#34;</span> <span class="n">PROGRAM_VERSION</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">string</span><span class="p">(</span><span class="n">STRIP</span> <span class="s">&#34;${PROGRAM_VERSION}&#34;</span> <span class="n">PROGRAM_VERSION</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">FATAL_ERROR</span> <span class="s">&#34;File ${CMAKE_CURRENT_SOURCE_DIR}/VERSION.txt not found&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>首先，检查文件<code>VERSION.txt</code>文件是否存在，如果不存在，则发出错误消息。如果存在，将内容读入<code>PROGRAM_VERSION</code>变量中，该变量会去掉尾部的空格。</p>
<p>当设置了变量<code>PROGRAM_VERSION</code>，就可以使用它来配置<code>version.hpp.in</code>，生成generated/version.hpp：</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">configure_file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">version</span><span class="p">.</span><span class="n">hpp</span><span class="p">.</span><span class="n">in</span>
</span></span><span class="line"><span class="cl">  <span class="n">generated</span><span class="o">/</span><span class="n">version</span><span class="p">.</span><span class="n">hpp</span>
</span></span><span class="line"><span class="cl">  <span class="err">@</span><span class="n">ONLY</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div></div>
    </div>
  </div>
<h2 id="四结果展示">四、结果展示</h2>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p build
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">$ cmake ..
</span></span><span class="line"><span class="cl">$ cmake --build .
</span></span><span class="line"><span class="cl">$ ./example
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">This is output from code v2.0.1-rc-2
</span></span><span class="line"><span class="cl">Hello CMake world!</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">生成版本文件</div>
</center>
<br>
<p><strong>version.hpp</strong></p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">PROGRAM_VERSION</span> <span class="o">=</span> <span class="s">&#34;2.0.1-rc-2&#34;</span><span class="p">;</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>CMake 笔记 | [28] 记录项目版本信息以便报告</title><link>https://jianye0428.github.io/posts/cmake_note_28/</link><pubDate>Wed, 31 Jan 2024 07:30:38 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_28/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><strong>代码版本很重要，不仅是为了可重复性，还为了记录API功能或简化支持请求和bug报告。源代码通常处于某种版本控制之下，例如可以使用Git标记附加额外版本号。然而，不仅需要对源代码进行版本控制，而且可执行文件还需要记录项目版本，以便将其打印到代码输出或用户界面上。</strong></p>
<p><strong>本篇，将在CMake源文件中定义版本号。我们的目标是在配置项目时将程序版本记录到头文件中。然后，生成的头文件可以包含在代码的正确位置和时间，以便将代码版本打印到输出文件或屏幕上。</strong></p>
</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── version.h.in
</span></span><span class="line"><span class="cl">└── example.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter6/02"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter6/02<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三相关源码">三、相关源码</h2>
<p><strong>example.cpp</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;version.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;This is output from code &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">PROJECT_VERSION</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Major version number: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">PROJECT_VERSION_MAJOR</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Minor version number: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">PROJECT_VERSION_MINOR</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Hello CMake world!&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这里，假设<code>PROJECT_VERSION_MAJOR</code>、<code>PROJECT_VERSION_MINOR</code>和<code>PROJECT_VERSION</code>是在<code>version.h</code>中定义的。
目标是从以下模板中生成<code>version.h.in</code>:</p>
<p><strong>version.h.in</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define PROJECT_VERSION_MAJOR @PROJECT_VERSION_MAJOR@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define PROJECT_VERSION_MINOR @PROJECT_VERSION_MINOR@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define PROJECT_VERSION_PATCH @PROJECT_VERSION_PATCH@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define PROJECT_VERSION &#34;v@PROJECT_VERSION@&#34;</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这里使用预处理器定义，也可以使用字符串或整数常量来提高类型安全性。</p>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">example</span> <span class="n">VERSION</span> <span class="mf">2.0.1</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">configure_file</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">version</span><span class="p">.</span><span class="n">h</span><span class="p">.</span><span class="n">in</span>
</span></span><span class="line"><span class="cl">  <span class="n">generated</span><span class="o">/</span><span class="n">version</span><span class="p">.</span><span class="n">h</span>
</span></span><span class="line"><span class="cl">  <span class="err">@</span><span class="n">ONLY</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span> <span class="n">example</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">generated</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>当使用版本参数调用<code>CMake</code>的<code>project</code>时，<code>CMake</code>将为项目设置<code>PROJECT_VERSION_MAJOR</code>、<code>PROJECT_VERSION_MINOR</code>和<code>PROJECT_VERSION_PATCH</code>。</p>
<p><code>configure_file</code>接受一个输入文件(本例中是<code>version.h.in</code>)，通过将<code>@</code>之间的占位符替换成对应的<code>CMake</code>变量，生成一个输出文件(本例中是<code>generate/version.h</code>)。它将<code>@PROJECT_VERSION_MAJOR@</code>替换为<code>2</code>，以此类推。使用关键字<code>@ONLY</code>，我们将<code>configure_file</code>限制为只替换<code>@variables@</code>，而不修改<code>${variables}</code>。</p>
<h2 id="四结果">四、结果</h2>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir build <span class="p">&amp;</span> <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake ..
</span></span><span class="line"><span class="cl">cmake --build .
</span></span><span class="line"><span class="cl">./example
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">This is output from code v2.0.1
</span></span><span class="line"><span class="cl">Major version number: <span class="m">2</span>
</span></span><span class="line"><span class="cl">Minor version number: <span class="m">0</span>
</span></span><span class="line"><span class="cl">Hello CMake world!</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">生成版本信息</div>
</center>
<br>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define PROJECT_VERSION_MAJOR 2
</span></span></span><span class="line"><span class="cl"><span class="cp">#define PROJECT_VERSION_MINOR 0
</span></span></span><span class="line"><span class="cl"><span class="cp">#define PROJECT_VERSION_PATCH 1
</span></span></span><span class="line"><span class="cl"><span class="cp">#define PROJECT_VERSION &#34;v2.0.1&#34;</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="五补充内容">五、补充内容</h2>
<p><code>CMake</code>以<code>x.y.z</code>格式给出的版本号，并将变量<code>PROJECT_VERSION</code>和<code>&lt;project-name&gt;_VERSION</code>设置为给定的值。此外,<code>PROJECT_VERSION_MAJOR</code>(<code>&lt;project-name&gt;_VERSION_MAJOR</code>),<code>PROJECT_VERSION_MINOR</code>(<code>&lt;project-name&gt;_VERSION_MINOR</code>) <code>PROJECT_VERSION_PATCH</code>(<code>&lt;project-name&gt;_VERSION_PATCH</code>)和<code>PROJECT_VERSION_TWEAK</code>(<code>&lt;project-name&gt;_VERSION_TWEAK</code>),将分别设置为<code>X</code>, <code>Y</code>, <code>Z</code>和<code>t</code>。</p>
<p>为了确保只有当<code>CMake</code>变量被认为是一个真正的常量时，才定义预处理器变量，可以使用<code>configure_file</code>，在配置的头文件中使用<code>#cmakedefin</code>而不是<code>#define</code>。</p>
<p>根据是否定义了<code>CMake</code>变量并将其计算为一个真正的常量，<code>#cmakedefine YOUR_VARIABLE</code>将被替换为<code>#define YOUR_VARIABLE …</code>或者<code>/* #undef YOUR_VARIABLE */</code>。还有<code>#cmakedefine01</code>，将根据变量是否定义，将变量设置为<code>0</code>或<code>1</code>。</p>
]]></description></item><item><title>CMake 笔记 | [27] 配置时生成源码</title><link>https://jianye0428.github.io/posts/cmake_note_27/</link><pubDate>Wed, 31 Jan 2024 07:30:34 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_27/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>代码生成在配置时发生，如 CMake可以检测操作系统和可用库；基于这些信息，可以定制构建的源代码。本篇我们将探索如何生成一个简单源文件，该文件定义了一个函数，用于报告构建系统配置。</strong></div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">└── print_info.c.in</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter6/01"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter6/01<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">config_generator</span> <span class="n">LANGUAGES</span> <span class="n">C</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">execute_process</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span>
</span></span><span class="line"><span class="cl">      <span class="n">whoami</span>
</span></span><span class="line"><span class="cl">  <span class="n">TIMEOUT</span>
</span></span><span class="line"><span class="cl">      <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="n">OUTPUT_VARIABLE</span>
</span></span><span class="line"><span class="cl">      <span class="n">_user_name</span>
</span></span><span class="line"><span class="cl">  <span class="n">OUTPUT_STRIP_TRAILING_WHITESPACE</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># host name information
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">cmake_host_system_information</span><span class="p">(</span><span class="n">RESULT</span> <span class="n">_host_name</span> <span class="n">QUERY</span> <span class="n">HOSTNAME</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cmake_host_system_information</span><span class="p">(</span><span class="n">RESULT</span> <span class="n">_fqdn</span> <span class="n">QUERY</span> <span class="n">FQDN</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cp"># processor information
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">cmake_host_system_information</span><span class="p">(</span><span class="n">RESULT</span> <span class="n">_processor_name</span> <span class="n">QUERY</span> <span class="n">PROCESSOR_NAME</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cmake_host_system_information</span><span class="p">(</span><span class="n">RESULT</span> <span class="n">_processor_description</span> <span class="n">QUERY</span> <span class="n">PROCESSOR_DESCRIPTION</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cp"># os information
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">cmake_host_system_information</span><span class="p">(</span><span class="n">RESULT</span> <span class="n">_os_name</span> <span class="n">QUERY</span> <span class="n">OS_NAME</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cmake_host_system_information</span><span class="p">(</span><span class="n">RESULT</span> <span class="n">_os_release</span> <span class="n">QUERY</span> <span class="n">OS_RELEASE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cmake_host_system_information</span><span class="p">(</span><span class="n">RESULT</span> <span class="n">_os_version</span> <span class="n">QUERY</span> <span class="n">OS_VERSION</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cmake_host_system_information</span><span class="p">(</span><span class="n">RESULT</span> <span class="n">_os_platform</span> <span class="n">QUERY</span> <span class="n">OS_PLATFORM</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">string</span><span class="p">(</span><span class="n">TIMESTAMP</span> <span class="n">_configuration_time</span> <span class="s">&#34;%Y-%m-%d %H:%M:%S [UTC]&#34;</span> <span class="n">UTC</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">configure_file</span><span class="p">(</span><span class="n">print_info</span><span class="p">.</span><span class="n">c</span><span class="p">.</span><span class="n">in</span> <span class="n">print_info</span><span class="p">.</span><span class="n">c</span> <span class="err">@</span><span class="n">ONLY</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">execute_process</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span>
</span></span><span class="line"><span class="cl">      <span class="n">whoami</span>
</span></span><span class="line"><span class="cl">  <span class="n">TIMEOUT</span>
</span></span><span class="line"><span class="cl">      <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="n">OUTPUT_VARIABLE</span>
</span></span><span class="line"><span class="cl">      <span class="n">_user_name</span>
</span></span><span class="line"><span class="cl">  <span class="n">OUTPUT_STRIP_TRAILING_WHITESPACE</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用 <code>execute_process</code>为项目获取当前使用者的信息。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp"># host name information
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">cmake_host_system_information</span><span class="p">(</span><span class="n">RESULT</span> <span class="n">_host_name</span> <span class="n">QUERY</span> <span class="n">HOSTNAME</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cmake_host_system_information</span><span class="p">(</span><span class="n">RESULT</span> <span class="n">_fqdn</span> <span class="n">QUERY</span> <span class="n">FQDN</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cp"># processor information
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">cmake_host_system_information</span><span class="p">(</span><span class="n">RESULT</span> <span class="n">_processor_name</span> <span class="n">QUERY</span> <span class="n">PROCESSOR_NAME</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cmake_host_system_information</span><span class="p">(</span><span class="n">RESULT</span> <span class="n">_processor_description</span> <span class="n">QUERY</span> <span class="n">PROCESSOR_DESCRIPTION</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cp"># os information
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">cmake_host_system_information</span><span class="p">(</span><span class="n">RESULT</span> <span class="n">_os_name</span> <span class="n">QUERY</span> <span class="n">OS_NAME</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cmake_host_system_information</span><span class="p">(</span><span class="n">RESULT</span> <span class="n">_os_release</span> <span class="n">QUERY</span> <span class="n">OS_RELEASE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cmake_host_system_information</span><span class="p">(</span><span class="n">RESULT</span> <span class="n">_os_version</span> <span class="n">QUERY</span> <span class="n">OS_VERSION</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cmake_host_system_information</span><span class="p">(</span><span class="n">RESULT</span> <span class="n">_os_platform</span> <span class="n">QUERY</span> <span class="n">OS_PLATFORM</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用<code>cmake_host_system_information()</code>函数查询系统信息。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">string(TIMESTAMP _configuration_time &#34;%Y-%m-%d %H:%M:%S [UTC]&#34; UTC)</span></span></code></pre></td></tr></table>
</div>
</div><p>捕获配置时的时间戳，并通过使用字符串操作函数。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">configure_file(print_info.c.in print_info.c @ONLY)</span></span></code></pre></td></tr></table>
</div>
</div><p>通过<code>configure_file</code>函数生成代码。注意，这里只要求以<code>@</code>开头和结尾的字符串被替换。</p></div>
    </div>
  </div>
<p><strong>print_info.c.in</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">print_info</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Configuration and build information</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;-----------------------------------</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Who compiled | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;@_user_name@&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Compilation hostname | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;@_host_name@&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Fully qualified domain name | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;@_fqdn@&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Operating system | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">         <span class="s">&#34;@_os_name@, @_os_release@, @_os_version@&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Platform | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;@_os_platform@&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Processor info | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">         <span class="s">&#34;@_processor_name@, @_processor_description@&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;CMake version | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;@CMAKE_VERSION@&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;CMake generator | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;@CMAKE_GENERATOR@&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Configuration time | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;@_configuration_time@&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Fortran compiler | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;@CMAKE_Fortran_COMPILER@&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;C compiler | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;@CMAKE_C_COMPILER@&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">结果展示:</font></td></tr></body></table>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">生成print_info.c</div>
</center>
<br>
<p><strong>print_info.c</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">print_info</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Configuration and build information</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;-----------------------------------</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Who compiled | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;jiangli&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Compilation hostname | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;jiangli-virtual-machine&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Fully qualified domain name | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;jiangli-virtual-machine.lan&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Operating system | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">         <span class="s">&#34;Linux, 5.15.0-89-generic, #99~20.04.1-Ubuntu SMP Thu Nov 2 15:16:47 UTC 2023&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Platform | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;x86_64&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Processor info | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">         <span class="s">&#34;Unknown AMD family, 16 core AMD Ryzen 7 4800H with Radeon Graphics&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;CMake version | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;3.16.3&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;CMake generator | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;Unix Makefiles&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Configuration time | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;2023-11-24 01:01:31 [UTC]&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Fortran compiler | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;C compiler | %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;/usr/bin/gcc&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>补充</strong></p>
<p>用值替换占位符时，<code>CMake</code>中的变量名应该与将要配置的文件中使用的变量名完全相同，并放在<code>@</code>之间。可以在调用<code>configure_file</code>时定义的任何<code>CMake</code>变量。</p>
]]></description></item><item><title>CMake 笔记 | [26] 探究编译和编译命令</title><link>https://jianye0428.github.io/posts/cmake_note_26/</link><pubDate>Wed, 31 Jan 2024 07:30:30 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_26/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><strong>本篇通过展示如何使用来自对应的CheckSourceCompiles.cmake标准模块的check_<LANG>_source_compiles函数，以评估给定编译器是否可以将预定义的代码编译成可执行文件。该命令可帮助确定:</strong></p>
<ul>
<li><strong>编译器支持所需的特性。</strong></li>
<li><strong>链接器工作正常，并理解特定的标志。</strong></li>
<li><strong>可以使用find_package找到的包含目录和库。</strong></li>
</ul>
<p><strong>我们将展示如何检测OpenMP 4.5标准的循环特性，以便在C++可执行文件中使用。使用一个C++源文件，来探测编译器是否支持这样的特性。CMake提供了一个附加命令try_compile来探究编译。</strong></p>
</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">└── task_loop.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter5/04"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter5/04<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">test</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">OpenMP</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">OpenMP_FOUND</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="cp"># this will get wiped unless you run cmake with --debug-trycompile
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="n">set</span><span class="p">(</span><span class="n">scratch_dir</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">omp_try_compile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">try_compile</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">omp_task_loop_test_1</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">scratch_dir</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">SOURCES</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">task_loop</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">    <span class="n">LINK_LIBRARIES</span>
</span></span><span class="line"><span class="cl">      <span class="n">OpenMP</span><span class="o">::</span><span class="n">OpenMP_CXX</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Result of try_compile: ${omp_task_loop_test_1}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">include</span><span class="p">(</span><span class="n">CheckCXXSourceCompiles</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">file</span><span class="p">(</span><span class="n">READ</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">task_loop</span><span class="p">.</span><span class="n">cpp</span> <span class="n">snippet</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">CMAKE_REQUIRED_LIBRARIES</span> <span class="n">OpenMP</span><span class="o">::</span><span class="n">OpenMP_CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">check_cxx_source_compiles</span><span class="p">(</span><span class="s">&#34;${snippet}&#34;</span> <span class="n">omp_task_loop_test_2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">unset</span><span class="p">(</span><span class="n">CMAKE_REQUIRED_LIBRARIES</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Result of check_cxx_source_compiles: ${omp_task_loop_test_2}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;OpenMP not found: no test for taskloop is run&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>方式一</strong>：</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">scratch_dir</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">omp_try_compile</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如果找到<code>OpenMP</code>，再检查所需的特性是否可用。为此，设置了一个临时目录，<code>try_compile</code>将在这个目录下来生成中间文件。我们把它放在前面步骤中引入的<code>if</code>语句中。如果我们构建时使用如下命令，则会在<code>omp_try_compile</code>文件夹中产生中间文件。</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cmake .. --debug-trycompile</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">生成可执行文件cmTC_e8239</div>
</center>
<br>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">try_compile</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">omp_task_loop_test_1</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">scratch_dir</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">SOURCES</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">task_loop</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">    <span class="n">LINK_LIBRARIES</span>
</span></span><span class="line"><span class="cl">      <span class="n">OpenMP</span><span class="o">::</span><span class="n">OpenMP_CXX</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Result of try_compile: ${omp_task_loop_test_1}&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>调用<code>try_compile</code>生成一个小项目，以尝试编译源文件<code>task_loop.cpp</code>。编译成功或失败的状态，将保存到<code>omp_task_loop_test_1</code>变量中。需要为这个示例编译设置适当的编译器标志、包括目录和链接库。因为使用导入的目标<code>OpenMP::OpenMP_CXX</code>，所以只需将<code>LINK_LIBRARIES</code>选项设置为<code>OpenMP::OpenMP_CXX</code>即可。如果编译成功，则任务循环特性可用，我们打印一条消息。</p>
<p><strong>方式二</strong>：</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">CheckCXXSourceCompiles</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>要使用<code>check_cxx_source_compiles</code>函数，需要包含<code>CheckCXXSourceCompiles.cmake</code>模块文件。其他语言也有类似的模块文件，<code>C</code>(<code>CheckCSourceCompiles.cmake</code>)和<code>Fortran</code>(<code>CheckFortranSourceCompiles.cmake</code>)。</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">file</span><span class="p">(</span><span class="n">READ</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">task_loop</span><span class="p">.</span><span class="n">cpp</span> <span class="n">snippet</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>复制源文件的内容，通过<code>file(READ ...)</code>命令读取内容到一个变量中，试图编译和连接这个变量。</p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_REQUIRED_LIBRARIES</span> <span class="n">OpenMP</span><span class="o">::</span><span class="n">OpenMP_CXX</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>设置了<code>CMAKE_REQUIRED_LIBRARIES</code>。对于下一步正确调用编译器是必需的。注意使用导入的<code>OpenMP::OpenMP_CXX</code>目标，它还将设置正确的编译器标志和包含目录。</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">check_cxx_source_compiles</span><span class="p">(</span><span class="s">&#34;${snippet}&#34;</span> <span class="n">omp_task_loop_test_2</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用代码片段作为参数，调用<code>check_cxx_source_compiles</code>函数。检查结果将保存到<code>omp_task_loop_test_2</code>变量中。</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">unset</span><span class="p">(</span><span class="n">CMAKE_REQUIRED_LIBRARIES</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Result of check_cxx_source_compiles: ${omp_task_loop_test_2}&#34;</span></span></span></code></pre></td></tr></table>
</div>
</div><p>调用<code>check_cxx_source_compiles</code>并向用户打印消息之前，取消变量的设置。</p>
<p><strong>task_loop.cpp</strong></p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cmath&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">LongRunningTask</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">number</span> <span class="o">=</span> <span class="mf">5.0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">result</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">pow</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;长时间运行的任务结果：&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">LoopBody</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">calculation_result</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">sin</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="n">std</span><span class="o">::</span><span class="n">cos</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;在循环体中计算结果：&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">calculation_result</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">ParallelWork</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="cp">#pragma omp taskgroup
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="cp">#pragma omp task
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="n">LongRunningTask</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#pragma omp taskloop private(j) grainsize(500) nogroup
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">LoopBody</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">ParallelWork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>结果</strong></p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="err">$</span> <span class="n">mkdir</span> <span class="o">-</span><span class="n">p</span> <span class="n">build</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span> <span class="n">cd</span> <span class="n">build</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span> <span class="n">cmake</span> <span class="p">..</span>
</span></span><span class="line"><span class="cl"><span class="o">--</span> <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="o">--</span> <span class="n">Found</span> <span class="nl">OpenMP_CXX</span><span class="p">:</span> <span class="o">-</span><span class="n">fopenmp</span> <span class="p">(</span><span class="n">found</span> <span class="n">version</span> <span class="s">&#34;4.5&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">--</span> <span class="n">Found</span> <span class="nl">OpenMP</span><span class="p">:</span> <span class="n">TRUE</span> <span class="p">(</span><span class="n">found</span> <span class="n">version</span> <span class="s">&#34;4.5&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">--</span> <span class="n">Result</span> <span class="n">of</span> <span class="nl">try_compile</span><span class="p">:</span> <span class="n">TRUE</span>
</span></span><span class="line"><span class="cl"><span class="o">--</span> <span class="n">Performing</span> <span class="n">Test</span> <span class="n">omp_taskloop_test_2</span>
</span></span><span class="line"><span class="cl"><span class="o">--</span> <span class="n">Performing</span> <span class="n">Test</span> <span class="n">omp_taskloop_test_2</span> <span class="o">-</span> <span class="n">Success</span>
</span></span><span class="line"><span class="cl"><span class="o">--</span> <span class="n">Result</span> <span class="n">of</span> <span class="nl">check_cxx_source_compiles</span><span class="p">:</span> <span class="mi">1</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>CMake 笔记 | [25] 构建时为特定目标运行自定义命令</title><link>https://jianye0428.github.io/posts/cmake_note_25/</link><pubDate>Tue, 30 Jan 2024 21:00:46 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_25/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>add_custom_command 是 CMake 中用于添加自定义构建规则的命令，通常用于在编译项目时执行一些自定义操作，例如生成文件、运行脚本等。</strong></div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── generate_config.cmake
</span></span><span class="line"><span class="cl">└── main.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter5/03"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter5/03<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">test_command</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># 设置需要生成的头文件的路径
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">set</span><span class="p">(</span><span class="n">CONFIG_HEADER</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">config</span><span class="p">.</span><span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># 添加一个自定义命令来生成头文件
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_custom_command</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT</span> <span class="err">$</span><span class="p">{</span><span class="n">CONFIG_HEADER</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_COMMAND</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">-</span><span class="n">DOUTPUT_FILE</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CONFIG_HEADER</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">-</span><span class="n">P</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">generate_config</span><span class="p">.</span><span class="n">cmake</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMENT</span> <span class="s">&#34;Generating config.h&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># 将生成的头文件的路径添加到包含目录
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">include_directories</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># 添加可执行文件
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_executable</span><span class="p">(</span><span class="n">test_app</span> <span class="n">main</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># 将自定义命令的输出文件添加为依赖项
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_dependencies</span><span class="p">(</span><span class="n">test_app</span> <span class="n">config_h_target</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># 定义一个自定义目标以便其他目标可以依赖它
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_custom_target</span><span class="p">(</span><span class="n">config_h_target</span> <span class="n">DEPENDS</span> <span class="err">$</span><span class="p">{</span><span class="n">CONFIG_HEADER</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># 将自定义目标添加到 ALL 阶段，以确保在每次构建时都生成 config.h
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_dependencies</span><span class="p">(</span><span class="n">test_app</span> <span class="n">config_h_target</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>generate_config.cmake</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp"># 你可以在这里定义所需的宏
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">set</span><span class="p">(</span><span class="n">APP_NAME</span> <span class="s">&#34;TJUApp&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">APP_VERSION</span> <span class="s">&#34;1.0.0&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">DEBUG_MODE</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># 生成 config.h 头文件
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">file</span><span class="p">(</span><span class="n">WRITE</span> <span class="err">$</span><span class="p">{</span><span class="n">OUTPUT_FILE</span><span class="p">}</span> <span class="s">&#34;#ifndef CONFIG_H</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">file</span><span class="p">(</span><span class="n">APPEND</span> <span class="err">$</span><span class="p">{</span><span class="n">OUTPUT_FILE</span><span class="p">}</span> <span class="s">&#34;#define CONFIG_H</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">file</span><span class="p">(</span><span class="n">APPEND</span> <span class="err">$</span><span class="p">{</span><span class="n">OUTPUT_FILE</span><span class="p">}</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># 添加宏定义
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">file</span><span class="p">(</span><span class="n">APPEND</span> <span class="err">$</span><span class="p">{</span><span class="n">OUTPUT_FILE</span><span class="p">}</span> <span class="s">&#34;#define APP_NAME </span><span class="se">\&#34;</span><span class="s">${APP_NAME}</span><span class="se">\&#34;\n</span><span class="s">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">file</span><span class="p">(</span><span class="n">APPEND</span> <span class="err">$</span><span class="p">{</span><span class="n">OUTPUT_FILE</span><span class="p">}</span> <span class="s">&#34;#define APP_VERSION </span><span class="se">\&#34;</span><span class="s">${APP_VERSION}</span><span class="se">\&#34;\n</span><span class="s">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">DEBUG_MODE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">file</span><span class="p">(</span><span class="n">APPEND</span> <span class="err">$</span><span class="p">{</span><span class="n">OUTPUT_FILE</span><span class="p">}</span> <span class="s">&#34;#define DEBUG_MODE 1</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span> <span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">file</span><span class="p">(</span><span class="n">APPEND</span> <span class="err">$</span><span class="p">{</span><span class="n">OUTPUT_FILE</span><span class="p">}</span> <span class="s">&#34;#define DEBUG_MODE 0</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span> <span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># 结束文件
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">file</span><span class="p">(</span><span class="n">APPEND</span> <span class="err">$</span><span class="p">{</span><span class="n">OUTPUT_FILE</span><span class="p">}</span> <span class="s">&#34;</span><span class="se">\n</span><span class="s">#endif</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;config.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="cp">#ifdef DEBUG_MODE
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;DEBUG_MODE: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">DEBUG_MODE</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>结果</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir build <span class="p">&amp;</span> <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake ..
</span></span><span class="line"><span class="cl">make</span></span></code></pre></td></tr></table>
</div>
</div><br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">生成config.h文件</div>
</center>
<br>
```
DEBUG_MODE: 1
```
]]></description></item><item><title>CMake 笔记 | [24] 构建时运行自定义命令add_custom_command</title><link>https://jianye0428.github.io/posts/cmake_note_24/</link><pubDate>Tue, 30 Jan 2024 21:00:43 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_24/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><strong>项目的构建目标取决于命令的结果，这些命令只能在构建系统生成完成后的构建执行。CMake提供了三个选项来在构建时执行自定义命令:</strong></p>
<ul>
<li><strong>使用add_custom_command编译目标，生成输出文件。</strong></li>
<li><strong>add_custom_target的执行没有输出。</strong></li>
<li><strong>构建目标前后，add_custom_command的执行可以没有输出。</strong></li>
</ul>
<p><strong>这三个选项强制执行特定的语义，并且不可互换。接下来的我们将分别学习具体的用法。</strong></p>
</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<p>本项目比较简单，我们通过对<code>add_custom_command</code>的简单使用，来探索它的功能。</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── config
</span></span><span class="line"><span class="cl">│   └── config.txt
</span></span><span class="line"><span class="cl">└── test.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter5/02"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter5/02<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">CMakeLists.txt</font></td></tr></body></table>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">custom_command_example</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># Set static library to lib file
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_ARCHIVE_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">lib</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cp"># Set dynamic library to lib file
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_LIBRARY_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">lib</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cp"># Set dynamic runtime library or exetuable file to bin file
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_RUNTIME_OUTPUT_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">bin</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span> <span class="n">test</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">MSVC</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">file</span><span class="p">(</span><span class="n">GLOB</span> <span class="n">config_file</span> <span class="s">&#34;${CMAKE_SOURCE_DIR}/config/*.txt&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">add_custom_command</span><span class="p">(</span><span class="n">TARGET</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span> <span class="n">POST_BUILD</span>
</span></span><span class="line"><span class="cl">                     <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_COMMAND</span><span class="p">}</span> <span class="o">-</span><span class="n">E</span> <span class="n">copy_if_different</span>
</span></span><span class="line"><span class="cl">                     <span class="err">$</span><span class="p">{</span><span class="n">config_file</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">                     <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE_DIR</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span><span class="o">&gt;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">elseif</span><span class="p">(</span><span class="n">UNIX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">file</span><span class="p">(</span><span class="n">GLOB</span> <span class="n">config_file</span> <span class="s">&#34;${CMAKE_SOURCE_DIR}/config/*.txt&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">file</span><span class="p">(</span><span class="n">COPY</span> <span class="err">$</span><span class="p">{</span><span class="n">config_file</span><span class="p">}</span> <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_RUNTIME_OUTPUT_DIRECTORY</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><code>add_custom_command</code> 是 <code>CMake</code> 中的一个命令，<font color=green>用于向构建系统添加自定义的构建规则或自定义命令</font>。这可以用于执行各种任务，如生成源文件、拷贝文件、执行脚本等。它允许在 <code>CMake</code> 构建过程中定义一些额外的操作。</div>
    </div>
  </div>
<p>以下是 <code>add_custom_command</code> 命令的一般语法和参数：</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_custom_command</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT</span> <span class="n">output1</span> <span class="p">[</span><span class="n">output2</span><span class="p">...]</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMAND</span> <span class="n">command1</span> <span class="p">[</span><span class="n">ARGS</span><span class="p">]</span> <span class="p">[</span><span class="n">command2</span> <span class="p">[</span><span class="n">ARGS</span><span class="p">]</span> <span class="p">...]</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="n">MAIN_DEPENDENCY</span> <span class="n">depend</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="n">DEPENDS</span> <span class="n">depend</span> <span class="p">[</span><span class="n">depend</span> <span class="p">...]]</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="n">WORKING_DIRECTORY</span> <span class="n">dir</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="n">COMMENT</span> <span class="n">comment</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="n">VERBATIM</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="n">APPEND</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="n">USES_TERMINAL</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>OUTPUT output1 [output2...]</code>: 指定命令执行后生成的输出文件。这些文件通常是构建过程的目标，可以是可执行文件、库文件、数据文件等。</li>
<li><code>COMMAND command1 [ARGS] [command2 [ARGS] ...]</code>: 定义要执行的命令。这可以是外部命令、脚本或自定义操作。</li>
<li><code>MAIN_DEPENDENCY depend</code>: 指定主要的依赖项，通常是影响命令执行的文件。如果 <code>depend</code> 被修改，命令将重新运行。</li>
<li><code>DEPENDS depend [depend ...]</code>: 指定其他依赖项。这些文件会触发命令重新运行，如果它们被修改。</li>
<li><code>WORKING_DIRECTORY dir</code>: 指定命令执行的工作目录。</li>
<li><code>COMMENT comment</code>: 可选，用于描述自定义命令的文本注释。</li>
<li><code>VERBATIM</code>: 可选，告诉 CMake 保持命令的参数不变，不进行任何转义。</li>
<li><code>APPEND</code>: 可选，将新的自定义命令追加到同一输出文件上。</li>
<li><code>USES_TERMINAL</code>: 可选，指示命令是否使用终端。</li>
</ul>
<p>通常，<code>add_custom_command</code> 用于在构建期间执行一些非标准的操作，例如生成代码、转换文件格式、运行测试或其他自定义任务。这可以帮助您在 CMake 构建系统中添加额外的步骤，以满足项目的特定需求。</p>
<p>本项目需要在<code>Windows</code>系统中构建，以探究<code>add_custom_command</code> 命令的功能。该命令在本项目中的主要功能是将根目录下<code>config</code>·文件夹下的所有<code>txt</code>本文文件拷贝到可执行文件所在的目录。</p>
<p>之所以在<code>Windows</code>中的命令和<code>Linux</code>中的命令不一样，根本原因是由于操作系统的文件系统的不同造成的。</p>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p><strong>test.cpp</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;fstream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 文件路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">file_name</span> <span class="o">=</span> <span class="s">&#34;config.txt&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 打开文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">file</span><span class="p">(</span><span class="n">file_name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 检查文件是否成功打开
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">file</span><span class="p">.</span><span class="n">is_open</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;无法打开文件: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">file_name</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">line</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 逐行读取文件内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">while</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">getline</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">line</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">line</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 关闭文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">file</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">运行结果</font></td></tr></body></table>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">version: 0.0.1
</span></span><span class="line"><span class="cl">author: jiangli
</span></span><span class="line"><span class="cl">email: 1316762810@qq.com</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>CMake 笔记 | [23] 配置时运行自定义命令</title><link>https://jianye0428.github.io/posts/cmake_note_23/</link><pubDate>Tue, 30 Jan 2024 21:00:40 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_23/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><strong>已经好久好久没有更新这个系列了，但是无论如何这个系列一定会以较全面的形式更新完成，只是在时间上可能比较拖沓。没有更新的原因也是最近一个月在做一个项目，没日没夜的度过了一个多月的加班加点的生活。</strong></p>
<p><strong>我们言归正传，通过前面的学习，我们已经了解了CMake如何在配置时运行许多子任务，以便找到工作的编译器和必要的依赖项。本篇，我们将学习使用execute_process命令在配置时运行定制化命令。</strong></p>
</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<p>本篇比较简单，只有一个简单的CMakeLists.txt。
相关源码：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter5/01"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter5/01<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">CMakeLists.txt</font></td></tr></body></table>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.5</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">test_exe_proc</span> <span class="n">LANGUAGES</span> <span class="n">NONE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">PythonInterp</span> <span class="n">REQUIRED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># this is set as variable to prepare for abstraction using loops or functions
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">set</span><span class="p">(</span><span class="n">module_name</span> <span class="s">&#34;cffi&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">execute_process</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="s">&#34;-c&#34;</span> <span class="s">&#34;import ${module_name}; print(${module_name}.__version__)&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">OUTPUT_VARIABLE</span> <span class="n">stdout</span>
</span></span><span class="line"><span class="cl">  <span class="n">ERROR_VARIABLE</span> <span class="n">stderr</span>
</span></span><span class="line"><span class="cl">  <span class="n">OUTPUT_STRIP_TRAILING_WHITESPACE</span>
</span></span><span class="line"><span class="cl">  <span class="n">ERROR_STRIP_TRAILING_WHITESPACE</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">stderr</span> <span class="n">MATCHES</span> <span class="s">&#34;ModuleNotFoundError&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Module ${module_name} not found&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Found module ${module_name} v${stdout}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>代码详解<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><code>execute_process</code>命令将从当前正在执行的<code>CMake</code>进程中派生一个或多个子进程，从而提供了在配置项目时运行任意命令的方法。可以在一次调用<code>execute_process</code>时执行多个命令。注意，每个命令的输出将通过管道传输到下一个命令中。该命令接受多个参数:</p>
<ul>
<li><code>WORKING_DIRECTORY</code>，指定应该在哪个目录中执行命令。</li>
<li><code>RESULT_VARIABLE</code>将包含进程运行的结果。这要么是一个整数，表示执行成功，要么是一个带有错误条件的字符串。</li>
<li><code>OUTPUT_VARIABLE</code>和<code>ERROR_VARIABLE</code>将包含执行命令的标准输出和标准错误。由于命令的输出是通过管道传输的，因此只有最后一个命令的标准输出才会保存到<code>OUTPUT_VARIABLE</code>中。</li>
<li><code>INPUT_FILE</code>指定标准输入重定向的文件名</li>
<li><code>OUTPUT_FILE</code>指定标准输出重定向的文件名</li>
<li><code>ERROR_FILE</code>指定标准错误输出重定向的文件名</li>
<li>设置<code>OUTPUT_QUIET</code>和<code>ERROR_QUIET</code>后，CMake将静默地忽略标准输出和标准错误。</li>
<li>设置<code>OUTPUT_STRIP_TRAILING_WHITESPACE</code>，可以删除运行命令的标准输出中的任何尾随空格</li>
<li>设置<code>ERROR_STRIP_TRAILING_WHITESPACE</code>，可以删除运行命令的错误输出中的任何尾随空格</li>
</ul>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">execute_process</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="s">&#34;-c&#34;</span> <span class="s">&#34;import ${module_name}; print(${module_name}.__version__)&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">OUTPUT_VARIABLE</span> <span class="n">stdout</span>
</span></span><span class="line"><span class="cl">  <span class="n">ERROR_VARIABLE</span> <span class="n">stderr</span>
</span></span><span class="line"><span class="cl">  <span class="n">OUTPUT_STRIP_TRAILING_WHITESPACE</span>
</span></span><span class="line"><span class="cl">  <span class="n">ERROR_STRIP_TRAILING_WHITESPACE</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>该命令检查<code>python -c &quot;import cffi; print(cffi.__version__)&quot;</code>的输出。如果没有找到模块，<code>stderr</code>将包含<code>ModuleNotFoundError</code>，我们将在<code>if</code>语句中对其进行检查。本例中，我们将打印<code>Module cffi not found</code>。如果导入成功，<code>Python</code>代码将打印模块的版本，该模块通过管道输入<code>stdout</code>，这样就可以打印如下内容:</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Found module ${_module_name} v${stdout}&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div></div>
    </div>
  </div>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">运行结果</font></td></tr></body></table>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir build
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake ..
</span></span><span class="line"><span class="cl">-- Found PythonInterp: /usr/bin/python3.8 <span class="o">(</span>found version <span class="s2">&#34;3.8.10&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">-- Module cffi not found
</span></span><span class="line"><span class="cl">-- Configuring <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Generating <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Build files have been written to: /home/jiangli/repo/tutorials/cmake-tutorial/chapter5/01/build
</span></span><span class="line"><span class="cl">sudo pip3 install cffi
</span></span><span class="line"><span class="cl">mkdir build
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake ..
</span></span><span class="line"><span class="cl">-- Found module cffi v1.16.0
</span></span><span class="line"><span class="cl">-- Configuring <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Generating <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Build files have been written to: /home/jiangli/repo/tutorials/cmake-tutorial/chapter5/01/build</span></span></code></pre></td></tr></table>
</div>
</div><table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">补充说明</font></td></tr></body></table>
<p>本篇，只打印了结果，但实际项目中，可以警告、中止配置，或者设置可以查询的变量，来切换某些配置选项。</p>
]]></description></item><item><title>CMake 笔记 | [22] 测试的其他补充(重要)</title><link>https://jianye0428.github.io/posts/cmake_note_22/</link><pubDate>Tue, 30 Jan 2024 21:00:36 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_22/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<p>Original jjjstephen <a href="javascript:void%280%29;">Hope Hut</a> <em>2023-09-21 09:03</em> <em>Posted on 天津</em></p>
<p></p>
<p></p>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>通过前几篇的学习，我们基本掌握了关于单元测试的相关内容。当然，随着技术的不断发展，根据不同业务的需求测试框架层出不穷，我们没有办法一一列举。本篇我们将补充几个测试的相关技术，如预期失败、并行测试以及测试子集等。</strong></div>
    </div>
  </div>
<h2 id="二预期测试失败">二、预期测试失败</h2>
<p>理想情况下，我们希望所有的测试能在每个平台上通过。然而，也可能想要测试预期的失败或异常是否会在受控的设置中进行。这种情况下，我们将把预期的失败定义为成功。我们认为，这通常应该交给测试框架(例如：<code>Catch2</code>或<code>Google Test</code>)的任务，它应该检查预期的失败并向<code>CMake</code>报告成功。但是，在某些情况下，可能希望将测试的非零返回代码定义为成功；换句话说，可能想要颠倒成功和失败的定义。</p>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">项目结构</font></td></tr></body></table>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">└── test.py</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter4/05"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter4/05<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">CMakeLists.txt</font></td></tr></body></table>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.5</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">test_error</span> <span class="n">LANGUAGES</span> <span class="n">NONE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">PythonInterp</span> <span class="n">REQUIRED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">enable_testing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span><span class="n">example</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">py</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_tests_properties</span><span class="p">(</span><span class="n">example</span> <span class="n">PROPERTIES</span> <span class="n">WILL_FAIL</span> <span class="nb">true</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p>定义测试并告诉<code>CMake</code>，测试预期会失败:</p>
<div class="highlight" id="id-26"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">set_tests_properties(example PROPERTIES WILL_FAIL true)</span></span></code></pre></td></tr></table>
</div>
</div></div>
    </div>
  </div>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p><strong>test.py</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="c1"># simulate a failing test</span>
</span></span><span class="line"><span class="cl"><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">输出结果</font></td></tr></body></table>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Test project /home/jiangli/repo/tutorials/cmake-tutorial/chapter4/05/build
</span></span><span class="line"><span class="cl">    Start 1: example
</span></span><span class="line"><span class="cl">1/1 Test <span class="c1">#1: example ..........................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span>   0.02 sec</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="三使用超时测试运行时间过长的测试">三、使用超时测试运行时间过长的测试</h2>
<p>理想情况下，测试集应该花很短的时间进行，以便开发人员经常运行测试，并使每个提交(变更集)进行测试成为可能(或更容易)。然而，有些测试可能会花费更长的时间或者被卡住(例如，由于高文件I/O负载)，可能需要设置超时来终止耗时过长的测试，它们延迟了整个测试，并阻塞了部署管道。本节，将通过一种设置超时的方法，可以针对每个测试设置不同的超时。</p>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">项目结构</font></td></tr></body></table>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">└── test.py</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter4/06"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter4/06<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">CMakeLists.txt</font></td></tr></body></table>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.5</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">test_long_test</span> <span class="n">LANGUAGES</span> <span class="n">NONE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">PythonInterp</span> <span class="n">REQUIRED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">enable_testing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span><span class="n">example</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">py</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set_tests_properties</span><span class="p">(</span><span class="n">example</span> <span class="n">PROPERTIES</span> <span class="n">TIMEOUT</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set_tests_properties</span><span class="p">(</span><span class="n">example</span> <span class="n">PROPERTIES</span> <span class="n">TIMEOUT</span> <span class="mi">10</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>为测试指定时限，设置为10秒</p>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p><strong>test.py</strong></p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl"><span class="c1"># wait for 2 seconds</span>
</span></span><span class="line"><span class="cl"><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># report success</span>
</span></span><span class="line"><span class="cl"><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">输出结果</font></td></tr></body></table>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir build <span class="p">&amp;</span> <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake ..
</span></span><span class="line"><span class="cl">ctest
</span></span><span class="line"><span class="cl">Test project /home/jiangli/repo/tutorials/cmake-tutorial/chapter4/06/build
</span></span><span class="line"><span class="cl">    Start 1: example
</span></span><span class="line"><span class="cl">1/1 Test <span class="c1">#1: example ..........................   Passed    2.01 sec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span>   2.02 sec</span></span></code></pre></td></tr></table>
</div>
</div><p>为了验证超时是否有效，将<code>test.py</code>中的<code>sleep</code>命令增加到<code>11</code>秒，并重新运行测试:</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Test project /home/jiangli/repo/tutorials/cmake-tutorial/chapter4/06/build
</span></span><span class="line"><span class="cl">    Start 1: example
</span></span><span class="line"><span class="cl">1/1 Test <span class="c1">#1: example ..........................***Timeout  10.02 sec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">0% tests passed, <span class="m">1</span> tests failed out of <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span>  10.02 sec
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">The following tests FAILED:
</span></span><span class="line"><span class="cl">          <span class="m">1</span> - example <span class="o">(</span>Timeout<span class="o">)</span>
</span></span><span class="line"><span class="cl">Errors <span class="k">while</span> running CTest</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="四并行测试">四、并行测试</h2>
<p>大多数现代计算机都有<code>4</code>个或更多个<code>CPU</code>核芯。<code>CTest</code>有个非常棒的特性，能够并行运行测试，如果有多个可用的核。这可以减少测试的总时间。</p>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">项目结构</font></td></tr></body></table>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">└── <span class="nb">test</span>
</span></span><span class="line"><span class="cl">    ├── a.py
</span></span><span class="line"><span class="cl">    ├── b.py
</span></span><span class="line"><span class="cl">    ├── c.py
</span></span><span class="line"><span class="cl">    ├── d.py
</span></span><span class="line"><span class="cl">    ├── e.py
</span></span><span class="line"><span class="cl">    ├── f.py
</span></span><span class="line"><span class="cl">    ├── g.py
</span></span><span class="line"><span class="cl">    ├── h.py
</span></span><span class="line"><span class="cl">    ├── i.py
</span></span><span class="line"><span class="cl">    └── j.py</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter4/07"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter4/07<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">CMakeLists.txts</font></td></tr></body></table>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">recipe</span><span class="o">-</span><span class="mi">08</span> <span class="n">LANGUAGES</span> <span class="n">NONE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">PythonInterp</span> <span class="n">REQUIRED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">enable_testing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span><span class="n">a</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">py</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span><span class="n">b</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">b</span><span class="p">.</span><span class="n">py</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span><span class="n">c</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">c</span><span class="p">.</span><span class="n">py</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span><span class="n">d</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">d</span><span class="p">.</span><span class="n">py</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span><span class="n">e</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">e</span><span class="p">.</span><span class="n">py</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span><span class="n">f</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">f</span><span class="p">.</span><span class="n">py</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span><span class="n">g</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">g</span><span class="p">.</span><span class="n">py</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span><span class="n">h</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">h</span><span class="p">.</span><span class="n">py</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span><span class="n">i</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">i</span><span class="p">.</span><span class="n">py</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span><span class="n">j</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">j</span><span class="p">.</span><span class="n">py</span></span></span></code></pre></td></tr></table>
</div>
</div><table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p>这里我们只给出了一个<code>python</code>文件，其他文件按照如下表格设置时间即可。</p>
<table>
<thead>
<tr>
<th style="text-align:left">测试用例</th>
<th style="text-align:left">该单元耗时</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">a,b,c,d</td>
<td style="text-align:left">0.5</td>
</tr>
<tr>
<td style="text-align:left">e,f,g</td>
<td style="text-align:left">1.5</td>
</tr>
<tr>
<td style="text-align:left">h</td>
<td style="text-align:left">2.5</td>
</tr>
<tr>
<td style="text-align:left">i</td>
<td style="text-align:left">3.5</td>
</tr>
<tr>
<td style="text-align:left">j</td>
<td style="text-align:left">4.5</td>
</tr>
</tbody>
</table>
<p><strong>a.py</strong></p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl"><span class="c1"># wait for 0.5 seconds</span>
</span></span><span class="line"><span class="cl"><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># finally report success</span>
</span></span><span class="line"><span class="cl"><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">输出结果</font></td></tr></body></table>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir build <span class="p">&amp;</span> <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake ..
</span></span><span class="line"><span class="cl">ctest
</span></span><span class="line"><span class="cl">Test project /home/jiangli/repo/tutorials/cmake-tutorial/chapter4/07/build
</span></span><span class="line"><span class="cl">      Start  1: a
</span></span><span class="line"><span class="cl"> 1/10 Test  <span class="c1">#1: a ................................   Passed    0.51 sec</span>
</span></span><span class="line"><span class="cl">      Start  2: b
</span></span><span class="line"><span class="cl"> 2/10 Test  <span class="c1">#2: b ................................   Passed    0.52 sec</span>
</span></span><span class="line"><span class="cl">      Start  3: c
</span></span><span class="line"><span class="cl"> 3/10 Test  <span class="c1">#3: c ................................   Passed    0.52 sec</span>
</span></span><span class="line"><span class="cl">      Start  4: d
</span></span><span class="line"><span class="cl"> 4/10 Test  <span class="c1">#4: d ................................   Passed    0.52 sec</span>
</span></span><span class="line"><span class="cl">      Start  5: e
</span></span><span class="line"><span class="cl"> 5/10 Test  <span class="c1">#5: e ................................   Passed    1.52 sec</span>
</span></span><span class="line"><span class="cl">      Start  6: f
</span></span><span class="line"><span class="cl"> 6/10 Test  <span class="c1">#6: f ................................   Passed    1.52 sec</span>
</span></span><span class="line"><span class="cl">      Start  7: g
</span></span><span class="line"><span class="cl"> 7/10 Test  <span class="c1">#7: g ................................   Passed    1.52 sec</span>
</span></span><span class="line"><span class="cl">      Start  8: h
</span></span><span class="line"><span class="cl"> 8/10 Test  <span class="c1">#8: h ................................   Passed    2.52 sec</span>
</span></span><span class="line"><span class="cl">      Start  9: i
</span></span><span class="line"><span class="cl"> 9/10 Test  <span class="c1">#9: i ................................   Passed    3.52 sec</span>
</span></span><span class="line"><span class="cl">      Start 10: j
</span></span><span class="line"><span class="cl">10/10 Test <span class="c1">#10: j ................................   Passed    4.52 sec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">10</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span>  17.20 sec
</span></span><span class="line"><span class="cl">ctest --parallel <span class="m">4</span>
</span></span><span class="line"><span class="cl">Test project /home/jiangli/repo/tutorials/cmake-tutorial/chapter4/07/build
</span></span><span class="line"><span class="cl">      Start 10: j
</span></span><span class="line"><span class="cl">      Start  9: i
</span></span><span class="line"><span class="cl">      Start  8: h
</span></span><span class="line"><span class="cl">      Start  7: g
</span></span><span class="line"><span class="cl"> 1/10 Test  <span class="c1">#7: g ................................   Passed    1.51 sec</span>
</span></span><span class="line"><span class="cl">      Start  6: f
</span></span><span class="line"><span class="cl"> 2/10 Test  <span class="c1">#8: h ................................   Passed    2.51 sec</span>
</span></span><span class="line"><span class="cl">      Start  5: e
</span></span><span class="line"><span class="cl"> 3/10 Test  <span class="c1">#6: f ................................   Passed    1.51 sec</span>
</span></span><span class="line"><span class="cl">      Start  4: d
</span></span><span class="line"><span class="cl"> 4/10 Test  <span class="c1">#9: i ................................   Passed    3.52 sec</span>
</span></span><span class="line"><span class="cl">      Start  3: c
</span></span><span class="line"><span class="cl"> 5/10 Test  <span class="c1">#4: d ................................   Passed    0.51 sec</span>
</span></span><span class="line"><span class="cl">      Start  2: b
</span></span><span class="line"><span class="cl"> 6/10 Test  <span class="c1">#5: e ................................   Passed    1.51 sec</span>
</span></span><span class="line"><span class="cl">      Start  1: a
</span></span><span class="line"><span class="cl"> 7/10 Test  <span class="c1">#3: c ................................   Passed    0.51 sec</span>
</span></span><span class="line"><span class="cl"> 8/10 Test  <span class="c1">#2: b ................................   Passed    0.51 sec</span>
</span></span><span class="line"><span class="cl"> 9/10 Test <span class="c1">#10: j ................................   Passed    4.51 sec</span>
</span></span><span class="line"><span class="cl">10/10 Test  <span class="c1">#1: a ................................   Passed    0.51 sec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">10</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span>   4.54 sec
</span></span><span class="line"><span class="cl">ctest --parallel <span class="m">8</span>
</span></span><span class="line"><span class="cl">Test project /home/jiangli/repo/tutorials/cmake-tutorial/chapter4/07/build
</span></span><span class="line"><span class="cl">      Start 10: j
</span></span><span class="line"><span class="cl">      Start  9: i
</span></span><span class="line"><span class="cl">      Start  8: h
</span></span><span class="line"><span class="cl">      Start  7: g
</span></span><span class="line"><span class="cl">      Start  6: f
</span></span><span class="line"><span class="cl">      Start  5: e
</span></span><span class="line"><span class="cl">      Start  4: d
</span></span><span class="line"><span class="cl">      Start  2: b
</span></span><span class="line"><span class="cl"> 1/10 Test  <span class="c1">#4: d ................................   Passed    0.52 sec</span>
</span></span><span class="line"><span class="cl">      Start  3: c
</span></span><span class="line"><span class="cl"> 2/10 Test  <span class="c1">#2: b ................................   Passed    0.52 sec</span>
</span></span><span class="line"><span class="cl">      Start  1: a
</span></span><span class="line"><span class="cl"> 3/10 Test  <span class="c1">#3: c ................................   Passed    0.51 sec</span>
</span></span><span class="line"><span class="cl"> 4/10 Test  <span class="c1">#1: a ................................   Passed    0.51 sec</span>
</span></span><span class="line"><span class="cl"> 5/10 Test  <span class="c1">#7: g ................................   Passed    1.52 sec</span>
</span></span><span class="line"><span class="cl"> 6/10 Test  <span class="c1">#6: f ................................   Passed    1.52 sec</span>
</span></span><span class="line"><span class="cl"> 7/10 Test  <span class="c1">#5: e ................................   Passed    1.52 sec</span>
</span></span><span class="line"><span class="cl"> 8/10 Test  <span class="c1">#8: h ................................   Passed    2.52 sec</span>
</span></span><span class="line"><span class="cl"> 9/10 Test  <span class="c1">#9: i ................................   Passed    3.52 sec</span>
</span></span><span class="line"><span class="cl">10/10 Test <span class="c1">#10: j ................................   Passed    4.52 sec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">10</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span>   4.52 sec</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="五运行测试子集">五、运行测试子集</h2>
<p>前几节，我们学习了如何在<code>CMake</code>的帮助下并行运行测试，并讨论了从最长的测试开始是最高效的。虽然，这种策略将总测试时间最小化，但是在特定特性的代码开发期间，或者在调试期间，我们可能不希望运行整个测试集。对于调试和代码开发，我们只需要能够运行选定的测试子集。t通过本节我们对这一策略进行进一步探究。</p>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">项目结构</font></td></tr></body></table>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">└── <span class="nb">test</span>
</span></span><span class="line"><span class="cl">    ├── benchmark-a.py
</span></span><span class="line"><span class="cl">    ├── benchmark-b.py
</span></span><span class="line"><span class="cl">    ├── feature-a.py
</span></span><span class="line"><span class="cl">    ├── feature-b.py
</span></span><span class="line"><span class="cl">    ├── feature-c.py
</span></span><span class="line"><span class="cl">    └── feature-d.py</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter4/08"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter4/08<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">CMakeLists.txt</font></td></tr></body></table>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">test_subset</span> <span class="n">LANGUAGES</span> <span class="n">NONE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">PythonInterp</span> <span class="n">REQUIRED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">enable_testing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">feature</span><span class="o">-</span><span class="n">a</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">feature</span><span class="o">-</span><span class="n">a</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">feature</span><span class="o">-</span><span class="n">b</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">feature</span><span class="o">-</span><span class="n">b</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">feature</span><span class="o">-</span><span class="n">c</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">feature</span><span class="o">-</span><span class="n">c</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">feature</span><span class="o">-</span><span class="n">d</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">feature</span><span class="o">-</span><span class="n">d</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">benchmark</span><span class="o">-</span><span class="n">a</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">benchmark</span><span class="o">-</span><span class="n">a</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">benchmark</span><span class="o">-</span><span class="n">b</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">benchmark</span><span class="o">-</span><span class="n">b</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_tests_properties</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">feature</span><span class="o">-</span><span class="n">a</span>
</span></span><span class="line"><span class="cl">  <span class="n">feature</span><span class="o">-</span><span class="n">b</span>
</span></span><span class="line"><span class="cl">  <span class="n">feature</span><span class="o">-</span><span class="n">c</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">      <span class="n">LABELS</span> <span class="s">&#34;quick&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_tests_properties</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">feature</span><span class="o">-</span><span class="n">d</span>
</span></span><span class="line"><span class="cl">  <span class="n">benchmark</span><span class="o">-</span><span class="n">a</span>
</span></span><span class="line"><span class="cl">  <span class="n">benchmark</span><span class="o">-</span><span class="n">b</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">      <span class="n">LABELS</span> <span class="s">&#34;long&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>给较短的测试贴上<code>quick</code>的标签，给较长的测试贴上<code>long</code>的标签:</p>
<div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set_tests_properties</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">feature</span><span class="o">-</span><span class="n">a</span>
</span></span><span class="line"><span class="cl">  <span class="n">feature</span><span class="o">-</span><span class="n">b</span>
</span></span><span class="line"><span class="cl">  <span class="n">feature</span><span class="o">-</span><span class="n">c</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">      <span class="n">LABELS</span> <span class="s">&#34;quick&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_tests_properties</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">feature</span><span class="o">-</span><span class="n">d</span>
</span></span><span class="line"><span class="cl">  <span class="n">benchmark</span><span class="o">-</span><span class="n">a</span>
</span></span><span class="line"><span class="cl">  <span class="n">benchmark</span><span class="o">-</span><span class="n">b</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">      <span class="n">LABELS</span> <span class="s">&#34;long&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p>我们假设总共有六个测试：前三个测试比较短，名称分别为<code>feature-a</code>、<code>feature-b</code>和<code>feature-c</code>，还有三个长测试，名称分别是<code>feature-d</code>、<code>benchmark-a</code>和<code>benchmark-b</code>。我们只给出<code>feature-a.py</code>，其他只是睡眠时间的不同。</p>
<div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl"><span class="c1"># wait for 0.1 seconds</span>
</span></span><span class="line"><span class="cl"><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># finally report success</span>
</span></span><span class="line"><span class="cl"><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">输出结果</font></td></tr></body></table>
<div class="highlight" id="id-18"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ctest -R feature
</span></span><span class="line"><span class="cl">Test project /home/jiangli/repo/tutorials/cmake-tutorial/chapter4/08/build
</span></span><span class="line"><span class="cl">    Start 1: feature-a
</span></span><span class="line"><span class="cl">1/4 Test <span class="c1">#1: feature-a ........................   Passed    0.11 sec</span>
</span></span><span class="line"><span class="cl">    Start 2: feature-b
</span></span><span class="line"><span class="cl">2/4 Test <span class="c1">#2: feature-b ........................   Passed    0.11 sec</span>
</span></span><span class="line"><span class="cl">    Start 3: feature-c
</span></span><span class="line"><span class="cl">3/4 Test <span class="c1">#3: feature-c ........................   Passed    0.11 sec</span>
</span></span><span class="line"><span class="cl">    Start 4: feature-d
</span></span><span class="line"><span class="cl">4/4 Test <span class="c1">#4: feature-d ........................   Passed    1.01 sec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Label Time Summary:
</span></span><span class="line"><span class="cl"><span class="nv">long</span>     <span class="o">=</span>   1.01 sec*proc <span class="o">(</span><span class="m">1</span> <span class="nb">test</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">quick</span>    <span class="o">=</span>   0.33 sec*proc <span class="o">(</span><span class="m">3</span> tests<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span>   1.36 sec
</span></span><span class="line"><span class="cl">ctest -L long
</span></span><span class="line"><span class="cl">Test project /home/jiangli/repo/tutorials/cmake-tutorial/chapter4/08/build
</span></span><span class="line"><span class="cl">    Start 4: feature-d
</span></span><span class="line"><span class="cl">1/3 Test <span class="c1">#4: feature-d ........................   Passed    1.01 sec</span>
</span></span><span class="line"><span class="cl">    Start 5: benchmark-a
</span></span><span class="line"><span class="cl">2/3 Test <span class="c1">#5: benchmark-a ......................   Passed    1.01 sec</span>
</span></span><span class="line"><span class="cl">    Start 6: benchmark-b
</span></span><span class="line"><span class="cl">3/3 Test <span class="c1">#6: benchmark-b ......................   Passed    1.01 sec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Label Time Summary:
</span></span><span class="line"><span class="cl"><span class="nv">long</span>    <span class="o">=</span>   3.04 sec*proc <span class="o">(</span><span class="m">3</span> tests<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span>   3.04 sec
</span></span><span class="line"><span class="cl">ctest -L quick
</span></span><span class="line"><span class="cl">Test project /home/jiangli/repo/tutorials/cmake-tutorial/chapter4/08/build
</span></span><span class="line"><span class="cl">    Start 1: feature-a
</span></span><span class="line"><span class="cl">1/3 Test <span class="c1">#1: feature-a ........................   Passed    0.11 sec</span>
</span></span><span class="line"><span class="cl">    Start 2: feature-b
</span></span><span class="line"><span class="cl">2/3 Test <span class="c1">#2: feature-b ........................   Passed    0.11 sec</span>
</span></span><span class="line"><span class="cl">    Start 3: feature-c
</span></span><span class="line"><span class="cl">3/3 Test <span class="c1">#3: feature-c ........................   Passed    0.12 sec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Label Time Summary:
</span></span><span class="line"><span class="cl"><span class="nv">quick</span>    <span class="o">=</span>   0.34 sec*proc <span class="o">(</span><span class="m">3</span> tests<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span>   0.34 sec</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="六使用测试固件">六、使用测试固件</h2>
<p>本节将学习如何使用测试固件。这对于更复杂的测试非常有用，这些测试需要在测试运行前进行设置，以及在测试完成后执行清理操作(例如：创建示例数据库、设置连接、断开连接、清理测试数据库等等)。我们需要运行一个设置或清理操作的测试，并能够以一种可预测和健壮的方式自动触发这些步骤，而不需要引入代码重复。这些设置和清理步骤可以委托给测试框架(例如<code>Google Test</code>或<code>Catch2</code>)。</p>
<p><strong>项目结构</strong></p>
<div class="highlight" id="id-19"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">└── <span class="nb">test</span>
</span></span><span class="line"><span class="cl">    ├── cleanup.py
</span></span><span class="line"><span class="cl">    ├── feature-a.py
</span></span><span class="line"><span class="cl">    ├── feature-b.py
</span></span><span class="line"><span class="cl">    └── setup.py</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter4/09"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter4/09<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">CMakeLists.txt</font></td></tr></body></table>
<div class="highlight" id="id-20"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">test_firmware</span> <span class="n">LANGUAGES</span> <span class="n">NONE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">PythonInterp</span> <span class="n">REQUIRED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">enable_testing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">setup</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">setup</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_tests_properties</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">setup</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">FIXTURES_SETUP</span> <span class="n">my</span><span class="o">-</span><span class="n">fixture</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">feature</span><span class="o">-</span><span class="n">a</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">feature</span><span class="o">-</span><span class="n">a</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">feature</span><span class="o">-</span><span class="n">b</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">feature</span><span class="o">-</span><span class="n">b</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_tests_properties</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">feature</span><span class="o">-</span><span class="n">a</span>
</span></span><span class="line"><span class="cl">  <span class="n">feature</span><span class="o">-</span><span class="n">b</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">FIXTURES_REQUIRED</span> <span class="n">my</span><span class="o">-</span><span class="n">fixture</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">cleanup</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">cleanup</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set_tests_properties</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">cleanup</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">FIXTURES_CLEANUP</span> <span class="n">my</span><span class="o">-</span><span class="n">fixture</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">setup</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">setup</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set_tests_properties</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">setup</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">      <span class="n">FIXTURES_SETUP</span> <span class="n">my</span><span class="o">-</span><span class="n">fixture</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">feature</span><span class="o">-</span><span class="n">a</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">feature</span><span class="o">-</span><span class="n">a</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">feature</span><span class="o">-</span><span class="n">b</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">feature</span><span class="o">-</span><span class="n">b</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set_tests_properties</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">feature</span><span class="o">-</span><span class="n">a</span>
</span></span><span class="line"><span class="cl">  <span class="n">feature</span><span class="o">-</span><span class="n">b</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">      <span class="n">FIXTURES_REQUIRED</span> <span class="n">my</span><span class="o">-</span><span class="n">fixture</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">cleanup</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="o">/</span><span class="n">cleanup</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set_tests_properties</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">cleanup</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">      <span class="n">FIXTURES_CLEANUP</span> <span class="n">my</span><span class="o">-</span><span class="n">fixture</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>定义了一个文本固件，并将其称为<code>my-fixture</code>。我们为安装测试提供了<code>FIXTURES_SETUP</code>属性，并为清理测试了<code>FIXTURES_CLEANUP</code>属性，并且使用<code>FIXTURES_REQUIRED</code>，我们确保测试<code>feature-a</code>和<code>feature-b</code>都需要安装和清理步骤才能运行。将它们绑定在一起，可以确保在定义良好的状态下，进入和离开相应的步骤。</p>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p><strong>setup.py</strong></p>
<div class="highlight" id="id-21"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;tearing down&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># report success</span>
</span></span><span class="line"><span class="cl"><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>feature-a.py</strong></p>
<div class="highlight" id="id-22"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;running test a&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># report success</span>
</span></span><span class="line"><span class="cl"><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>feature-b.py</strong></p>
<div class="highlight" id="id-23"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;running test b&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># report success</span>
</span></span><span class="line"><span class="cl"><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>clearup.py</strong></p>
<div class="highlight" id="id-24"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;tearing down&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># report success</span>
</span></span><span class="line"><span class="cl"><span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">输出结果</font></td></tr></body></table>
<div class="highlight" id="id-25"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ctest
</span></span><span class="line"><span class="cl">Test project /home/jiangli/repo/tutorials/cmake-tutorial/chapter4/09/build
</span></span><span class="line"><span class="cl">    Start 1: setup
</span></span><span class="line"><span class="cl">1/4 Test <span class="c1">#1: setup ............................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">    Start 2: feature-a
</span></span><span class="line"><span class="cl">2/4 Test <span class="c1">#2: feature-a ........................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">    Start 3: feature-b
</span></span><span class="line"><span class="cl">3/4 Test <span class="c1">#3: feature-b ........................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">    Start 4: cleanup
</span></span><span class="line"><span class="cl">4/4 Test <span class="c1">#4: cleanup ..........................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span>   0.05 sec
</span></span><span class="line"><span class="cl">ctest -R feature-a
</span></span><span class="line"><span class="cl">Test project /home/jiangli/repo/tutorials/cmake-tutorial/chapter4/09/build
</span></span><span class="line"><span class="cl">    Start 1: setup
</span></span><span class="line"><span class="cl">1/3 Test <span class="c1">#1: setup ............................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">    Start 2: feature-a
</span></span><span class="line"><span class="cl">2/3 Test <span class="c1">#2: feature-a ........................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">    Start 4: cleanup
</span></span><span class="line"><span class="cl">3/3 Test <span class="c1">#4: cleanup ..........................   Passed    0.01 sec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span>   0.03 sec</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>CMake 笔记 | [21] 利用Valgrind来检测内存缺陷</title><link>https://jianye0428.github.io/posts/cmake_note_21/</link><pubDate>Tue, 30 Jan 2024 21:00:33 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_21/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">*<em>目前，内存缺陷：写入或读取越界，或者内存泄漏（已分配但从未释放的内存），会生产难以跟踪的*<em><code>bug</code>*</em>，最好尽早将它们检查出来。**<code>Valgrind</code>*<em>是一个通用的工具，用来检测内存缺陷和内存泄漏。本篇将在使用*</em><code>CMake/CTest</code>*<em>测试时使用*</em><code>Valgrind</code>*<em>对内存问题进行警告。</em></em></div>
    </div>
  </div>
<h2 id="二valgrind安装">二、Valgrind安装</h2>
<ul>
<li>
<p>下载<code>Valgrind</code></p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">wget  https://sourceware.org/pub/valgrind/valgrind-3.21.0.tar.bz2</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>解压</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">tar -xjvf valgrind-3.15.0.tar.bz2
</span></span><span class="line"><span class="cl">cd valgrind-3.21.0</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>配置</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">./configure</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>编译</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">make</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>安装</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo make install</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="三项目结构">三、项目结构</h2>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── leaky_implementation.cpp
</span></span><span class="line"><span class="cl">├── leaky_implementation.h
</span></span><span class="line"><span class="cl">└── test.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目结构：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter4/04"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter4/04<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">CMakeLists.txt</font></td></tr></body></table>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">test_leaky</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_library</span><span class="p">(</span><span class="n">example_library</span> <span class="n">leaky_implementation</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">cpp_test</span> <span class="n">test</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">cpp_test</span> <span class="n">example_library</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">find_program</span><span class="p">(</span><span class="n">MEMORYCHECK_COMMAND</span> <span class="n">NAMES</span> <span class="n">valgrind</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">MEMORYCHECK_COMMAND_OPTIONS</span> <span class="s">&#34;--trace-children=yes --leak-check=full&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cp"># add memcheck test action
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">CTest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">enable_testing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">cpp_test</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">cpp_test</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">find_program</span><span class="p">(</span><span class="n">MEMORYCHECK_COMMAND</span> <span class="n">NAMES</span> <span class="n">valgrind</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>查找<code>valgrind</code>，并将<code>MEMORYCHECK_COMMAND</code>设置为其绝对路径。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">MEMORYCHECK_COMMAND_OPTIONS</span> <span class="s">&#34;--trace-children=yes --leak-check=full&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>将相关参数传递给<code>Valgrind</code>。内存检查会创建一个日志文件，该文件可用于详细记录内存缺陷信息。</p></div>
    </div>
  </div>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p><strong>leaky_implementation.h</strong></p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#ifndef LEAKY_IMPLEMENTATION_H
</span></span></span><span class="line"><span class="cl"><span class="cp">#define LEAKY_IMPLEMENTATION_H
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">DoSomeWork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif </span><span class="c1">// ！LEAKY_IMPLEMENTATION_H
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>leaky_implementation.cpp</strong></p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;leaky_implementation.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">DoSomeWork</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// we allocate an array
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">double</span> <span class="o">*</span><span class="n">default_array</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">double</span><span class="p">[</span><span class="mi">1000</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// do some work
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// we forget to deallocate it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// delete[] default_array;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>test.cpp</strong></p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;leaky_implementation.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">DoSomeWork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">输出结果</font></td></tr></body></table>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">   Site: jiangli-virtual-machine
</span></span><span class="line"><span class="cl">   Build name: Linux-g++
</span></span><span class="line"><span class="cl">Memory check project /home/jiangli/repo/tutorials/cmake-tutorial/chapter4/04/build
</span></span><span class="line"><span class="cl">    Start 1: cpp_test
</span></span><span class="line"><span class="cl">1/1 MemCheck <span class="c1">#1: cpp_test .........................   Passed    1.03 sec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span>   1.03 sec
</span></span><span class="line"><span class="cl">-- Processing memory checking output:
</span></span><span class="line"><span class="cl">1/1 MemCheck: <span class="c1">#1: cpp_test .........................   Defects: 1</span>
</span></span><span class="line"><span class="cl">MemCheck log files can be found here: <span class="o">(</span> * corresponds to <span class="nb">test</span> number<span class="o">)</span>
</span></span><span class="line"><span class="cl">/home/jiangli/repo/tutorials/cmake-tutorial/chapter4/04/build/Testing/Temporary/MemoryChecker.*.log
</span></span><span class="line"><span class="cl">Memory checking results:
</span></span><span class="line"><span class="cl">Memory Leak - <span class="m">1</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>CMake 笔记 | [20] 利用Google Test库进行单元测试</title><link>https://jianye0428.github.io/posts/cmake_note_20/</link><pubDate>Sun, 28 Jan 2024 13:30:47 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_20/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><strong>本篇，我们将学习如何在CMake的帮助下使用Google Test框架实现单元测试。与前一个配置（Catch2）相比，Google Test框架不仅仅是一个头文件，也是一个库，包含两个需要构建和链接的文件。可以将它们与我们的代码项目放在一起，但是为了使项目更加轻量级，我们将选择在配置时，下载一个定义良好的Google Test，然后构建框架并链接它。我们将使用较新的FetchContent模块（从CMake版本3.11开始可用）。关于相关使用将在后续的笔记中学习。</strong></p>
<p><strong>此外我们将在相关测试内同学习完成后挑选一个测试框架（目前Google Test更加流行）*<em>写一个小的项目实践，尽可能多的将该框架下的功能加以熟悉。*</em></strong></p>
</div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<p><mark>NOTE:</mark></p>
<p><code>main.cpp</code>、<code>sum_integers.cpp</code>和<code>sum_integers.hpp</code>与上一篇内容相同，我们对test.cpp将做相关的修改。</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── main.cpp
</span></span><span class="line"><span class="cl">├── sum_integers.cpp
</span></span><span class="line"><span class="cl">├── sum_integers.h
</span></span><span class="line"><span class="cl">└── test.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter4/03"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter4/03<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h2 id="三项目代码">三、项目代码</h2>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">CMakeLists.txt</font></td></tr></body></table>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.11</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">test_gtest</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_library</span><span class="p">(</span><span class="n">sum_integers</span> <span class="n">sum_integers</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">sum_up</span> <span class="n">main</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">sum_up</span> <span class="n">sum_integers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">option</span><span class="p">(</span><span class="n">ENABLE_UNIT_TESTS</span> <span class="s">&#34;Enable unit tests&#34;</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Enable testing: ${ENABLE_UNIT_TESTS}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">ENABLE_UNIT_TESTS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">include</span><span class="p">(</span><span class="n">FetchContent</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">FetchContent_Declare</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">googletest</span>
</span></span><span class="line"><span class="cl">    <span class="n">GIT_REPOSITORY</span> <span class="nl">https</span><span class="p">:</span><span class="c1">//gitcode.net/mirrors/google/googletest.git
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">GIT_TAG</span>        <span class="n">release</span><span class="o">-</span><span class="mf">1.8.0</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">FetchContent_GetProperties</span><span class="p">(</span><span class="n">googletest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">googletest_POPULATED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">FetchContent_Populate</span><span class="p">(</span><span class="n">googletest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cp"># Prevent GoogleTest from overriding our compiler/linker options
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="cp"># when building with Visual Studio
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="n">set</span><span class="p">(</span><span class="n">gtest_force_shared_crt</span> <span class="n">ON</span> <span class="n">CACHE</span> <span class="n">BOOL</span> <span class="s">&#34;&#34;</span> <span class="n">FORCE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="cp"># Prevent GoogleTest from using PThreads
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="n">set</span><span class="p">(</span><span class="n">gtest_disable_pthreads</span> <span class="n">ON</span> <span class="n">CACHE</span> <span class="n">BOOL</span> <span class="s">&#34;&#34;</span> <span class="n">FORCE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cp"># adds the targers: gtest, gtest_main, gmock, gmock_main
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="n">add_subdirectory</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">googletest_SOURCE_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">googletest_BINARY_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cp"># Silence std::tr1 warning on MSVC
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="k">if</span><span class="p">(</span><span class="n">MSVC</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">foreach</span><span class="p">(</span><span class="n">_tgt</span> <span class="n">gtest</span> <span class="n">gtest_main</span> <span class="n">gmock</span> <span class="n">gmock_main</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">target_compile_definitions</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">_tgt</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;_SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">endforeach</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">add_executable</span><span class="p">(</span><span class="n">cpp_test</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">target_sources</span><span class="p">(</span><span class="n">cpp_test</span>
</span></span><span class="line"><span class="cl">    <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">      <span class="n">test</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">target_link_libraries</span><span class="p">(</span><span class="n">cpp_test</span>
</span></span><span class="line"><span class="cl">    <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">      <span class="n">sum_integers</span>
</span></span><span class="line"><span class="cl">      <span class="n">gtest_main</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">enable_testing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">NAME</span> <span class="n">google_test</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMAND</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">cpp_test</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>**<font color=red>注意:</font>**CMake 3.11版本以后才可以使用<code>FetchContent</code>模块。</p>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS</span> <span class="n">ON</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>告诉<code>CMake</code>在 <code>Windows</code> 平台上自动从共享库（<code>DLL</code>）中导出所有符号（函数、变量、类等）。</p>
<p>当将此选项设置为 <code>ON</code> 时，<code>CMake</code>会自动在库的代码中插入导出指令，确保它们可以被外部链接。这在 <code>Windows</code> 上特别重要，因为需要明确的导出声明才能让符号从 <code>DLL</code> 外部访问。</p>
<p>然而，启用此选项可能会导致生成较大的二进制文件，并可能意外地暴露符号。如果链接了多个库，还可能导致符号冲突。因此，虽然它简化了符号的导出，但需要仔细考虑其影响，以及是否适用于自己的项目。</p>
</div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">option</span><span class="p">(</span><span class="n">ENABLE_UNIT_TESTS</span> <span class="s">&#34;Enable unit tests&#34;</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Enable testing: ${ENABLE_UNIT_TESTS}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">ENABLE_UNIT_TESTS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="cp"># all the remaining CMake code will be placed here
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>检查<code>ENABLE_UNIT_TESTS</code>。默认情况下，它为<code>ON</code>，但有时需要设置为<code>OFF</code>，以免在没有网络连接时，也能使用<code>Google Test</code>。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">FetchContent</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">FetchContent_Declare</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">googletest</span>
</span></span><span class="line"><span class="cl">  <span class="n">GIT_REPOSITORY</span> <span class="nl">https</span><span class="p">:</span><span class="c1">//gitcode.net/mirrors/google/googletest.git
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">GIT_TAG</span>        <span class="n">release</span><span class="o">-</span><span class="mf">1.8.0</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用了<code>FetchContent</code>模块来下载和集成<code>Google Test</code>库（<code>googletest</code>）。</p>
<ul>
<li><code>include(FetchContent)</code>：用于包含<code>FetchContent</code>模块，该模块允许在项目中获取外部依赖项。</li>
<li><code>FetchContent_Declare(googletest ...)</code>：使用<code>FetchContent_Declare</code>宏来声明要获取的外部依赖项。在这种情况下，它声明了一个名为<code>googletest</code>的外部依赖项。</li>
<li><code>GIT_REPOSITORY</code>：这是指定用于获取库的<code>Git</code>存储库的<code>URL</code>。</li>
<li><code>GIT_TAG</code>：这是<code>Git</code>存储库中的特定标签或分支，指定希望获取的库的版本。在这里，它指定了<code>Google Test</code>库的版本为<code>release-1.8.0</code>。</li>
</ul>
<p>使用这段代码后，当构建项目时，<code>CMake</code>将尝试下载并集成<code>Google Test</code>库，以便可以在项目中进行单元测试。请注意，实际项目中可能还需要在测试目标中链接<code>Google Test</code>库，并设置测试用例等。</p>
</div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">googletest_POPULATED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">FetchContent_Populate</span><span class="p">(</span><span class="n">googletest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cp"># Prevent GoogleTest from overriding our compiler/linker options
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="cp"># when building with Visual Studio
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="n">set</span><span class="p">(</span><span class="n">gtest_force_shared_crt</span> <span class="n">ON</span> <span class="n">CACHE</span> <span class="n">BOOL</span> <span class="s">&#34;&#34;</span> <span class="n">FORCE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="cp"># Prevent GoogleTest from using PThreads
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="n">set</span><span class="p">(</span><span class="n">gtest_disable_pthreads</span> <span class="n">ON</span> <span class="n">CACHE</span> <span class="n">BOOL</span> <span class="s">&#34;&#34;</span> <span class="n">FORCE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cp"># adds the targers: gtest, gtest_main, gmock, gmock_main
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="n">add_subdirectory</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">googletest_SOURCE_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">googletest_BINARY_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cp"># Silence std::tr1 warning on MSVC
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="k">if</span><span class="p">(</span><span class="n">MSVC</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">foreach</span><span class="p">(</span><span class="n">_tgt</span> <span class="n">gtest</span> <span class="n">gtest_main</span> <span class="n">gmock</span> <span class="n">gmock_main</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">target_compile_definitions</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">_tgt</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">          <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;_SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="n">endforeach</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>if(NOT googletest_POPULATED)</code>：检查是否已经获取并集成了<code>Google Test</code>库。如果<code>googletest_POPULATED</code>未定义，则会执行其中的代码块。</li>
<li><code>FetchContent_Populate(googletest)</code>：将下载的<code>Google Test</code>库内容填充到指定的目录，以便后续构建和集成。</li>
<li><code>set(gtest_force_shared_crt ON CACHE BOOL &quot;&quot; FORCE)</code>：在使用<code>Visual Studio</code>构建时，将强制<code>Google Test</code>使用共享运行时（<code>C Runtime</code>）库。可以避免构建时的链接错误。</li>
<li><code>set(gtest_disable_pthreads ON CACHE BOOL &quot;&quot; FORCE)</code>：禁用<code>Google Test</code>对<code>pthreads</code>的使用。这可能在某些环境中是必需的，例如在没有<code>pthreads</code>支持的平台上。</li>
<li><code>add_subdirectory(...)</code>：将<code>Google Test</code>库添加到项目中。它会在指定的源码目录和二进制目录中进行构建。</li>
<li>对于<code>Microsoft Visual Studio（MSVC）</code>，在构建<code>Google Test</code>库时，通过<code>target_compile_definitions</code>为<code>gtest</code>、<code>gtest_main</code>、<code>gmock</code>和<code>gmock_main</code>目标添加了宏定义以消除<code>MSVC</code>下的警告。</li>
</ul>
</div>
    </div>
  </div>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p><strong>test.cpp</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;sum_integers.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;gtest/gtest.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="o">::</span><span class="n">testing</span><span class="o">::</span><span class="n">InitGoogleTest</span><span class="p">(</span><span class="o">&amp;</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">RUN_ALL_TESTS</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">TEST</span><span class="p">(</span><span class="n">example</span><span class="p">,</span> <span class="n">sum_zero</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">integers</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">3</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">result</span> <span class="o">=</span> <span class="n">sum_integers</span><span class="p">(</span><span class="n">integers</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">ASSERT_EQ</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">TEST</span><span class="p">(</span><span class="n">example</span><span class="p">,</span> <span class="n">sum_five</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">integers</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">result</span> <span class="o">=</span> <span class="n">sum_integers</span><span class="p">(</span><span class="n">integers</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">ASSERT_EQ</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="mi">15</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">输出:</font></td></tr></body></table>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir build
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake ..
</span></span><span class="line"><span class="cl">ctest
</span></span><span class="line"><span class="cl">Test project /home/jiangli/repo/tutorials/cmake-tutorial/chapter4/03/build
</span></span><span class="line"><span class="cl">    Start 1: google_test
</span></span><span class="line"><span class="cl">1/1 Test <span class="c1">#1: google_test ......................   Passed    0.00 sec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span>   0.01 sec
</span></span><span class="line"><span class="cl">./cpp_test
</span></span><span class="line"><span class="cl"><span class="o">[==========]</span> Running <span class="m">2</span> tests from <span class="m">1</span> <span class="nb">test</span> <span class="k">case</span>.
</span></span><span class="line"><span class="cl"><span class="o">[</span>----------<span class="o">]</span> Global <span class="nb">test</span> environment set-up.
</span></span><span class="line"><span class="cl"><span class="o">[</span>----------<span class="o">]</span> <span class="m">2</span> tests from example
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> example.sum_zero
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> example.sum_zero <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> RUN      <span class="o">]</span> example.sum_five
</span></span><span class="line"><span class="cl"><span class="o">[</span>       OK <span class="o">]</span> example.sum_five <span class="o">(</span><span class="m">0</span> ms<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>----------<span class="o">]</span> <span class="m">2</span> tests from example <span class="o">(</span><span class="m">0</span> ms total<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>----------<span class="o">]</span> Global <span class="nb">test</span> environment tear-down
</span></span><span class="line"><span class="cl"><span class="o">[==========]</span> <span class="m">2</span> tests from <span class="m">1</span> <span class="nb">test</span> <span class="k">case</span> ran. <span class="o">(</span><span class="m">0</span> ms total<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>  PASSED  <span class="o">]</span> <span class="m">2</span> tests.</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>CMake 笔记 | [19] 利用Catch2库进行单元测试</title><link>https://jianye0428.github.io/posts/cmake_note_19/</link><pubDate>Sun, 28 Jan 2024 13:30:42 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_19/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">*<em>上一篇，我们通过返回码来表示**<code>test.cpp</code>*<em>测试的成功或者失败。对于简单的功能没问题，但是通常情况下，我们想要使用一个测试框架，它提供了相关基础设施来运行更复杂的测试，包括固定方式进行测试，与数值公差进行比较，以及在测试失败时输出更好的错误报告。本篇，通过使用目前比较流行的测试库Catch2来进行探索相关内容。这个测试框架有个很好的特性，它可以通过单个头文件包含在项目中进行测试，这使得编译和更新框架特别容易。通过CMake和Catch2结合使用，来测试上一篇的求和代码。</em></em></div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<p><mark>NOTE</mark>
本项目中<code>Catch</code>使用的版本是<code>2.0.1</code>，目前已经更新到<code>3.4.0</code>。关于最新版本的使用我们将在本系列最后开启一个具体的小型项目探索测试框架。</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── catch.hpp
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── main.cpp
</span></span><span class="line"><span class="cl">├── sum_integers.cpp
</span></span><span class="line"><span class="cl">├── sum_integers.h
</span></span><span class="line"><span class="cl">└── test.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter4/02"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter4/02<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">CMakeLists.txt</font></td></tr></body></table>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp"># set minimum cmake version
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cp"># project name and language
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">project</span><span class="p">(</span><span class="n">test_catch2</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># require C++11
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># example library
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_library</span><span class="p">(</span><span class="n">sum_integers</span> <span class="n">sum_integers</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cp"># main code
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_executable</span><span class="p">(</span><span class="n">sum_up</span> <span class="n">main</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">sum_up</span> <span class="n">sum_integers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># testing binary
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_executable</span><span class="p">(</span><span class="n">cpp_test</span> <span class="n">test</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">cpp_test</span> <span class="n">sum_integers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">enable_testing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">catch_test</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">cpp_test</span><span class="o">&gt;</span> <span class="o">--</span><span class="n">success</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">catch_test</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">cpp_test</span><span class="o">&gt;</span> <span class="o">--</span><span class="n">success</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>--success</code>选项可传递给单元测试的可执行文件。这是一个<code>Catch2</code>选项，测试成功时，也会有输出。</p></div>
    </div>
  </div>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<blockquote>
<p><code>main.cpp</code>、<code>sum_integers.cpp</code>和<code>sum_integers.h</code>与之前的示例相同。</p>
</blockquote>
<p><strong>test.cpp</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;sum_integers.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1">// this tells catch to provide a main()
</span></span></span><span class="line"><span class="cl"><span class="c1">// only do this in one cpp file
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define CATCH_CONFIG_MAIN
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;catch.hpp&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">TEST_CASE</span><span class="p">(</span><span class="s">&#34;Sum of integers for a short vector&#34;</span><span class="p">,</span> <span class="s">&#34;[shirt]&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">integers</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">REQUIRE</span><span class="p">(</span><span class="n">sum_integers</span><span class="p">(</span><span class="n">integers</span><span class="p">)</span> <span class="o">==</span> <span class="mi">15</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">TEST_CASE</span><span class="p">(</span><span class="s">&#34;Sum of integers for a longer vector&#34;</span><span class="p">,</span> <span class="s">&#34;[long]&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">integers</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1001</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">integers</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">REQUIRE</span><span class="p">(</span><span class="n">sum_integers</span><span class="p">(</span><span class="n">integers</span><span class="p">)</span> <span class="o">==</span> <span class="mi">500500</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">输出结果:</font></td></tr></body></table>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir -p build
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake ..
</span></span><span class="line"><span class="cl">cmake --build .
</span></span><span class="line"><span class="cl">ctest -V
</span></span><span class="line"><span class="cl">UpdateCTestConfiguration  from :/home/jiangli/repo/tutorials/cmake-tutorial/chapter4/02/build/DartConfiguration.tcl
</span></span><span class="line"><span class="cl">UpdateCTestConfiguration  from :/home/jiangli/repo/tutorials/cmake-tutorial/chapter4/02/build/DartConfiguration.tcl
</span></span><span class="line"><span class="cl">Test project /home/jiangli/repo/tutorials/cmake-tutorial/chapter4/02/build
</span></span><span class="line"><span class="cl">Constructing a list of tests
</span></span><span class="line"><span class="cl">Done constructing a list of tests
</span></span><span class="line"><span class="cl">Updating <span class="nb">test</span> list <span class="k">for</span> fixtures
</span></span><span class="line"><span class="cl">Added <span class="m">0</span> tests to meet fixture requirements
</span></span><span class="line"><span class="cl">Checking <span class="nb">test</span> dependency graph...
</span></span><span class="line"><span class="cl">Checking <span class="nb">test</span> dependency graph end
</span></span><span class="line"><span class="cl"><span class="nb">test</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">    Start 1: catch_test
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">1: Test command: /home/jiangli/repo/tutorials/cmake-tutorial/chapter4/02/build/cpp_test <span class="s2">&#34;--success&#34;</span>
</span></span><span class="line"><span class="cl">1: Test timeout computed to be: <span class="m">10000000</span>
</span></span><span class="line"><span class="cl">1:
</span></span><span class="line"><span class="cl">1: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
</span></span><span class="line"><span class="cl">1: cpp_test is a Catch v2.0.1 host application.
</span></span><span class="line"><span class="cl">1: Run with -? <span class="k">for</span> options
</span></span><span class="line"><span class="cl">1:
</span></span><span class="line"><span class="cl">1: -------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl">1: Sum of integers <span class="k">for</span> a short vector
</span></span><span class="line"><span class="cl">1: -------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl">1: /home/jiangli/repo/tutorials/cmake-tutorial/chapter4/02/test.cpp:13
</span></span><span class="line"><span class="cl">1: ...............................................................................
</span></span><span class="line"><span class="cl">1:
</span></span><span class="line"><span class="cl">1: /home/jiangli/repo/tutorials/cmake-tutorial/chapter4/02/test.cpp:15:
</span></span><span class="line"><span class="cl">1: PASSED:
</span></span><span class="line"><span class="cl">1:   REQUIRE<span class="o">(</span> sum_integers<span class="o">(</span>integers<span class="o">)</span> <span class="o">==</span> <span class="m">15</span> <span class="o">)</span>
</span></span><span class="line"><span class="cl">1: with expansion:
</span></span><span class="line"><span class="cl">1:   <span class="nv">15</span> <span class="o">==</span> <span class="m">15</span>
</span></span><span class="line"><span class="cl">1:
</span></span><span class="line"><span class="cl">1: -------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl">1: Sum of integers <span class="k">for</span> a longer vector
</span></span><span class="line"><span class="cl">1: -------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl">1: /home/jiangli/repo/tutorials/cmake-tutorial/chapter4/02/test.cpp:18
</span></span><span class="line"><span class="cl">1: ...............................................................................
</span></span><span class="line"><span class="cl">1:
</span></span><span class="line"><span class="cl">1: /home/jiangli/repo/tutorials/cmake-tutorial/chapter4/02/test.cpp:23:
</span></span><span class="line"><span class="cl">1: PASSED:
</span></span><span class="line"><span class="cl">1:   REQUIRE<span class="o">(</span> sum_integers<span class="o">(</span>integers<span class="o">)</span> <span class="o">==</span> <span class="m">500500</span> <span class="o">)</span>
</span></span><span class="line"><span class="cl">1: with expansion:
</span></span><span class="line"><span class="cl">1:   <span class="m">500500</span> <span class="o">(</span>0x7a314<span class="o">)</span> <span class="o">==</span> <span class="m">500500</span> <span class="o">(</span>0x7a314<span class="o">)</span>
</span></span><span class="line"><span class="cl">1:
</span></span><span class="line"><span class="cl">1: <span class="o">===============================================================================</span>
</span></span><span class="line"><span class="cl">1: All tests passed <span class="o">(</span><span class="m">2</span> assertions in <span class="m">2</span> <span class="nb">test</span> cases<span class="o">)</span>
</span></span><span class="line"><span class="cl">1:
</span></span><span class="line"><span class="cl">1/1 Test <span class="c1">#1: catch_test .......................   Passed    0.00 sec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">100% tests passed, <span class="m">0</span> tests failed out of <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Total Test <span class="nb">time</span> <span class="o">(</span>real<span class="o">)</span> <span class="o">=</span>   0.00 sec</span></span></code></pre></td></tr></table>
</div>
</div><p>测试<code>cpp_test</code>的二进制文件，可以直接从<code>Catch2</code>中看到输出：</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">./cpp_test --success
</span></span><span class="line"><span class="cl">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
</span></span><span class="line"><span class="cl">cpp_test is a Catch v2.0.1 host application.
</span></span><span class="line"><span class="cl">Run with -? <span class="k">for</span> options
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl">Sum of integers <span class="k">for</span> a short vector
</span></span><span class="line"><span class="cl">-------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl">/home/jiangli/repo/tutorials/cmake-tutorial/chapter4/02/test.cpp:13
</span></span><span class="line"><span class="cl">...............................................................................
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/home/jiangli/repo/tutorials/cmake-tutorial/chapter4/02/test.cpp:15:
</span></span><span class="line"><span class="cl">PASSED:
</span></span><span class="line"><span class="cl">  REQUIRE<span class="o">(</span> sum_integers<span class="o">(</span>integers<span class="o">)</span> <span class="o">==</span> <span class="m">15</span> <span class="o">)</span>
</span></span><span class="line"><span class="cl">with expansion:
</span></span><span class="line"><span class="cl">  <span class="nv">15</span> <span class="o">==</span> <span class="m">15</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl">Sum of integers <span class="k">for</span> a longer vector
</span></span><span class="line"><span class="cl">-------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl">/home/jiangli/repo/tutorials/cmake-tutorial/chapter4/02/test.cpp:18
</span></span><span class="line"><span class="cl">...............................................................................
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/home/jiangli/repo/tutorials/cmake-tutorial/chapter4/02/test.cpp:23:
</span></span><span class="line"><span class="cl">PASSED:
</span></span><span class="line"><span class="cl">  REQUIRE<span class="o">(</span> sum_integers<span class="o">(</span>integers<span class="o">)</span> <span class="o">==</span> <span class="m">500500</span> <span class="o">)</span>
</span></span><span class="line"><span class="cl">with expansion:
</span></span><span class="line"><span class="cl">  <span class="m">500500</span> <span class="o">(</span>0x7a314<span class="o">)</span> <span class="o">==</span> <span class="m">500500</span> <span class="o">(</span>0x7a314<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">===============================================================================</span>
</span></span><span class="line"><span class="cl">All tests passed <span class="o">(</span><span class="m">2</span> assertions in <span class="m">2</span> <span class="nb">test</span> cases<span class="o">)</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="三附录">三、附录</h2>
<p><code>Catch2</code>是一个单头文件测试框架，所以不需要定义和构建额外的目标。只需要确保<code>CMake</code>能找到<code>catch.hpp</code>，从而构建<code>test.cpp</code>即可。为了方便起见，将它放在与<code>test.cpp</code>相同的目录中，我们可以选择一个不同的位置，并使用<code>target_include_directory</code>指示该位置。另一种方法是将头部封装到接口库中：</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp"># Prepare &#34;Catch&#34; library for other executables
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">set</span><span class="p">(</span><span class="n">CATCH_INCLUDE_DIR</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="k">catch</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">add_library</span><span class="p">(</span><span class="n">Catch</span>
</span></span><span class="line"><span class="cl"><span class="n">INTERFACE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">Catch</span> <span class="n">INTERFACE</span>
</span></span><span class="line"><span class="cl"><span class="err">$</span><span class="p">{</span><span class="n">CATCH_INCLUDE_DIR</span><span class="p">})</span></span></span></code></pre></td></tr></table>
</div>
</div><p>然后，对库进行如下链接:</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">target_link_libraries(cpp_test Catch)</span></span></code></pre></td></tr></table>
</div>
</div><p><code>Catch2</code>提供了更多功能。有关<code>Catch2</code>框架的完整文档，可访问：</p>
<blockquote>
<p><a href="https://github.com/catchorg/Catch2"target="_blank" rel="external nofollow noopener noreferrer">https://github.com/catchorg/Catch2<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<p><code>Catch2</code>代码库包含有<code>CMake</code>函数，用于解析<code>Catch</code>测试并自动创建<code>CMake</code>测试，不需要显式地输入<code>add_test()</code>函数，可见：</p>
<blockquote>
<p><a href="https://github.com/catchorg/Catch2/blob/master/contrib/ParseAndAddCatchTests.cmake"target="_blank" rel="external nofollow noopener noreferrer">https://github.com/catchorg/Catch2/blob/master/contrib/ParseAndAddCatchTests.cmake<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
]]></description></item><item><title>CMake 笔记 | [18] 利用CTest进行单元测试</title><link>https://jianye0428.github.io/posts/cmake_note_18/</link><pubDate>Sun, 28 Jan 2024 13:30:39 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_18/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><em><strong><code>CTest</code><em>是</em><code>CMake</code><em>的测试工具，本篇通过编写和测试能够对整数求和的代码，以窥探</em><code>CTest</code><em>其中的功能一二。为了说明</em><code>CMake</code><em>没有对实际测试的语言进行任何限制，我们不仅使用</em><code>C++</code><em>可执行文件测试代码，还使用</em><code>Python</code><em>脚本和</em><code>shell</code><em>脚本作为测试代码。为了简单起见，我们将不使用任何测试库来实现，但是我们将在后面的笔记中熟悉</em><code>C++</code><em>测试框架</em>。</strong></em></div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── main.cpp
</span></span><span class="line"><span class="cl">├── sum_integers.cpp
</span></span><span class="line"><span class="cl">├── sum_integers.h
</span></span><span class="line"><span class="cl">├── test.cpp
</span></span><span class="line"><span class="cl">├── test.py
</span></span><span class="line"><span class="cl">└── test.sh</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter4/01"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter4/01<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">CMakeLists.txt</font></td></tr></body></table>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">test_ctest</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">PythonInterp</span> <span class="n">REQUIRED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">find_program</span><span class="p">(</span><span class="n">BASH_EXECUTABLE</span> <span class="n">NAMES</span> <span class="n">bash</span> <span class="n">REQUIRED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># example library
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_library</span><span class="p">(</span><span class="n">sum_integers</span> <span class="n">sum_integers</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># main code
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_executable</span><span class="p">(</span><span class="n">sum_up</span> <span class="n">main</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">sum_up</span> <span class="n">sum_integers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># testing binary
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">add_executable</span><span class="p">(</span><span class="n">cpp_test</span> <span class="n">test</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">cpp_test</span> <span class="n">sum_integers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">enable_testing</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">bash_test</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">BASH_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">sh</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">sum_up</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">cpp_test</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">cpp_test</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">python_test_long</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">py</span> <span class="o">--</span><span class="n">executable</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">sum_up</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">python_test_short</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">py</span> <span class="o">--</span><span class="kt">short</span> <span class="o">--</span><span class="n">executable</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">sum_up</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">find_program</span><span class="p">(</span><span class="n">BASH_EXECUTABLE</span> <span class="n">NAMES</span> <span class="n">bash</span> <span class="n">REQUIRED</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>用于查找系统中的<code>bash</code>可执行文件，并将可执行文件的路径存储在变量<code>BASH_EXECUTABLE</code>中。这可以用于在<code>CMake</code>构建过程中执行<code>bash</code>脚本或命令。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">enable_testing</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>测试这个目录和所有子文件夹(因为我们把它放在主<code>CMakeLists.txt</code>)。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>Tips<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-18"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">cpp_test</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">cpp_test</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>定义了一个新的测试，并设置测试名称和运行命令。</p>
<p>上述代码中，使用了生成器表达式:<code>$&lt;TARGET_FILE:cpp_test&gt;</code>。生成器表达式，是在生成<strong>构建系统生成时</strong>的表达式。我们将在后续的学习内容中介绍和学习生成器表达式。然后，可以声明<code>$&lt;TARGET_FILE:cpp_test&gt;</code>变量，将使用<code>cpp_test</code>可执行目标的完整路径进行替换。</p>
<p><mark>NOTE:</mark></p>
<p>生成器表达式在测试时非常方便，因为不必显式地将可执行程序的位置和名称，可以硬编码到测试中。以一种可移植的方式实现这一点非常麻烦，因为可执行文件和可执行后缀(例如，<code>Windows</code>上是<code>.exe</code>后缀)的位置在不同的操作系统、构建类型和生成器之间可能有所不同。使用生成器表达式，我们不必显式地了解位置和名称。</p>
<p>也可以将参数传递给要运行的<code>test</code>命令：</p>
<div class="highlight" id="id-19"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">python_test_short</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">py</span> <span class="o">--</span><span class="kt">short</span> <span class="o">--</span><span class="n">executable</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">sum_up</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><mark>NOTE</mark></p>
<p><code>CTest</code>可以以任何编程语言运行测试集。<code>CTest</code>关心的是，通过命令的返回码测试用例是否通过。<code>CTest</code>遵循的标准约定是：返回零意味着成功，非零返回意味着失败。可以返回零或非零的脚本，都可以做测试用例。</p>
</div>
    </div>
  </div>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p><strong>sum_integers.h</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#ifndef SUM_INTEGERS_H
</span></span></span><span class="line"><span class="cl"><span class="cp">#define SUM_INTEGERS_H
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">int</span> <span class="nf">sum_integers</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">integers</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif </span><span class="c1">// ! SUM_INTEGERS_H
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>sum_integers.cpp</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;sum_integers.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">sum_integers</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">integers</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">i</span> <span class="p">:</span> <span class="n">integers</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>main.cpp</strong></p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;sum_integers.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">integers</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">argc</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">integers</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">stoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">sum_integers</span><span class="p">(</span><span class="n">integers</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">sum</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>test.cpp</strong></p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;sum_integers.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">integers</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">sum_integers</span><span class="p">(</span><span class="n">integers</span><span class="p">)</span> <span class="o">==</span> <span class="mi">15</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>test.py</strong></p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">subprocess</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">argparse</span>
</span></span><span class="line"><span class="cl"><span class="c1"># test script expects the executable as argument</span>
</span></span><span class="line"><span class="cl"><span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--executable&#39;</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s1">&#39;full path to executable&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s1">&#39;--short&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="n">default</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="n">action</span><span class="o">=</span><span class="s1">&#39;store_true&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="n">help</span><span class="o">=</span><span class="s1">&#39;run a shorter test&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">execute_cpp_code</span><span class="p">(</span><span class="n">integers</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">([</span><span class="n">args</span><span class="o">.</span><span class="n">executable</span><span class="p">]</span> <span class="o">+</span> <span class="n">integers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">short</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># we collect [1, 2, ..., 100] as a list of strings</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="n">execute_cpp_code</span><span class="p">([</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">101</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">result</span> <span class="o">==</span> <span class="mi">5050</span><span class="p">,</span> <span class="s1">&#39;summing up to 100 failed&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># we collect [1, 2, ..., 1000] as a list of strings</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="n">execute_cpp_code</span><span class="p">([</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1001</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="n">result</span> <span class="o">==</span> <span class="mi">500500</span><span class="p">,</span> <span class="s1">&#39;summing up to 1000 failed&#39;</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>test.sh</strong></p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nv">EXECUTABLE</span><span class="o">=</span><span class="nv">$1</span>
</span></span><span class="line"><span class="cl"><span class="nv">OUTPUT</span><span class="o">=</span><span class="k">$(</span><span class="nv">$EXECUTABLE</span> <span class="m">1</span> <span class="m">2</span> <span class="m">3</span> 4<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$OUTPUT</span><span class="s2">&#34;</span> <span class="o">=</span> <span class="s2">&#34;10&#34;</span> <span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">exit</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl">    <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="三附录">三、附录</h2>
<p><strong>1. 考虑以下定义:</strong></p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">python_test_long</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">py</span> <span class="o">--</span><span class="n">executable</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">sum_up</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>前面的定义可以通过显式指定脚本运行的<code>WORKING_DIRECTORY</code>重新表达，如下:</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">python_test_long</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="n">test</span><span class="p">.</span><span class="n">py</span> <span class="o">--</span><span class="n">executable</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">sum_up</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="n">WORKING_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>测试名称可以包含<code>/</code>字符，按名称组织相关测试也很有用，例如：</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span> <span class="n">python</span><span class="o">/</span><span class="kt">long</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="n">test</span><span class="p">.</span><span class="n">py</span> <span class="o">--</span><span class="n">executable</span> <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">sum_up</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="n">WORKING_DIRECTORY</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>有时候，我们需要为测试脚本设置环境变量。这可以通过<code>set_tests_properties</code>实现:</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">set_tests_properties</span><span class="p">(</span><span class="n">python_test</span>
</span></span><span class="line"><span class="cl">  <span class="n">PROPERTIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">ENVIRONMENT</span>
</span></span><span class="line"><span class="cl">      <span class="n">ACCOUNT_MODULE_PATH</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">ACCOUNT_HEADER_FILE</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">account</span><span class="o">/</span><span class="n">account</span><span class="p">.</span><span class="n">h</span>
</span></span><span class="line"><span class="cl">      <span class="n">ACCOUNT_LIBRARY_FILE</span><span class="o">=</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">account</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这种方法在不同的平台上并不总可行，<code>CMake</code>提供了解决这个问题的方法。下面的代码片段与上面给出的代码片段相同，在执行实际的<code>Python</code>测试脚本之前，通过<code>CMAKE_COMMAND</code>调用<code>CMake</code>来预先设置环境变量：</p>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_test</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span>
</span></span><span class="line"><span class="cl">      <span class="n">python_test</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_COMMAND</span><span class="p">}</span> <span class="o">-</span><span class="n">E</span> <span class="n">env</span>
</span></span><span class="line"><span class="cl">    <span class="n">ACCOUNT_MODULE_PATH</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">ACCOUNT_HEADER_FILE</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">account</span><span class="o">/</span><span class="n">account</span><span class="p">.</span><span class="n">h</span>
</span></span><span class="line"><span class="cl">    <span class="n">ACCOUNT_LIBRARY_FILE</span><span class="o">=</span><span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE</span><span class="p">:</span><span class="n">account</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">account</span><span class="o">/</span><span class="n">test</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>同样，要注意使用生成器表达式<code>$&lt;TARGET_FILE:account&gt;</code>来传递库文件的位置。</p>
<p><strong>2. 不同平台测试命令</strong>
我们已经使用<code>ctest</code>命令执行测试，<code>CMake</code>还将为生成器创建目标(<code>Unix Makefile</code>生成器为<code>make test</code>，<code>Ninja</code>工具为<code>ninja test</code>，或者<code>Visual Studio</code>为<code>RUN_TESTS</code>)。这意味着，还有另一种(几乎)可移植的方法来运行测试：</p>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ cmake --build . --target test</span></span></code></pre></td></tr></table>
</div>
</div><p>当使用<code>Visual Studio</code>生成器时，我们需要使用<code>RUN_TESTS</code>来代替:</p>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ cmake --build . --target RUN_TESTS</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>CMake 笔记 | [17] 检测外部库 -- 自定义find模块</title><link>https://jianye0428.github.io/posts/cmake_note_17/</link><pubDate>Sun, 28 Jan 2024 13:30:35 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_17/</guid><description><![CDATA[<h2 id="一导言">一、导言</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>目前上一篇，我们了解了CMake其中一种自定义检测外部库的方式，本篇将展示通过编写一个find模块来定位系统上的<code>ZeroMQ</code>库，以能够在非操作系统上检测该库。</strong></div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── FindZeroMQ.cmake
</span></span><span class="line"><span class="cl">├── zmq_client.cpp
</span></span><span class="line"><span class="cl">└── zmq_server.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter3/06"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter3/06<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<p>注：相关cpp源码与上一篇相同。</p>
<table><body text=red><tr><td style="text-align:right;font-weight:bold" bgcolor=yellow><font size="3" color="red">CMakeLists.txt</font></td></tr></body></table>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">test_zmq</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_PREFIX_PATH</span> <span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">zmq</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">list</span><span class="p">(</span><span class="n">APPEND</span> <span class="n">CMAKE_MODULE_PATH</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">ZeroMQ</span> <span class="n">REQUIRED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">hw_server</span> <span class="n">zmq_server</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">hw_server</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span> <span class="err">$</span><span class="p">{</span><span class="n">ZeroMQ_INCLUDE_DIRS</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">hw_server</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span> <span class="err">$</span><span class="p">{</span><span class="n">ZeroMQ_LIBRARIES</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">hw_client</span> <span class="n">zmq_client</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">hw_client</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span> <span class="err">$</span><span class="p">{</span><span class="n">ZeroMQ_INCLUDE_DIRS</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">hw_client</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span> <span class="err">$</span><span class="p">{</span><span class="n">ZeroMQ_LIBRARIES</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">list</span><span class="p">(</span><span class="n">APPEND</span> <span class="n">CMAKE_MODULE_PATH</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">})</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这行代码是用于在<code>CMake</code>中向<code>CMAKE_MODULE_PATH</code>变量中添加一个目录的路径。通常，<code>CMAKE_MODULE_PATH</code>用于存放自定义的<code>CMake</code>模块文件，这些模块文件可以在项目的<code>CMakeLists.txt</code>文件中通过<code>include</code>等命令来使用。</p>
<p>具体而言，这行代码的作用是将<code>${CMAKE_CURRENT_SOURCE_DIR}</code>添加到CMAKE_MODULE_PATH中。<code>${CMAKE_CURRENT_SOURCE_DIR}</code>表示当前<code>CMakeLists.txt</code>所在的目录，即源代码目录。这样做的目的是为了告诉<code>CMake</code>在这个目录中查找自定义的CMake模块。</p>
<p>这样<code>CMake</code>就可以找到，我们自定义的<code>FindZeroMQ.cmake</code>模块。</p>
<p>此示例的主<code>CMakeLists.txt</code>在使用<code>FindZeroMQ.cmake</code>时，与上一篇中使用的<code>CMakeLists.txt</code>不同。这个模块使用<code>find_path</code>和<code>find_library</code> <code>CMake</code>内置命令，搜索<code>ZeroMQ</code>头文件和库，并使用<code>find_package_handle_standard_args</code>设置相关变量。</p>
</div>
    </div>
  </div>
<table><body text=red><tr><td style="text-align:right;font-weight:bold" bgcolor=yellow><font size="3" color="red">FindZeroMQ.cmake</font></td></tr></body></table>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C++" data-lang="C++"><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">ZeroMQ_ROOT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">ZeroMQ_ROOT</span> <span class="s">&#34;$ENV{ZeroMQ_ROOT}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">ZeroMQ_ROOT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">find_path</span><span class="p">(</span><span class="n">_ZeroMQ_ROOT</span> <span class="n">NAMES</span> <span class="n">include</span><span class="o">/</span><span class="n">zmq</span><span class="p">.</span><span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">_ZeroMQ_ROOT</span> <span class="s">&#34;${ZeroMQ_ROOT}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">find_path</span><span class="p">(</span><span class="n">ZeroMQ_INCLUDE_DIRS</span> <span class="n">NAMES</span> <span class="n">zmq</span><span class="p">.</span><span class="n">h</span> <span class="n">HINTS</span> <span class="err">$</span><span class="p">{</span><span class="n">_ZeroMQ_ROOT</span><span class="p">}</span><span class="o">/</span><span class="n">include</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">ZeroMQ_INCLUDE_DIRS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">_ZeroMQ_H</span> <span class="err">$</span><span class="p">{</span><span class="n">ZeroMQ_INCLUDE_DIRS</span><span class="p">}</span><span class="o">/</span><span class="n">zmq</span><span class="p">.</span><span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">function</span><span class="p">(</span><span class="n">_zmqver_EXTRACT</span> <span class="n">_ZeroMQ_VER_COMPONENT</span> <span class="n">_ZeroMQ_VER_OUTPUT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">CMAKE_MATCH_1</span> <span class="s">&#34;0&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">_ZeroMQ_expr</span> <span class="s">&#34;^[ </span><span class="se">\\</span><span class="s">t]*#define[ </span><span class="se">\\</span><span class="s">t]+${_ZeroMQ_VER_COMPONENT}[ </span><span class="se">\\</span><span class="s">t]+([0-9]+)$&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">file</span><span class="p">(</span><span class="n">STRINGS</span> <span class="s">&#34;${_ZeroMQ_H}&#34;</span> <span class="n">_ZeroMQ_ver</span> <span class="n">REGEX</span> <span class="s">&#34;${_ZeroMQ_expr}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">string</span><span class="p">(</span><span class="n">REGEX</span> <span class="n">MATCH</span> <span class="s">&#34;${_ZeroMQ_expr}&#34;</span> <span class="n">ZeroMQ_ver</span> <span class="s">&#34;${_ZeroMQ_ver}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">_ZeroMQ_VER_OUTPUT</span><span class="p">}</span> <span class="s">&#34;${CMAKE_MATCH_1}&#34;</span> <span class="n">PARENT_SCOPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endfunction</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">_zmqver_EXTRACT</span><span class="p">(</span><span class="s">&#34;ZMQ_VERSION_MAJOR&#34;</span> <span class="n">ZeroMQ_VERSION_MAJOR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">_zmqver_EXTRACT</span><span class="p">(</span><span class="s">&#34;ZMQ_VERSION_MINOR&#34;</span> <span class="n">ZeroMQ_VERSION_MINOR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">_zmqver_EXTRACT</span><span class="p">(</span><span class="s">&#34;ZMQ_VERSION_PATCH&#34;</span> <span class="n">ZeroMQ_VERSION_PATCH</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// We should provide version to find_package_handle_standard_args in the same format as it was requested,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// otherwise it can&#39;t check whether version matches exactly.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">ZeroMQ_FIND_VERSION_COUNT</span> <span class="n">GREATER</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">ZeroMQ_VERSION</span> <span class="s">&#34;${ZeroMQ_VERSION_MAJOR}.${ZeroMQ_VERSION_MINOR}.${ZeroMQ_VERSION_PATCH}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// User has requested ZeroMQ version without patch part =&gt; user is not interested in specific patch =&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// any patch should be an exact match.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">set</span><span class="p">(</span><span class="n">ZeroMQ_VERSION</span> <span class="s">&#34;${ZeroMQ_VERSION_MAJOR}.${ZeroMQ_VERSION_MINOR}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_C_PLATFORM_ID</span><span class="p">}</span> <span class="n">STREQUAL</span> <span class="s">&#34;Windows&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">find_library</span><span class="p">(</span><span class="n">ZeroMQ_LIBRARIES</span>
</span></span><span class="line"><span class="cl">        <span class="n">NAMES</span> <span class="n">zmq</span> <span class="n">HINTS</span>
</span></span><span class="line"><span class="cl">        <span class="err">$</span><span class="p">{</span><span class="n">_ZeroMQ_ROOT</span><span class="p">}</span><span class="o">/</span><span class="n">lib</span>
</span></span><span class="line"><span class="cl">        <span class="err">$</span><span class="p">{</span><span class="n">_ZeroMQ_ROOT</span><span class="p">}</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnu</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">find_library</span><span class="p">(</span><span class="n">ZeroMQ_LIBRARIES</span>
</span></span><span class="line"><span class="cl">        <span class="n">NAMES</span> <span class="n">libzmq</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;libzmq-mt-${ZeroMQ_VERSION_MAJOR}_${ZeroMQ_VERSION_MINOR}_${ZeroMQ_VERSION_PATCH}&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;libzmq-${CMAKE_VS_PLATFORM_TOOLSET}-mt-${ZeroMQ_VERSION_MAJOR}_${ZeroMQ_VERSION_MINOR}_${ZeroMQ_VERSION_PATCH}&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">libzmq_d</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;libzmq-mt-gd-${ZeroMQ_VERSION_MAJOR}_${ZeroMQ_VERSION_MINOR}_${ZeroMQ_VERSION_PATCH}&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;libzmq-${CMAKE_VS_PLATFORM_TOOLSET}-mt-gd-${ZeroMQ_VERSION_MAJOR}_${ZeroMQ_VERSION_MINOR}_${ZeroMQ_VERSION_PATCH}&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">HINTS</span>
</span></span><span class="line"><span class="cl">        <span class="err">$</span><span class="p">{</span><span class="n">_ZeroMQ_ROOT</span><span class="p">}</span><span class="o">/</span><span class="n">lib</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">FindPackageHandleStandardArgs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">find_package_handle_standard_args</span><span class="p">(</span><span class="n">ZeroMQ</span>
</span></span><span class="line"><span class="cl">  <span class="n">FOUND_VAR</span>
</span></span><span class="line"><span class="cl">    <span class="n">ZeroMQ_FOUND</span>
</span></span><span class="line"><span class="cl">  <span class="n">REQUIRED_VARS</span>
</span></span><span class="line"><span class="cl">    <span class="n">ZeroMQ_INCLUDE_DIRS</span>
</span></span><span class="line"><span class="cl">    <span class="n">ZeroMQ_LIBRARIES</span>
</span></span><span class="line"><span class="cl">  <span class="n">VERSION_VAR</span>
</span></span><span class="line"><span class="cl">    <span class="n">ZeroMQ_VERSION</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">ZeroMQ_ROOT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">set</span><span class="p">(</span><span class="n">ZeroMQ_ROOT</span> <span class="s">&#34;$ENV{ZeroMQ_ROOT}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如果<code>ZeroMQ_ROOT</code>变量没有被设置，就尝试从环境变量中获取该路径并设置到<code>ZeroMQ_ROOT</code>变量中。这样的设计可以让我们在不修改<code>CMakeLists.txt</code>文件的情况下，通过设置环境变量来指定ZeroMQ库的路径。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C++" data-lang="C++"><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">ZeroMQ_ROOT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">find_path</span><span class="p">(</span><span class="n">_ZeroMQ_ROOT</span> <span class="n">NAMES</span> <span class="n">include</span><span class="o">/</span><span class="n">zmq</span><span class="p">.</span><span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">_ZeroMQ_ROOT</span> <span class="s">&#34;${ZeroMQ_ROOT}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">find_path</span><span class="p">(</span><span class="n">ZeroMQ_INCLUDE_DIRS</span> <span class="n">NAMES</span> <span class="n">zmq</span><span class="p">.</span><span class="n">h</span> <span class="n">HINTS</span> <span class="err">$</span><span class="p">{</span><span class="n">_ZeroMQ_ROOT</span><span class="p">}</span><span class="o">/</span><span class="n">include</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>用于查找<code>ZeroMQ</code>库的头文件路径，并将路径存储在变量<code>ZeroMQ_INCLUDE_DIRS</code>中。首先检查是否定义了<code>ZeroMQ_ROOT</code>变量，如果未定义，则尝试在系统路径中查找<code>zmq.h</code>头文件；如果已定义，则直接使用<code>ZeroMQ_ROOT</code>变量的值。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C++" data-lang="C++"><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">_ZeroMQ_H</span> <span class="err">$</span><span class="p">{</span><span class="n">ZeroMQ_INCLUDE_DIRS</span><span class="p">}</span><span class="o">/</span><span class="n">zmq</span><span class="p">.</span><span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">function</span><span class="p">(</span><span class="n">_zmqver_EXTRACT</span> <span class="n">_ZeroMQ_VER_COMPONENT</span> <span class="n">_ZeroMQ_VER_OUTPUT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_MATCH_1</span> <span class="s">&#34;0&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">_ZeroMQ_expr</span> <span class="s">&#34;^[ </span><span class="se">\\</span><span class="s">t]*#define[ </span><span class="se">\\</span><span class="s">t]+${_ZeroMQ_VER_COMPONENT}[ </span><span class="se">\\</span><span class="s">t]+([0-9]+)$&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">file</span><span class="p">(</span><span class="n">STRINGS</span> <span class="s">&#34;${_ZeroMQ_H}&#34;</span> <span class="n">_ZeroMQ_ver</span> <span class="n">REGEX</span> <span class="s">&#34;${_ZeroMQ_expr}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">string</span><span class="p">(</span><span class="n">REGEX</span> <span class="n">MATCH</span> <span class="s">&#34;${_ZeroMQ_expr}&#34;</span> <span class="n">ZeroMQ_ver</span> <span class="s">&#34;${_ZeroMQ_ver}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">_ZeroMQ_VER_OUTPUT</span><span class="p">}</span> <span class="s">&#34;${CMAKE_MATCH_1}&#34;</span> <span class="n">PARENT_SCOPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endfunction</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">_zmqver_EXTRACT</span><span class="p">(</span><span class="s">&#34;ZMQ_VERSION_MAJOR&#34;</span> <span class="n">ZeroMQ_VERSION_MAJOR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">_zmqver_EXTRACT</span><span class="p">(</span><span class="s">&#34;ZMQ_VERSION_MINOR&#34;</span> <span class="n">ZeroMQ_VERSION_MINOR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">_zmqver_EXTRACT</span><span class="p">(</span><span class="s">&#34;ZMQ_VERSION_PATCH&#34;</span> <span class="n">ZeroMQ_VERSION_PATCH</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如果成功找到头文件，则将<code>ZeroMQ_INCLUDE_DIRS</code>设置为其位置。我们继续通过使用字符串操作和正则表达式，寻找相应版本的<code>ZeroMQ</code>库。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C++" data-lang="C++"><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">ZeroMQ_FIND_VERSION_COUNT</span> <span class="n">GREATER</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">ZeroMQ_VERSION</span> <span class="s">&#34;${ZeroMQ_VERSION_MAJOR}.${ZeroMQ_VERSION_MINOR}.${ZeroMQ_VERSION_PATCH}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">ZeroMQ_VERSION</span> <span class="s">&#34;${ZeroMQ_VERSION_MAJOR}.${ZeroMQ_VERSION_MINOR}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>为<code>find_package_handle_standard_args</code>准备<code>ZeroMQ_VERSION</code>变量。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C++" data-lang="C++"><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_C_PLATFORM_ID</span><span class="p">}</span> <span class="n">STREQUAL</span> <span class="s">&#34;Windows&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">find_library</span><span class="p">(</span><span class="n">ZeroMQ_LIBRARIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">NAMES</span>
</span></span><span class="line"><span class="cl">        <span class="n">zmq</span>
</span></span><span class="line"><span class="cl">    <span class="n">HINTS</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">_ZeroMQ_ROOT</span><span class="p">}</span><span class="o">/</span><span class="n">lib</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">_ZeroMQ_ROOT</span><span class="p">}</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnu</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">find_library</span><span class="p">(</span><span class="n">ZeroMQ_LIBRARIES</span>
</span></span><span class="line"><span class="cl">    <span class="n">NAMES</span>
</span></span><span class="line"><span class="cl">        <span class="n">libzmq</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;libzmq-mt-${ZeroMQ_VERSION_MAJOR}_${ZeroMQ_VERSION_MINOR}_${ZeroMQ_VERSION_PATCH}&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;libzmq-${CMAKE_VS_PLATFORM_TOOLSET}-mt-${ZeroMQ_VERSION_MAJOR}_${ZeroMQ_VERSION_MINOR}_${ZeroMQ_VERSION_PATCH}&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="n">libzmq_d</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;libzmq-mt-gd-${ZeroMQ_VERSION_MAJOR}_${ZeroMQ_VERSION_MINOR}_${ZeroMQ_VERSION_PATCH}&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;libzmq-${CMAKE_VS_PLATFORM_TOOLSET}-mt-gd-${ZeroMQ_VERSION_MAJOR}_${ZeroMQ_VERSION_MINOR}_${ZeroMQ_VERSION_PATCH}&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">HINTS</span>
</span></span><span class="line"><span class="cl">        <span class="err">$</span><span class="p">{</span><span class="n">_ZeroMQ_ROOT</span><span class="p">}</span><span class="o">/</span><span class="n">lib</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用<code>find_library</code>命令搜索<code>ZeroMQ</code>库。因为库的命名有所不同，这里我们需要区分<code>Unix</code>的平台和<code>Windows</code>平台。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">FindPackageHandleStandardArgs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">find_package_handle_standard_args</span><span class="p">(</span><span class="n">ZeroMQ</span>
</span></span><span class="line"><span class="cl">  <span class="n">FOUND_VAR</span>
</span></span><span class="line"><span class="cl">      <span class="n">ZeroMQ_FOUND</span>
</span></span><span class="line"><span class="cl">  <span class="n">REQUIRED_VARS</span>
</span></span><span class="line"><span class="cl">  <span class="n">ZeroMQ_INCLUDE_DIRS</span>
</span></span><span class="line"><span class="cl">  <span class="n">ZeroMQ_LIBRARIES</span>
</span></span><span class="line"><span class="cl">  <span class="n">VERSION_VAR</span>
</span></span><span class="line"><span class="cl">  <span class="n">ZeroMQ_VERSION</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>最后，包含了标准<code>FindPackageHandleStandardArgs.cmake</code>，并调用相应的<code>CMake</code>命令。如果找到所有需要的变量，并且版本匹配，则将<code>ZeroMQ_FOUND</code>变量设置为<code>TRUE</code>。</p></div>
    </div>
  </div>
<h2 id="三附录">三、附录</h2>
<p><code>find-module</code>通常遵循特定的模式:</p>
<ul>
<li>检查用户是否为所需的包提供了自定义位置。</li>
<li>使用<code>find_</code>家族中的命令搜索所需包的必需组件，即头文件、库、可执行程序等等。我们使用<code>find_path</code>查找头文件的完整路径，并使用<code>find_library</code>查找库。<code>CMake</code>还提供<code>find_file</code>、<code>find_program</code>和<code>find_package</code>。这些命令的参数示意如下:</li>
</ul>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">find_path(&lt;VAR&gt; NAMES name PATHS paths)</span></span></code></pre></td></tr></table>
</div>
</div><p>如果搜索成功，<code>&lt;VAR&gt;</code>将保存搜索结果；如果搜索失败，则会设置为<code>&lt;VAR&gt;-NOTFOUND</code>。<code>NAMES</code>和<code>PATHS</code>分别是<code>CMake</code>应该查找的文件的名称和搜索应该指向的路径。</p>
<p>初步搜索的结果中，可以提取版本号。本例中，<code>ZeroMQ</code>头文件包含库版本，可以使用字符串操作和正则表达式提取库版本信息。</p>
<p>最后，调用<code>find_package_handle_standard_args</code>命令。处理<code>find_package</code>命令的<code>REQUIRED</code>、<code>QUIET</code>和版本参数，并设置<code>ZeroMQ_FOUND</code>变量。</p>
<p>总结：有四种方式可用于找到依赖包。</p>
<ul>
<li>使用由包供应商提供<code>CMake</code>文件<code>&lt;package&gt;Config.cmake </code>，<code>&lt;package&gt;ConfigVersion.cmake</code>和<code>&lt;package&gt;Targets.cmake</code>，通常会在包的标准安装位置查找。</li>
<li>无论是由<code>CMake</code>还是第三方提供的模块，为所需包使用<code>find-module</code>。</li>
<li>使用<code>pkg-config</code>，如本篇的示例所示。</li>
<li>如果这些都不可行，那么编写自己的<code>find</code>模块。</li>
</ul>
<p>这四种可选方案按相关性进行了排序，每种方法也都有其挑战。</p>
<p>目前，并不是所有的包供应商都提供<code>CMake</code>的<code>Find</code>文件，不过正变得越来越普遍。因为导出<code>CMake</code>目标，使得第三方代码很容易使用它所依赖的库和/或程序附加的依赖。</p>
<p>从一开始，<code>Find-module</code>就一直是<code>CMake</code>中定位依赖的主流手段。但是，它们中的大多数仍然依赖于设置依赖项使用的变量，比如<code>Boost_INCLUDE_DIRS</code>、<code>PYTHON_INTERPRETER</code>等等。这种方式很难在第三方发布自己的包时，确保依赖关系被满足。</p>
<p>使用<code>pkg-config</code>的方法可以很好地进行适配，因为它已经成为<code>Unix</code>系统的标准。然而，也由于这个原因，它不是一个完全跨平台的方法。此外，如<code>CMake</code>文档所述，在某些情况下，用户可能会意外地覆盖检测包，并导致<code>pkg-config</code>提供不正确的信息。</p>
<p>最后的方法是编写自己的查找模块脚本，就像本示例中那样。这是可行的，并且依赖于<code>FindPackageHandleStandardArgs.cmake</code>。然而，编写一个全面的查找模块脚本绝非易事，需要考虑很多可能性。</p>
<p>最后祝大家变得更强！</p>
<p>![Image](data:image/svg+xml,%3C%3Fxml version=&lsquo;1.0&rsquo; encoding=&lsquo;UTF-8&rsquo;%3F%3E%3Csvg width=&lsquo;1px&rsquo; height=&lsquo;1px&rsquo; viewBox=&lsquo;0 0 1 1&rsquo; version=&lsquo;1.1&rsquo; xmlns=&lsquo;<a href="http://www.w3.org/2000/svg%27"target="_blank" rel="external nofollow noopener noreferrer">http://www.w3.org/2000/svg'<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> xmlns:xlink=&lsquo;<a href="http://www.w3.org/1999/xlink%27%3E%3Ctitle%3E%3C/title%3E%3Cg"target="_blank" rel="external nofollow noopener noreferrer">http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> stroke=&lsquo;none&rsquo; stroke-width=&lsquo;1&rsquo; fill=&lsquo;none&rsquo; fill-rule=&lsquo;evenodd&rsquo; fill-opacity=&lsquo;0&rsquo;%3E%3Cg transform=&lsquo;translate(-249.000000, -126.000000)&rsquo; fill=&rsquo;%23FFFFFF&rsquo;%3E%3Crect x=&lsquo;249&rsquo; y=&lsquo;126&rsquo; width=&lsquo;1&rsquo; height=&lsquo;1&rsquo;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>
<p>![Image](data:image/svg+xml,%3C%3Fxml version=&lsquo;1.0&rsquo; encoding=&lsquo;UTF-8&rsquo;%3F%3E%3Csvg width=&lsquo;1px&rsquo; height=&lsquo;1px&rsquo; viewBox=&lsquo;0 0 1 1&rsquo; version=&lsquo;1.1&rsquo; xmlns=&lsquo;<a href="http://www.w3.org/2000/svg%27"target="_blank" rel="external nofollow noopener noreferrer">http://www.w3.org/2000/svg'<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> xmlns:xlink=&lsquo;<a href="http://www.w3.org/1999/xlink%27%3E%3Ctitle%3E%3C/title%3E%3Cg"target="_blank" rel="external nofollow noopener noreferrer">http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a> stroke=&lsquo;none&rsquo; stroke-width=&lsquo;1&rsquo; fill=&lsquo;none&rsquo; fill-rule=&lsquo;evenodd&rsquo; fill-opacity=&lsquo;0&rsquo;%3E%3Cg transform=&lsquo;translate(-249.000000, -126.000000)&rsquo; fill=&rsquo;%23FFFFFF&rsquo;%3E%3Crect x=&lsquo;249&rsquo; y=&lsquo;126&rsquo; width=&lsquo;1&rsquo; height=&lsquo;1&rsquo;%3E%3C/rect%3E%3C/g%3E%3C/g%3E%3C/svg%3E)</p>
<p>cmake44</p>
<p>cmake · 目录</p>
<p>上一篇CMake:检测外部库&mdash;使用pkg-config下一篇CMake:利用CTest进行单元测试</p>
<p>People who liked this content also liked</p>
<p>CMake:超级构建模式</p>
<p>Hope Hut</p>
<p>不喜欢</p>
<p>不看的原因</p>
<p>OK</p>
<ul>
<li>内容质量低</li>
<li>不看此公众号</li>
</ul>
<p></p>
<p>IDEA 2023.3 爆了！</p>
<p>架构汪</p>
<p>不喜欢</p>
<p>不看的原因</p>
<p>OK</p>
<ul>
<li>内容质量低</li>
<li>不看此公众号</li>
</ul>
<p></p>
<p>CMake: 构建时记录Git Hash值</p>
<p>Hope Hut</p>
<p>不喜欢</p>
<p>不看的原因</p>
<p>OK</p>
<ul>
<li>内容质量低</li>
<li>不看此公众号</li>
</ul>
<p></p>
<p></p>
<p>Scan to Follow</p>
<p>people underline</p>
]]></description></item><item><title>CMake 笔记 | [16] 检测外部库---使用pkg-config</title><link>https://jianye0428.github.io/posts/cmake_note_16/</link><pubDate>Sun, 28 Jan 2024 13:30:12 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_16/</guid><description><![CDATA[<h1 id="一检测外部库---使用pkg-config">一、检测外部库&mdash;使用pkg-config</h1>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><strong>前面几篇内容的学习，我们基本上了解了如何链接一个三方库的方法。本篇以及下一篇将补充两个检测外部库的方法。</strong></p>
<p><strong>目前为止，我们已经学习了两种检测外部依赖关系的方法：</strong></p>
<ul>
<li><strong>使用<code>CMake</code>自带的<code>find-module</code>，但并不是所有的包在<code>CMake</code>的<code>find</code>模块都找得到。</strong></li>
<li>使用<code>&lt;package&gt;Config.cmake</code> ,<code>&lt;package&gt;ConfigVersion.cmake</code>和<code>&lt;package&gt;Targets.cmake</code>，这些文件由软件包供应商提供，并与软件包一起安装在标准位置的<code>cmake</code>文件夹下。</li>
</ul>
<p><strong>如果某个依赖项既不提供查找模块，也不提供供应商的CMake文件，在这种情况下：</strong></p>
<ul>
<li><strong>依赖<code>pkg-config</code>程序，来找到系统上的包。这依赖于包供应商在<code>.pc</code>配置文件中，其中有关于发行包的元数据。</strong></li>
<li><strong>为依赖项编写自己的<code>find-package</code>模块。</strong></li>
</ul>
<p><strong>接下来，我们通过ZMQ的使用，来演示第一种方法的使用。</strong></p>
</div>
    </div>
  </div>
<h2 id="二zmq的安装">二、ZMQ的安装</h2>
<p>ZMQ下载：</p>
<blockquote>
<p><a href="https://github.com/zeromq"target="_blank" rel="external nofollow noopener noreferrer">https://github.com/zeromq<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<p>下载好后解压, 并进入目录：：</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">tar -xzvf  libzmq-4.3.4.tar.gz .
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cd libzmq-4.3.4</span></span></code></pre></td></tr></table>
</div>
</div><p>开始安装</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">./autogen.sh</span></span></code></pre></td></tr></table>
</div>
</div><p>使用<code>prefix</code>来指定安装目录</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">./configure --prefix=/opt/zmq/ --without-libsodium
</span></span><span class="line"><span class="cl">make
</span></span><span class="line"><span class="cl">sudo make install</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="三项目结构">三、项目结构</h2>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── zmq_client.cpp
</span></span><span class="line"><span class="cl">└── zmq_server.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter3/05"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter3/05<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">CMakeLists.txt</font></td></tr></body></table>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">test_zmq</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_PREFIX_PATH</span> <span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">zmq</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">PkgConfig</span> <span class="n">REQUIRED</span> <span class="n">QUIET</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pkg_search_module</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">ZeroMQ</span>
</span></span><span class="line"><span class="cl">  <span class="n">REQUIRED</span> <span class="n">libzeromq</span> <span class="n">libzmq</span> <span class="n">lib0mq</span>
</span></span><span class="line"><span class="cl">  <span class="n">IMPORTED_TARGET</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">TARGET</span> <span class="n">PkgConfig</span><span class="o">::</span><span class="n">ZeroMQ</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Found ZeroMQ&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">hw_server</span> <span class="n">zmq_server</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">hw_server</span> <span class="n">PkgConfig</span><span class="o">::</span><span class="n">ZeroMQ</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">hw_client</span> <span class="n">zmq_client</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">hw_client</span> <span class="n">PkgConfig</span><span class="o">::</span><span class="n">ZeroMQ</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用<code>pkg_search_module</code>通搜索任何附带包配置<code>.pc</code>文件的库或程序来查找和导入<code>ZeroMQ</code>库。这个命令会在<code>CMake</code>中通过<code>PkgConfig</code>工具查找和配置<code>ZeroMQ</code>库。</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">pkg_search_module(
</span></span><span class="line"><span class="cl">  ZeroMQ
</span></span><span class="line"><span class="cl">  REQUIRED libzeromq libzmq lib0mq
</span></span><span class="line"><span class="cl">  IMPORTED_TARGET
</span></span><span class="line"><span class="cl">)</span></span></code></pre></td></tr></table>
</div>
</div><p><code>ZeroMQ</code>的信息将会被存储在一个导入目标中，其名称是<code>PkgConfig::ZeroMQ</code>，可以将这个目标链接到可执行文件或库。</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">导入目标</div>
</center>
<br>
<table><body text=red><tr><td style="text-align:left;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p><strong>zmq_client.cpp</strong></p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;zmq.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="n">zmq_ctx_new</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="o">*</span><span class="n">requester</span> <span class="o">=</span> <span class="n">zmq_socket</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">ZMQ_REQ</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">zmq_connect</span><span class="p">(</span><span class="n">requester</span><span class="p">,</span> <span class="s">&#34;tcp://localhost:5555&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">perror</span><span class="p">(</span><span class="s">&#34;Failed to connect to server&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">buffer</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&#34;Hello&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">zmq_send</span><span class="p">(</span><span class="n">requester</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buffer</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">reply</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">zmq_recv</span><span class="p">(</span><span class="n">requester</span><span class="p">,</span> <span class="n">reply</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">reply</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Received: %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">reply</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">zmq_close</span><span class="p">(</span><span class="n">requester</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">zmq_ctx_destroy</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>zmq_server.cpp</strong></p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include</span> <span class="o">&lt;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;zmq.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="n">zmq_ctx_new</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="o">*</span><span class="n">responder</span> <span class="o">=</span> <span class="n">zmq_socket</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">ZMQ_REP</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">zmq_bind</span><span class="p">(</span><span class="n">responder</span><span class="p">,</span> <span class="s">&#34;tcp://*:5555&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">perror</span><span class="p">(</span><span class="s">&#34;Failed to bind socket&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">zmq_recv</span><span class="p">(</span><span class="n">responder</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buffer</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Received: %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">buffer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">zmq_send</span><span class="p">(</span><span class="n">responder</span><span class="p">,</span> <span class="s">&#34;World&#34;</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">zmq_close</span><span class="p">(</span><span class="n">responder</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">zmq_ctx_destroy</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>构建项目，并执行</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ mkdir -p build
</span></span><span class="line"><span class="cl">$ cd build
</span></span><span class="line"><span class="cl">$ cmake ..
</span></span><span class="line"><span class="cl">$ cmake --build .</span></span></code></pre></td></tr></table>
</div>
</div><p>执行生成的两个进程结果：</p>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">输出结果</div>
</center>
<br>]]></description></item><item><title>CMake 笔记 | [15] 检测并使用OpenMP的并行环境</title><link>https://jianye0428.github.io/posts/cmake_note_15/</link><pubDate>Sat, 27 Jan 2024 15:38:58 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_15/</guid><description><![CDATA[<h2 id="一检测并使用openmp的并行环境">一、检测并使用OpenMP的并行环境</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content">目前，市面上的计算机几乎都是多核机器，对于性能敏感的程序，我们必须关注这些多核处理器，并在编程模型中使用并发。OpenMP是多核处理器上并行性的标准之一。为了从OpenMP并行化中获得性能收益，通常不需要修改或重写现有程序。一旦确定了代码中的性能关键部分，例如：使用分析工具，我们就可以借助OpenMP通过预处理器指令，指示编译器为这些区域生成可并行的代码。</div>
    </div>
  </div>
<h2 id="二openmp简介">二、OpenMP简介</h2>
<p><code>OpenMP</code>（Open Multi-Processing）是一个用于共享内存多处理器计算机体系结构的并行编程模型。它提供了一套用于并行化应用程序的指令集和编程接口，使得开发者能够更容易地在多核处理器上实现并行计算。以下是关于<code>OpenMP</code>的一些基本介绍：</p>
<p><strong>1. 并行性模型：</strong> <code>OpenMP</code>旨在简化并行程序的编写过程，它基于<code>共享内存</code>架构，其中多个处理器核心共享同一内存。每个核心都可以访问所有内存位置，因此通过共享数据来实现并行计算。</p>
<p><strong>2. 指令注释：</strong> <code>OpenMP</code>使用一种通过在现有代码中插入特殊的指令注释来实现并行性的方法。这些指令告诉编译器在代码中的哪些部分可以并行执行，以及如何在并行执行期间处理共享的数据。</p>
<p><strong>3. 线程级并行：</strong> <code>OpenMP</code>将任务分解成多个线程，每个线程在不同的处理器核心上运行。每个线程都可以独立地执行指定的任务，这样可以充分利用多核处理器的计算能力。</p>
<p><strong>4. 并行语法：</strong> <code>OpenMP</code>使用预处理器指令、函数注释以及库函数来实现并行性。可以通过在代码中插入特定的编译器指令来标识需要并行执行的代码块。</p>
<p><strong>5. 数据共享与同步：</strong> 在多线程并行计算中，共享数据的访问需要特别注意。<code>OpenMP</code>提供了一些机制，如原子操作和临界段，以确保数据的正确共享和同步。</p>
<p><strong>6. 跨平台：</strong> <code>OpenMP</code>支持许多不同的操作系统和编译器，使得开发者可以在各种平台上使用相同的并行代码。</p>
<p><strong>7. 编译器支持：</strong> 大多数现代编译器都支持<code>OpenMP</code>，并可以通过在编译时启用<code>OpenMP</code>选项来生成并行代码。</p>
<p><strong>8. 灵活性：</strong> <code>OpenMP</code>提供了不同级别的并行性，从单一的<code>for</code>循环并行到更复杂的任务并行。</p>
<p><strong>9. 用途广泛：</strong> <code>OpenMP</code>适用于许多领域，包括科学计算、数据分析、图像处理等，使得在多核处理器上提高应用程序性能变得更加简单。</p>
<p>总之，<code>OpenMP</code>是一个用于共享内存并行编程的强大工具，它通过为开发者提供简单且高效的方式来实现多核处理器上的并行计算，帮助优化性能并加速应用程序的执行。</p>
<h2 id="三项目代码">三、项目代码</h2>
<table><body text=red><tr><td style="text-align:right;font-weight:bold" bgcolor=yellow><font size="3" color="red">项目结构</font></td></tr></body></table>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="err">├──</span> <span class="n">CMakeLists</span><span class="p">.</span><span class="n">txt</span>
</span></span><span class="line"><span class="cl"><span class="err">├──</span> <span class="n">test_no_openmp</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl"><span class="err">└──</span> <span class="n">test_openmp</span><span class="p">.</span><span class="n">cpp</span></span></span></code></pre></td></tr></table>
</div>
</div><p>为了窥探使用<code>OpenMP</code>与不使用<code>OpenMP</code>之间的差异性，项目中新建了两个进程以验证其性能，具体性能表现参考最后一部分的输出结果。</p>
<p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter3/04"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter3/04<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<table><body text=red><tr><td style="text-align:right;font-weight:bold" bgcolor=yellow><font size="3" color="red">CMakeLists.txt</font></td></tr></body></table>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">test_openmp</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">OpenMP</span> <span class="n">REQUIRED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">test_openmp</span> <span class="n">test_openmp</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">test_openmp</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">      <span class="n">OpenMP</span><span class="o">::</span><span class="n">OpenMP_CXX</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">test_no_openmp</span> <span class="n">test_no_openmp</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">test_no_openmp</span>
</span></span><span class="line"><span class="cl">  <span class="n">PUBLIC</span>
</span></span><span class="line"><span class="cl">      <span class="n">OpenMP</span><span class="o">::</span><span class="n">OpenMP_CXX</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">find_package(OpenMP REQUIRED)</span></span></code></pre></td></tr></table>
</div>
</div><p>调用<code>find_package</code>来搜索<code>OpenMP</code>。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">add_executable(example example.cpp)
</span></span><span class="line"><span class="cl">target_link_libraries(example
</span></span><span class="line"><span class="cl">  PUBLIC
</span></span><span class="line"><span class="cl">      OpenMP::OpenMP_CXX
</span></span><span class="line"><span class="cl"> )</span></span></code></pre></td></tr></table>
</div>
</div><p>链接到<code>FindOpenMP</code>模块提供的导入目标。</p></div>
    </div>
  </div>
<table><body text=red><tr><td style="text-align:right;font-weight:bold" bgcolor=yellow><font size="3" color="red">相关源码</font></td></tr></body></table>
<p><strong>test_openmp.cpp</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;omp.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;number of available processors: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">omp_get_num_procs</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;number of threads: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">omp_get_max_threads</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">1000000000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;we will form sum of numbers from 1 to &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// start timer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">auto</span> <span class="n">t0</span> <span class="o">=</span> <span class="n">omp_get_wtime</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">0LL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#pragma omp parallel for reduction(+ : s)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">+=</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// stop timer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">auto</span> <span class="n">t1</span> <span class="o">=</span> <span class="n">omp_get_wtime</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;sum: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">s</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;elapsed wall clock time: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">t1</span> <span class="o">-</span> <span class="n">t0</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; seconds&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>test_no_openmp.cpp</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;omp.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">1000000000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;we will form sum of numbers from 1 to &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// start timer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">auto</span> <span class="n">t0</span> <span class="o">=</span> <span class="n">omp_get_wtime</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">0LL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">+=</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// stop timer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">auto</span> <span class="n">t1</span> <span class="o">=</span> <span class="n">omp_get_wtime</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;sum: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">s</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;elapsed wall clock time: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">t1</span> <span class="o">-</span> <span class="n">t0</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; seconds&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><table><body text=red><tr><td style="text-align:right;font-weight:bold" bgcolor=yellow><font size="3" color="red">输出结果:</font></td></tr></body></table>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir -p build
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">$ cmake ..
</span></span><span class="line"><span class="cl">$ cmake --build .
</span></span><span class="line"><span class="cl">$./test_openmp
</span></span><span class="line"><span class="cl">number of available processors: <span class="m">16</span>
</span></span><span class="line"><span class="cl">number of threads: <span class="m">16</span>
</span></span><span class="line"><span class="cl">we will form sum of numbers from <span class="m">1</span> to <span class="m">1000000000</span>
</span></span><span class="line"><span class="cl">sum: <span class="m">500000000500000000</span>
</span></span><span class="line"><span class="cl">elapsed wall clock time: 0.15193 seconds
</span></span><span class="line"><span class="cl">$./test_no_openmp
</span></span><span class="line"><span class="cl">torials/cmake-tutorial/chapter3/04/build/test_openmp
</span></span><span class="line"><span class="cl">number of available processors: <span class="m">16</span>
</span></span><span class="line"><span class="cl">number of threads: <span class="m">16</span>
</span></span><span class="line"><span class="cl">we will form sum of numbers from <span class="m">1</span> to <span class="m">1000000000</span>
</span></span><span class="line"><span class="cl">sum: <span class="m">500000000500000000</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>CMake 笔记 | [14] 检测Python模块和包</title><link>https://jianye0428.github.io/posts/cmake_note_14/</link><pubDate>Sat, 27 Jan 2024 15:38:55 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_14/</guid><description><![CDATA[<h2 id="一检测python模块和包">一、检测Python模块和包</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>上一篇，我们基本了解了如何检测python的解释器和python库。通常，代码是依赖于特定的python模块的，无论是python工具、嵌入python的程序，还是扩展python的库。例如，numpy包。依赖于python模块或包的项目中，确定满足对这些python模块的依赖非常重要。</strong></div>
    </div>
  </div>
<h2 id="二项目结构">二、项目结构</h2>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">├── py3_pure_embedding.cpp
</span></span><span class="line"><span class="cl">└── use_numpy.py</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter3/03"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter3/03<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.5</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">python_module</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">PythonInterp</span> <span class="n">REQUIRED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">PythonLibs</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_VERSION_MAJOR</span><span class="p">}.</span><span class="err">$</span><span class="p">{</span><span class="n">PYTHON_VERSION_MINOR</span><span class="p">}</span> <span class="n">EXACT</span> <span class="n">REQUIRED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">execute_process</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="s">&#34;-c&#34;</span> <span class="s">&#34;import re, numpy; print(re.compile(&#39;/__init__.py.*&#39;).sub(&#39;&#39;,numpy.__file__))&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">RESULT_VARIABLE</span> <span class="n">numpy_status</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_VARIABLE</span> <span class="n">numpy_location</span>
</span></span><span class="line"><span class="cl">    <span class="n">ERROR_QUIET</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_STRIP_TRAILING_WHITESPACE</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">numpy_status</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">NumPy</span> <span class="err">$</span><span class="p">{</span><span class="n">numpy_location</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">STRING</span> <span class="s">&#34;Location of NumPy&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">execute_process</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="s">&#34;-c&#34;</span> <span class="s">&#34;import numpy; print(numpy.__version__)&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_VARIABLE</span> <span class="n">numpy_version</span>
</span></span><span class="line"><span class="cl">    <span class="n">ERROR_QUIET</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_STRIP_TRAILING_WHITESPACE</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">FindPackageHandleStandardArgs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">find_package_handle_standard_args</span><span class="p">(</span><span class="n">NumPy</span>
</span></span><span class="line"><span class="cl">    <span class="n">FOUND_VAR</span> <span class="n">NumPy_FOUND</span>
</span></span><span class="line"><span class="cl">    <span class="n">REQUIRED_VARS</span> <span class="n">NumPy</span>
</span></span><span class="line"><span class="cl">    <span class="n">VERSION_VAR</span> <span class="n">numpy_version</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">pure</span><span class="o">-</span><span class="n">embedding</span> <span class="n">py3_pure_embedding</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">pure</span><span class="o">-</span><span class="n">embedding</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_INCLUDE_DIRS</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">pure</span><span class="o">-</span><span class="n">embedding</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_LIBRARIES</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_custom_command</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">OUTPUT</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">use_numpy</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_COMMAND</span><span class="p">}</span> <span class="o">-</span><span class="n">E</span> <span class="n">copy_if_different</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">use_numpy</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">use_numpy</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl">  <span class="n">DEPENDS</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">use_numpy</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># make sure building pure-embedding triggers the above custom command
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">target_sources</span><span class="p">(</span><span class="n">pure</span><span class="o">-</span><span class="n">embedding</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">use_numpy</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>Tip<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">execute_process</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="s">&#34;-c&#34;</span> <span class="s">&#34;import re, numpy; print(re.compile(&#39;/__init__.py.*&#39;).sub(&#39;&#39;,numpy.__file__))&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">RESULT_VARIABLE</span> <span class="n">numpy_status</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_VARIABLE</span> <span class="n">numpy_location</span>
</span></span><span class="line"><span class="cl">    <span class="n">ERROR_QUIET</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_STRIP_TRAILING_WHITESPACE</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用了<code>CMake</code>的<code>execute_process</code>函数来运行一个<code>python</code>脚本。该脚本导入了<code>re</code>和<code>numpy</code>模块，然后使用<code>re.compile</code>函数来替换<code>numpy</code>模块路径中的一个模式。<code>RESULT_VARIABLE</code>用于捕获<code>python</code>脚本执行的状态，而<code>OUTPUT_VARIABLE</code>用于捕获修改后的<code>numpy</code>模块文件的位置。通过使用<code>ERROR_QUIET</code>来抑制进程生成的任何错误，并且使用<code>OUTPUT_STRIP_TRAILING_WHITESPACE</code>来移除输出中的尾随空格。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>Tip<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">NOT</span> <span class="n">numpy_status</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">NumPy</span> <span class="err">$</span><span class="p">{</span><span class="n">numpy_location</span><span class="p">}</span> <span class="n">CACHE</span> <span class="n">STRING</span> <span class="s">&#34;Location of NumPy&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如果<code>numpy_status</code>不为空，那么设置了一个名为<code>NumPy</code>的CMake缓存变量，其值为<code>numpy_location</code>，这个变量用于存储<code>NumPy</code>库的位置信息。这个操作允许在<code>CMake</code>配置过程中指定<code>NumPy</code>的位置，以便后续的构建过程可以使用它。如果<code>numpy_status</code>为空，则不进行任何操作。</p></div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>Tip<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">execute_process</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="s">&#34;-c&#34;</span> <span class="s">&#34;import numpy; print(numpy.__version__)&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_VARIABLE</span> <span class="n">numpy_version</span>
</span></span><span class="line"><span class="cl">    <span class="n">ERROR_QUIET</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_STRIP_TRAILING_WHITESPACE</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这段代码使用<code>execute_process</code>命令来执行一个<code>python</code>脚本。</p>
<ul>
<li><code>${PYTHON_EXECUTABLE}</code> 是一个<code>CMake</code>变量，用于指定<code>python</code>可执行文件的路径。</li>
<li><code>-c</code> 选项告诉<code>python</code>解释器后面紧跟着的字符串是要执行的<code>python</code>代码。</li>
<li>在这个<code>python</code>代码中，首先导入了<code>numpy</code>库，然后使用<code>print</code>函数输出了<code>numpy</code>库的版本号。</li>
<li><code>OUTPUT_VARIABLE</code> 选项用于捕获<code>python</code>代码的输出，即<code>numpy</code>库的版本号。</li>
<li><code>ERROR_QUIET</code> 选项用于忽略可能的错误信息。</li>
<li><code>OUTPUT_STRIP_TRAILING_WHITESPACE</code> 选项用于移除输出字符串末尾的空格。</li>
</ul>
<p>通过这个操作，可以在<code>CMake</code>配置过程中获取并保存<code>numpy</code>库的版本号，以便后续的构建过程可以使用。</p>
</div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>Tip<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_custom_command</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">OUTPUT</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">use_numpy</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_COMMAND</span><span class="p">}</span> <span class="o">-</span><span class="n">E</span> <span class="n">copy_if_different</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">use_numpy</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">use_numpy</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl">  <span class="n">DEPENDS</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">use_numpy</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用 <code>CMake</code> 中的 <code>add_custom_command</code> 命令，用于定义自定义的构建步骤，以及生成相应的输出文件。</p>
<ul>
<li><code>OUTPUT</code> 指定了生成的输出文件，这里是 <code>${CMAKE_CURRENT_BINARY_DIR}/use_numpy.py</code>。</li>
<li><code>COMMAND</code> 指定了生成输出文件所需要执行的命令，这里是将 <code>${CMAKE_CURRENT_SOURCE_DIR}/use_numpy.py</code> 复制到 <code>${CMAKE_CURRENT_BINARY_DIR}/use_numpy.py</code>。</li>
<li><code>DEPENDS</code> 列出了生成输出文件所依赖的文件，这里是 <code>${CMAKE_CURRENT_SOURCE_DIR}/use_numpy.py</code>。</li>
</ul>
<p>这段代码的作用是在构建过程中，如果 <code>${CMAKE_CURRENT_SOURCE_DIR}/use_numpy.py</code> 发生变化，就执行指定的命令来将该文件复制到构建目录 <code>${CMAKE_CURRENT_BINARY_DIR}</code> 下的相同路径。这可以确保在构建过程中，始终使用最新的 <code>use_numpy.py</code> 文件。</p>
</div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>Tip<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="n">pure</span><span class="o">-</span><span class="n">embedding</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_CURRENT_BINARY_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">use_numpy</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在 <code>CMake</code> 的构建过程中为名为 <code>pure-embedding</code> 的目标（通常是一个可执行文件或库）指定了源文件。在这里，并没有直接添加 <code>C++</code> 源代码，而是添加了一个 <code>python</code> 脚本文件 <code>${CMAKE_CURRENT_BINARY_DIR}/use_numpy.py</code>。</p>
<p>这意味着在构建 <code>pure-embedding</code> 目标时，<code>CMake</code> 会将 <code>${CMAKE_CURRENT_BINARY_DIR}/use_numpy.py</code> 视为目标的源文件之一，并确保在构建过程中该文件已经生成。</p>
</div>
    </div>
  </div>
<p><strong>相关源码</strong></p>
<p><strong>py3_pure_embedding.cpp</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;Python.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">PyObject</span> <span class="o">*</span><span class="n">py_name</span><span class="p">,</span> <span class="o">*</span><span class="n">py_module</span><span class="p">,</span> <span class="o">*</span><span class="n">py_dict</span><span class="p">,</span> <span class="o">*</span><span class="n">py_func</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">PyObject</span> <span class="o">*</span><span class="n">py_args</span><span class="p">,</span> <span class="o">*</span><span class="n">py_value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&#34;Usage: pure-embedding python_file funcname [args]</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">Py_Initialize</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">PyRun_SimpleString</span><span class="p">(</span><span class="s">&#34;import sys&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">PyRun_SimpleString</span><span class="p">(</span><span class="s">&#34;sys.path.append(</span><span class="se">\&#34;</span><span class="s">.</span><span class="se">\&#34;</span><span class="s">)&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">py_name</span> <span class="o">=</span> <span class="n">PyUnicode_DecodeFSDefault</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* Error checking of py_name left out */</span>
</span></span><span class="line"><span class="cl">  <span class="n">py_module</span> <span class="o">=</span> <span class="n">PyImport_Import</span><span class="p">(</span><span class="n">py_name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">py_name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">py_module</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">py_func</span> <span class="o">=</span> <span class="n">PyObject_GetAttrString</span><span class="p">(</span><span class="n">py_module</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* py_func is a new reference */</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">py_func</span> <span class="o">&amp;&amp;</span> <span class="n">PyCallable_Check</span><span class="p">(</span><span class="n">py_func</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">py_args</span> <span class="o">=</span> <span class="n">PyTuple_New</span><span class="p">(</span><span class="n">argc</span> <span class="o">-</span> <span class="mi">3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">argc</span> <span class="o">-</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">py_value</span> <span class="o">=</span> <span class="n">PyLong_FromLong</span><span class="p">(</span><span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]));</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">py_value</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">py_args</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">py_module</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&#34;Cannot convert argument</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="cm">/* py_value reference stolen here: */</span>
</span></span><span class="line"><span class="cl">        <span class="n">PyTuple_SetItem</span><span class="p">(</span><span class="n">py_args</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">py_value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="n">py_value</span> <span class="o">=</span> <span class="n">PyObject_CallObject</span><span class="p">(</span><span class="n">py_func</span><span class="p">,</span> <span class="n">py_args</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">py_args</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">py_value</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Result of call: %ld</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">PyLong_AsLong</span><span class="p">(</span><span class="n">py_value</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">py_value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">py_func</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">py_module</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">PyErr_Print</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&#34;Call failed</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">PyErr_Occurred</span><span class="p">())</span> <span class="n">PyErr_Print</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&#34;Cannot find function </span><span class="se">\&#34;</span><span class="s">%s</span><span class="se">\&#34;\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">Py_XDECREF</span><span class="p">(</span><span class="n">py_func</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">py_module</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">PyErr_Print</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&#34;Failed to load </span><span class="se">\&#34;</span><span class="s">%s</span><span class="se">\&#34;\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">Py_Finalize</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>use_numpy.py</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">print_ones</span><span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">cols</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">cols</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># we return the number of elements to verify</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># that the C++ code is able to receive return values</span>
</span></span><span class="line"><span class="cl">  <span class="n">num_elements</span> <span class="o">=</span> <span class="n">rows</span><span class="o">*</span><span class="n">cols</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">num_elements</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>CMake 笔记 | [13] 检测python解释器和python库</title><link>https://jianye0428.github.io/posts/cmake_note_13/</link><pubDate>Sat, 27 Jan 2024 15:38:52 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_13/</guid><description><![CDATA[<h2 id="一检测python解释器和python库">一、检测python解释器和python库</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><p><strong>python是一种非常流行的语言。许多项目用python编写的工具，从而将主程序和库打包在一起，或者在配置或构建过程中使用python脚本。这种情况下，确保运行时python解释器的依赖也需要得到满足。本篇将展示如何检测和使用python解释器。</strong></p>
<p><strong>除此之外，还有其他方法可以将解释语言(如python)与编译语言(如C或C++)组合在一起使用。一种是扩展python，通过编译成共享库的C或C++模块在这些类型上提供新类型和新功能。另一种是将python解释器嵌入到C或C++程序中。两种方法都需要下列条件:</strong></p>
<ul>
<li><strong>python解释器的工作版本</strong></li>
<li><strong>python头文件python.h的可用性</strong></li>
<li><strong>python运行时库libpython</strong></li>
</ul>
</div>
    </div>
  </div>
<h2 id="二检测python解释器">二、检测python解释器</h2>
<p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter3/01"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter3/01<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<p><strong>CMakeLists.txt文件</strong></p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">python_interperter</span> <span class="n">LANGUAGES</span> <span class="n">NONE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">PythonInterp</span> <span class="n">REQUIRED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">execute_process</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="s">&#34;-c&#34;</span> <span class="s">&#34;print(&#39;Hello, python interpreter!&#39;)&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">RESULT_VARIABLE</span> <span class="n">RESULT_STATUS</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_VARIABLE</span> <span class="n">RESULT_OUTPUT</span>
</span></span><span class="line"><span class="cl">    <span class="n">ERROR_QUIET</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTPUT_STRIP_TRAILING_WHITESPACE</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># message(STATUS &#34;RESULT_VARIABLE is: ${RESULT_STATUS}&#34;)
</span></span></span><span class="line"><span class="cl"><span class="cp"># message(STATUS &#34;OUTPUT_VARIABLE is: ${RESULT_OUTPUT}&#34;)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">CMakePrintHelpers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cmake_print_variables</span><span class="p">(</span><span class="n">RESULT_STATUS</span> <span class="n">RESULT_OUTPUT</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">PythonInterp</span> <span class="n">REQUIRED</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用<code>find_package</code>命令找到<code>python</code>解释器。</p>
<p><code>find_package</code>是用于发现和设置包的<code>CMake</code>模块的命令。这些模块包含<code>CMake</code>命令，用于标识系统标准位置中的包。<code>CMake</code>模块文件称为<code>Find&lt;name&gt;.cmake</code>，当调用<code>find_package(&lt;name&gt;)</code>时，模块中的命令将会运行。</p>
<p>除了在系统上实际查找包模块之外，查找模块还会设置了一些有用的变量，反映实际找到了什么，也可以在自己的<code>CMakeLists.txt</code>中使用这些变量。对于<code>python</code>解释器，相关模块为<code>FindPythonInterp.cmake</code>附带的设置了一些<code>CMake</code>变量:</p>
<ul>
<li><code>PYTHONINTERP_FOUND</code>：是否找到解释器</li>
<li><code>PYTHON_EXECUTABLE</code>：<code>python</code>解释器到可执行文件的路径</li>
<li><code>PYTHON_VERSION_STRING</code>：<code>python</code>解释器的完整版本信息</li>
<li><code>PYTHON_VERSION_MAJOR</code>：<code>python</code>解释器的主要版本号</li>
<li><code>PYTHON_VERSION_MINOR</code> ：<code>python</code>解释器的次要版本号</li>
<li><code>PYTHON_VERSION_PATCH</code>：<code>python</code>解释器的补丁版本号</li>
</ul>
<p>可以强制<code>CMake</code>，查找特定版本的包。例如，要求<code>python</code>解释器的版本大于或等于<code>2.7</code>：<code>find_package(PythonInterp 2.7)</code>。</p>
<p><code>CMake</code>有很多查找软件包的模块。建议在<code>CMake</code>在线文档中查询<code>Find&lt;package&gt;.cmake</code>模块，并在使用它们之前详细阅读它们的文档。<code>find_package</code>命令的文档可以参考 :</p>
<blockquote>
<p><a href="https://cmake.org/cmake/help/v3.5/command/find_ackage.html"target="_blank" rel="external nofollow noopener noreferrer">https://cmake.org/cmake/help/v3.5/command/find_ackage.html<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
</div>
    </div>
  </div>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>引用<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">execute_process</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">COMMAND</span>
</span></span><span class="line"><span class="cl">      <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_EXECUTABLE</span><span class="p">}</span> <span class="s">&#34;-c&#34;</span> <span class="s">&#34;print(&#39;Hello, world!&#39;)&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="n">RESULT_VARIABLE</span> <span class="n">_status</span>
</span></span><span class="line"><span class="cl">  <span class="n">OUTPUT_VARIABLE</span> <span class="n">_hello_world</span>
</span></span><span class="line"><span class="cl">  <span class="n">ERROR_QUIET</span>
</span></span><span class="line"><span class="cl">  <span class="n">OUTPUT_STRIP_TRAILING_WHITESPACE</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>执行<code>python</code>命令并捕获它的输出和返回值。</p></div>
    </div>
  </div>
<p><strong>输出</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">-- Found PythonInterp: /usr/bin/python3.8 <span class="o">(</span>found version <span class="s2">&#34;3.8.10&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">-- RESULT_VARIABLE is: <span class="m">0</span>
</span></span><span class="line"><span class="cl">-- OUTPUT_VARIABLE is: Hello, python interpreter!
</span></span><span class="line"><span class="cl">-- Configuring <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Generating <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Build files have been written to: /home/jiangli/repo/tutorials/cmake-tutorial/chapter3/01/build</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>附录</strong></p>
<p>软件包没有安装在标准位置时，<code>CMake</code>无法正确定位它们。用户可以使用<code>-D</code>参数传递相应的选项，告诉<code>CMake</code>查看特定的位置。<code>python</code>解释器可以使用以下配置:</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cmake -D <span class="nv">PYTHON_EXECUTABLE</span><span class="o">=</span>/custom/location/python ..</span></span></code></pre></td></tr></table>
</div>
</div><p>这将指定非标准<code>/custom/location/python</code>安装目录中的<code>python</code>可执行文件。</p>
<p>注意:每个包都是不同的，<code>Find&lt;package&gt;.cmake</code>模块试图提供统一的检测接口。当<code>CMake</code>无法找到模块包时，可以阅读相应检测模块的文档，以了解如何正确地使用<code>CMake</code>模块。可以在终端中直接浏览文档，可使用<code>cmake --help-module FindPythonInterp</code>查看。</p>
<p>除了检测包之外，我们还想提到一个便于打印变量的<code>helper</code>模块:</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;RESULT_VARIABLE is: ${_status}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;OUTPUT_VARIABLE is: ${_hello_world}&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用以下工具进行调试:</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">CMakePrintHelpers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cmake_print_variables</span><span class="p">(</span><span class="n">_status</span> <span class="n">_hello_world</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>将产生以下输出:</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="o">--</span> <span class="n">_status</span><span class="o">=</span><span class="s">&#34;0&#34;</span> <span class="p">;</span> <span class="n">_hello_world</span><span class="o">=</span><span class="s">&#34;Hello, world!&#34;</span></span></span></code></pre></td></tr></table>
</div>
</div><h1 id="三检测python库">三、检测python库</h1>
<p><strong>项目结构</strong></p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">└── hello_embedded_python.c</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter3/02"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter3/02<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<p><strong>CMakeLists.txt文件</strong></p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">link_python</span> <span class="n">LANGUAGES</span> <span class="n">C</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_C_STANDARD</span> <span class="mi">99</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_C_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_C_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">PythonInterp</span> <span class="n">REQUIRED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">PythonLibs</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_VERSION_MAJOR</span><span class="p">}.</span><span class="err">$</span><span class="p">{</span><span class="n">PYTHON_VERSION_MINOR</span><span class="p">}</span> <span class="n">EXACT</span> <span class="n">REQUIRED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">hello_embedded_python</span> <span class="n">hello_embedded_python</span><span class="p">.</span><span class="n">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">hello_embedded_python</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_INCLUDE_DIRS</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">hello_embedded_python</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_LIBRARIES</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>为了确保可执行文件、头文件和库都有一个匹配的版本。这对于不同版本，可能在运行时导致崩溃。通过<code>FindPythonInterp.cmake</code>中定义的<code>PYTHON_VERSION_MAJOR</code>和<code>PYTHON_VERSION_MINOR</code>来实现:</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">PythonInterp</span> <span class="n">REQUIRED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">PythonLibs</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_VERSION_MAJOR</span><span class="p">}.</span><span class="err">$</span><span class="p">{</span><span class="n">PYTHON_VERSION_MINOR</span><span class="p">}</span> <span class="n">EXACT</span> <span class="n">REQUIRED</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>可执行文件包含<code>python.h</code>头文件。因此，这个目标的<code>include</code>目录必须包含<code>python</code>的<code>include</code>目录，可以通过<code>PYTHON_INCLUDE_DIRS</code>变量进行指定:</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="n">hello_embedded_python</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span> <span class="err">$</span><span class="p">{</span><span class="n">PYTHON_INCLUDE_DIRS</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>将可执行文件链接到<code>python</code>库，通过<code>PYTHON_LIBRARIES</code>变量访问:</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">target_link_libraries(hello_embedded_python
</span></span><span class="line"><span class="cl">  PRIVATE ${PYTHON_LIBRARIES}
</span></span><span class="line"><span class="cl">)</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>相关源码</strong></p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;Python.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/* optional but recommended */</span>
</span></span><span class="line"><span class="cl">  <span class="n">Py_SetProgramName</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="n">Py_Initialize</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">PyRun_SimpleString</span><span class="p">(</span><span class="s">&#34;print(&#39;Today is Tuesday!&#39;)</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">Py_Finalize</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>附录</strong></p>
<p>当<code>python</code>不在标准安装目录中，如何确定<code>python</code>头文件和库的位置是正确的？</p>
<p>对于<code>python</code>解释器，可以通过<code>-D</code>选项传递<code>PYTHON_LIBRARY</code>和<code>PYTHON_INCLUDE_DIR</code>选项来强制<code>CMake</code>查找特定的目录。这些选项指定了以下内容:</p>
<ul>
<li><code>PYTHON_LIBRARY</code>：指向<code>python</code>库的路径</li>
<li><code>PYTHON_INCLUDE_DIR</code>：<code>python.h</code>所在的路径</li>
</ul>
<p>这样，就能获得所需的<code>python</code>版本。</p>
<p>注意：有时需要将<code>-D PYTHON_EXECUTABLE</code>、<code>-D PYTHON_LIBRARY</code>和<code>-D PYTHON_INCLUDE_DIR</code>传递给<code>CMake CLI</code>，以便找到及定位相应的版本的组件。</p>
<p>要将<code>python</code>解释器及其开发组件匹配为完全相同的版本可能非常困难，对于那些将它们安装在非标准位置或系统上安装了多个版本的情况尤其如此。<code>CMake 3.12</code>版本中增加了新的<code>python</code>检测模块，来解决这个问题。<code>CMakeLists.txt</code>的检测部分也将简化为:</p>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">Python</span> <span class="n">COMPONENTS</span> <span class="n">Interpreter</span> <span class="n">Development</span> <span class="n">REQUIRED</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>CMake 笔记 | [12] 检测环境</title><link>https://jianye0428.github.io/posts/cmake_note_12/</link><pubDate>Fri, 26 Jan 2024 09:10:48 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_12/</guid><description><![CDATA[<h2 id="一cmake为eigen库使能向量化">一、CMake:为Eigen库使能向量化</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>本篇开始将涉及检测外部库相关的内容，期间会穿插着一些其他的内容。为了能够使得系统在系统中运行Eigen库，我们首先需要在系统中配置好Eigen库。然后介绍与Eigen库相关的CMake配置。</strong></div>
    </div>
  </div>
<h2 id="二构建eigen">二、构建Eigen</h2>
<p><strong>Windows</strong></p>
<ul>
<li>
<p>从官网下载安装包(下载ZIP格式)：</p>
<blockquote>
<p><a href="https://eigen.tuxfamily.org/index.php?title=Main_Page"target="_blank" rel="external nofollow noopener noreferrer">https://eigen.tuxfamily.org/index.php?title=Main_Page<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>
<br></p>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">Eigen 下载官网截图</div>
</center>
<br>
</blockquote>
</li>
<li>
<p>解压到某一路径中,使用cmake编译。这里以vs15以及x64为例：</p>
<blockquote>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">Cmake 编译截图</div>
</center>
<br>
</blockquote>
<blockquote>
<br>
<center>
  
<br>
<div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">Cmake 编译截图</div>
</center>
<br>
</blockquote>
</li>
<li>
<p>选择输出路径并点击generate：</p>
<blockquote>
<br>
<center>
  
  <br>
  <div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">CMake 编译截图</div>
</center>
<br>
</blockquote>
</li>
<li>
<p>VS打开项目</p>
<blockquote>
<br>
<center>

<br>
<div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">打开项目</div>
</center>
<br>
</blockquote>
</li>
<li>
<p>在vs2015中生成INSTALL。右键点击“生成”：</p>
<blockquote>
<br>
<center>

<br>
<div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">生成eigen库</div>
</center>
<br>
</blockquote>
</li>
<li>
<p>将生成后的库添加到环境变量中：</p>
<blockquote>
<br>
<center>

<br>
<div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">添加环境变量</div>
</center>
<br>
</blockquote>
</li>
</ul>
<p><strong>ubuntu</strong></p>
<ul>
<li>从官网下载安装包(下载tar.gz格式)：</li>
</ul>
<blockquote>
<p><a href="https://eigen.tuxfamily.org/index.php?title=Main_Page"target="_blank" rel="external nofollow noopener noreferrer">https://eigen.tuxfamily.org/index.php?title=Main_Page<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>
<br></p>
<center>

<br>
<div style="color:orange; border-bottom: 1px solid #d9d9d9; display: inline-block; color: #999; padding: 2px;">下载Eigen</div>
</center>
<br>
</blockquote>
<ul>
<li>
<p>Eigen包安装
下载完成后，对压缩包进行解压后（解压在home目录即可），运行如下命令进行安装：</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">cd</span> <span class="o">(</span>eigen文件夹中<span class="o">)</span>
</span></span><span class="line"><span class="cl">mkdir build
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake ..
</span></span><span class="line"><span class="cl">sudo make install</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>将eigen文件复制到本地调用文件夹中（/usr/include）</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo cp -r /usr/local/include/eigen3 /usr/include</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="三linear_algebra项目举例">三、Linear_algebra项目举例</h2>
<p><strong>项目结构</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── CMakeLists.txt
</span></span><span class="line"><span class="cl">└── linear_algebra.cpp</span></span></code></pre></td></tr></table>
</div>
</div><p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter2/05"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter2/05<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<p><strong>CMakeLists.txt文件</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">eigen_tensor</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_EXTENSIONS</span> <span class="n">OFF</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="n">ON</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">find_package</span><span class="p">(</span><span class="n">Eigen3</span> <span class="mf">3.4</span> <span class="n">REQUIRED</span> <span class="n">CONFIG</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">CheckCXXCompilerFlag</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">check_cxx_compiler_flag</span><span class="p">(</span><span class="s">&#34;-march=native&#34;</span> <span class="n">_march_native_works</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">check_cxx_compiler_flag</span><span class="p">(</span><span class="s">&#34;-xHost&#34;</span> <span class="n">_xhost_works</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">_CXX_FLAGS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">_march_native_works</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Using processor&#39;s vector instructions (-march=native compiler flag set)&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">_CXX_FLAGS</span> <span class="s">&#34;-march=native&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">elseif</span><span class="p">(</span><span class="n">_xhost_works</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Using processor&#39;s vector instructions (-xHost compiler flag set)&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">_CXX_FLAGS</span> <span class="s">&#34;-xHost&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;No suitable compiler flag found for vectorization&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">linear</span><span class="o">-</span><span class="n">algebra</span><span class="o">-</span><span class="n">unoptimized</span> <span class="n">linear_algebra</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">linear</span><span class="o">-</span><span class="n">algebra</span><span class="o">-</span><span class="n">unoptimized</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span> <span class="n">Eigen3</span><span class="o">::</span><span class="n">Eigen</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">linear</span><span class="o">-</span><span class="n">algebra</span> <span class="n">linear_algebra</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_compile_options</span><span class="p">(</span><span class="n">linear</span><span class="o">-</span><span class="n">algebra</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span> <span class="err">$</span><span class="p">{</span><span class="n">_CXX_FLAGS</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">target_link_libraries</span><span class="p">(</span><span class="n">linear</span><span class="o">-</span><span class="n">algebra</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span> <span class="n">Eigen3</span><span class="o">::</span><span class="n">Eigen</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><table><tr><td bgcolor=yellow>```find_package(Eigen3 3.4 REQUIRED CONFIG)```</td></tr></table>
<ul>
<li>
<p><code>find_package</code> 是<code>CMake</code>中的一个命令，<u>用于查找和加载特定的第三方库</u>（例如<code>Eigen3</code>）的<code>CMake</code>配置文件。</p>
</li>
<li>
<p><code>Eigen3</code> 是一个用于线性代数计算的<code>C++</code>模板库，它提供了矩阵、向量、矢量计算等功能。通过在<code>CMake</code>中使用 <code>find_package(Eigen3 3.4 REQUIRED CONFIG)</code> 命令，告诉<code>CMake</code>去查找<code>Eigen3</code>库，并且要求它的版本至少是<code>3.4</code>。<code>REQUIRED</code> 参数表示如果找不到<code>Eigen3</code>库，<code>CMake</code>将会报错并停止构建。</p>
</li>
<li>
<p><code>CONFIG</code> 参数指示<code>CMake</code>查找<code>Eigen3</code>的<code>CMake</code>配置文件（通常是 <code>Eigen3Config.cmake</code> 或类似名称），其中包含有关库的信息和设置。</p>
</li>
<li>
<p>一旦找到<code>Eigen3</code>库的<code>CMake</code>配置文件，<code>CMake</code>会加载该配置文件并设置相关的变量，例如 <code>EIGEN3_INCLUDE_DIR</code>，其中包含了<code>Eigen3</code>库的头文件路径。在接下来的<code>CMake</code>构建中，你可以使用这些设置的变量来链接和包含<code>Eigen3</code>库。</p>
</li>
</ul>
<table><tr><td bgcolor=yellow>```include(CheckCXXCompilerFlag)```</td></tr></table>
<p>在<code>CMake</code>中，<code>include(CheckCXXCompilerFlag)</code> 是一个用于检查<code>C++</code>编译器标志是否可用的<code>CMake</code>命令。</p>
<p>这个命令的作用是为了检查特定的<code>C++</code>编译器标志是否受支持。在某些情况下，需要根据编译器的不同来启用或禁用一些特性或优化选项。</p>
<p>使用这个命令的一般形式是：</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">include(CheckCXXCompilerFlag &lt;flag&gt;)</span></span></code></pre></td></tr></table>
</div>
</div><p>其中<code>&lt;flag&gt;</code>是你要检查的<code>C++</code>编译器标志，例如<code> -std=c++11</code>、<code>-fPIC</code> 等。</p>
<p>此命令将尝试将指定的编译器标志添加到<code>C++</code>源代码，并编译一个简单的测试程序来检查编译器是否支持该标志。如果支持，那么<code>CMake</code>将定义一个<code>CMake</code>变量，例如 <code>CMAKE_REQUIRED_FLAGS</code> 或 <code>CMAKE_REQUIRED_LIBRARIES</code>，来表示该标志是可用的。</p>
<p>通过这种方式，可以在<code>CMake</code>脚本中根据编译器支持情况进行条件编译或设置不同的选项。</p>
<p>例如，假设我们要检查编译器是否支持<code>C++11</code>标准：</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">include</span><span class="p">(</span><span class="n">CheckCXXCompilerFlag</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">check_cxx_compiler_flag</span><span class="p">(</span><span class="s">&#34;-std=c++11&#34;</span> <span class="n">COMPILER_SUPPORTS_CXX11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">COMPILER_SUPPORTS_CXX11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="cp"># 设置C++11标准
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="n">set</span><span class="p">(</span><span class="n">CMAKE_CXX_STANDARD</span> <span class="mi">11</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;C++11 supported by the compiler.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span> <span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">FATAL_ERROR</span> <span class="s">&#34;C++11 is not supported by the compiler.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span> <span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">check_cxx_compiler_flag</span><span class="p">(</span><span class="s">&#34;-march=native&#34;</span> <span class="n">_march_native_works</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">check_cxx_compiler_flag</span><span class="p">(</span><span class="s">&#34;-xHost&#34;</span> <span class="n">_xhost_works</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">set</span><span class="p">(</span><span class="n">_CXX_FLAGS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">_march_native_works</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Using processor&#39;s vector instructions (-march=native compiler flag set)&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">_CXX_FLAGS</span> <span class="s">&#34;-march=native&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">elseif</span><span class="p">(</span><span class="n">_xhost_works</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Using processor&#39;s vector instructions (-xHost compiler flag set)&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">set</span><span class="p">(</span><span class="n">_CXX_FLAGS</span> <span class="s">&#34;-xHost&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;No suitable compiler flag found for vectorization&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这段<code>CMake</code>代码片段用于检查编译器是否支持特定的矢量指令优化标志，并根据结果设置 <code>_CXX_FLAGS</code> 变量以启用适当的矢量化优化。</p>
<p><code>-march=native</code> 是一个编译器标志，用于告诉编译器根据当前主机的处理器架构来优化生成的机器码。这个标志会让编译器针对当前的 <code>CPU</code> 架构生成最优化的代码，以充分利用处理器的特性和指令集。</p>
<p>例如，在使用 <code>-march=native</code> 标志编译代码时，如果你的计算机的处理器支持 <code>AVX2</code> 指令集，编译器将会针对 <code>AVX</code>2 进行优化。如果运行这个优化过的代码在支持 <code>AVX2</code> 的处理器上，它将能够获得更高的性能。</p>
<p>请注意，使用 <code>-march=native</code> 标志编译代码可能会导致生成的可执行文件在其他不同架构的计算机上运行不正确或不稳定。因此，在分发或共享可执行文件时，最好使用更加通用的编译选项，除非确实需要充分利用特定处理器架构的优化。</p>
<p><code>-xHost</code> 是 <code>Intel</code> 编译器的编译选项，用于指示编译器使用主机处理器支持的最高级别的指令集来优化生成的机器码。</p>
<p>类似于 <code>-march=native</code>，<code>-xHost</code> 也会让编译器根据当前主机的处理器架构来选择最优化的指令集。它会自动根据当前系统的处理器类型来决定使用最高级别的指令集，以充分利用处理器的性能和功能。</p>
<p>然而，与 <code>-march=native</code> 不同的是，<code>-xHost</code> 是特定于 <code>Intel</code> 编译器的选项，而不是在其他编译器中通用的标志。</p>
<p>请注意，与 <code>-march=native</code> 一样，使用 <code>-xHost</code> 也可能会导致生成的可执行文件在其他不同架构的计算机上运行不正确或不稳定，因此在分发或共享可执行文件时需谨慎使用。</p>
<p><strong><font color=red>相关源码</font></strong></p>
<p><strong>linear_algebra.cpp</strong></p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;eigen3/Eigen/Dense&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;chrono&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">EIGEN_DONT_INLINE</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">double</span> <span class="nf">simple_function</span><span class="p">(</span><span class="n">Eigen</span><span class="o">::</span><span class="n">VectorXd</span> <span class="o">&amp;</span><span class="n">va</span><span class="p">,</span> <span class="n">Eigen</span><span class="o">::</span><span class="n">VectorXd</span> <span class="o">&amp;</span><span class="n">vb</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// this simple function computes the dot product of two vectors
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// of course it could be expressed more compactly
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="n">va</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">vb</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">d</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">1000000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">num_repetitions</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// generate two random vectors
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">Eigen</span><span class="o">::</span><span class="n">VectorXd</span> <span class="n">va</span> <span class="o">=</span> <span class="n">Eigen</span><span class="o">::</span><span class="n">VectorXd</span><span class="o">::</span><span class="n">Random</span><span class="p">(</span><span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">Eigen</span><span class="o">::</span><span class="n">VectorXd</span> <span class="n">vb</span> <span class="o">=</span> <span class="n">Eigen</span><span class="o">::</span><span class="n">VectorXd</span><span class="o">::</span><span class="n">Random</span><span class="p">(</span><span class="n">len</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">start</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">system_clock</span><span class="o">::</span><span class="n">now</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_repetitions</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">result</span> <span class="o">=</span> <span class="n">simple_function</span><span class="p">(</span><span class="n">va</span><span class="p">,</span> <span class="n">vb</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">end</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">system_clock</span><span class="o">::</span><span class="n">now</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="n">elapsed_seconds</span> <span class="o">=</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;result: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;elapsed seconds: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">elapsed_seconds</span><span class="p">.</span><span class="n">count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>输出结果</strong></p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">./linear-algebra-unoptimized
</span></span><span class="line"><span class="cl">result: -261.505
</span></span><span class="line"><span class="cl">elapsed seconds: 1.97964
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">./linear-algebra
</span></span><span class="line"><span class="cl">result: -261.505
</span></span><span class="line"><span class="cl">elapsed seconds: 1.05048</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>CMake 笔记 | [11] 检测环境</title><link>https://jianye0428.github.io/posts/cmake_note_11/</link><pubDate>Fri, 26 Jan 2024 09:10:44 +0800</pubDate><author>Jian YE</author><guid>https://jianye0428.github.io/posts/cmake_note_11/</guid><description><![CDATA[<h2 id="一cmake检测环境">一、CMake:检测环境</h2>
<div class="details admonition quote">
    <div class="details-summary admonition-title">
      <i class="icon fa-solid fa-quote-right fa-fw" aria-hidden="true"></i>导言<i class="details-icon fa-solid fa-angle-right fa-fw" aria-hidden="true"></i>
    </div>
    <div class="details-content">
      <div class="admonition-content"><strong>通过前面几篇的学习，我们掌握<code>CMake</code>以及与<code>C++</code>相关的基本知识。尽管<code>CMake</code>跨平台，但有时源代码并不是完全可移植。为了使得我们的源代码能够跨平台、操作系统和编译器，根据平台不同的方式配置和/或构建代码是在构建项目过程中必不可少的环节。</strong></div>
    </div>
  </div>
<h2 id="二检测操作系统">二、检测操作系统</h2>
<p><code>CMake</code>是一组跨平台工具。在实际的开发过程中，我们需要操作系统相关的CMake代码，会根据操作系统启用条件编译，或者在可用或必要时使用特定于编译器的扩展。</p>
<p>这里举个特定示例说明：</p>
<p><code>Windows</code>与<code>Unix</code>系统的文件结构有明显的差异，如将深度学习模型集成于<code>C++</code>开发的软件系统中时，我们想要将深度学习模型(*.pth)拷贝到指定的文件中时：</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C++" data-lang="C++"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">MSVC</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">file</span><span class="p">(</span><span class="n">GLOB</span> <span class="n">MODEL</span> <span class="s">&#34;${CMAKE_SOURCE_DIR}/resource/*.pt&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">add_custom_command</span><span class="p">(</span><span class="n">TARGET</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span> <span class="n">POST_BUILD</span>
</span></span><span class="line"><span class="cl">                     <span class="n">COMMAND</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_COMMAND</span><span class="p">}</span> <span class="o">-</span><span class="n">E</span> <span class="n">copy_if_different</span>
</span></span><span class="line"><span class="cl">                     <span class="err">$</span><span class="p">{</span><span class="n">MODEL</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">                     <span class="err">$</span><span class="o">&lt;</span><span class="nl">TARGET_FILE_DIR</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span><span class="o">&gt;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">elseif</span><span class="p">(</span><span class="n">UNIX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">file</span><span class="p">(</span><span class="n">GLOB</span> <span class="n">MODEL</span> <span class="s">&#34;${CMAKE_SOURCE_DIR}/resource/*.pt&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">file</span><span class="p">(</span><span class="n">COPY</span> <span class="err">$</span><span class="p">{</span><span class="n">MODEL</span><span class="p">}</span> <span class="n">DESTINATION</span> <span class="err">$</span><span class="p">{</span><span class="n">EXECUTE_FILE</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这段<code>CMake</code>代码用于在构建项目后，根据目标平台的不同（<code>Windows</code>或<code>UNIX/Linux</code>），将模型文件复制到输出目录中，以确保运行程序时所需的模型文件（具有<code>.pt</code>扩展名）与可执行文件位于同一目录下。</p>
<p>对于<code>MSVC</code>（<code>Microsoft Visual C++</code>编译器，通常用于<code>Windows</code>平台）：</p>
<ul>
<li>使用<code>file()</code>命令并设置<code>GLOB</code>选项，在<code>CMake</code>源代码目录（<code>${CMAKE_SOURCE_DIR}</code>）下的<code>resource</code>目录中查找所有<code>.pt</code>模型文件。</li>
<li>然后使用<code>add_custom_command()</code>命令将自定义的后期构建命令添加到目标``（<code>${PROJECT_NAME}</code>）中。</li>
<li>自定义命令会将找到的所有<code>.pt</code>模型文件复制到输出目录（<code>$&lt;TARGET_FILE_DIR:${PROJECT_NAME}&gt;</code>）。使用<code>copy_if_different</code>参数确保仅在目标文件与源文件不同或目标目录中不存在时才复制文件。</li>
</ul>
<p>对于<code>UNIX</code>平台（包括<code>Linux</code>）：</p>
<ul>
<li>使用<code>file()</code>命令并设置<code>GLOB</code>选项，在<code>CMake</code>源代码目录（<code>\${CMAKE_SOURCE_DIR}</code>）下的<code>resource</code>目录中查找所有<code>.pt</code>模型文件。</li>
<li>然后使用<code>file()</code>命令并设置<code>COPY</code>选项，将找到的所有<code>.pt</code>模型文件复制到指定的目标目录（<code>${EXECUTE_FILE}</code>）。</li>
</ul>
<p>接下来，我们将通过一个不需要编译任何源代码的示例，演示如何使用<code>CMake</code>检测操作系统。</p>
<p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter2/01"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter2/01<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C++" data-lang="C++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">os_test</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">CMAKE_SYSTEM_NAME</span> <span class="n">STREQUAL</span> <span class="s">&#34;Linux&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Configuring on/for Linux&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">elseif</span><span class="p">(</span><span class="n">CMAKE_SYSTEM_NAME</span> <span class="n">STREQUAL</span> <span class="s">&#34;Darwin&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Configuring on/for macOs&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">elseif</span><span class="p">(</span><span class="n">CMAKE_SYSTEM_NAME</span> <span class="n">STREQUAL</span> <span class="s">&#34;Windows&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Configuring on/for Windows&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">elseif</span><span class="p">(</span><span class="n">CMAKE_SYSTEM_NAME</span> <span class="n">STREQUAL</span> <span class="s">&#34;AIX&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Configuring on/for IBM AIX&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Configuring on/for ${CMAKE_SYSTEM_NAME}&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>输出结果</strong></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">-- The C compiler identification is GNU 9.4.0
</span></span><span class="line"><span class="cl">-- The CXX compiler identification is GNU 9.4.0
</span></span><span class="line"><span class="cl">-- Check <span class="k">for</span> working C compiler: /usr/bin/cc
</span></span><span class="line"><span class="cl">-- Check <span class="k">for</span> working C compiler: /usr/bin/cc -- works
</span></span><span class="line"><span class="cl">-- Detecting C compiler ABI info
</span></span><span class="line"><span class="cl">-- Detecting C compiler ABI info - <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Detecting C compile features
</span></span><span class="line"><span class="cl">-- Detecting C compile features - <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Check <span class="k">for</span> working CXX compiler: /usr/bin/c++
</span></span><span class="line"><span class="cl">-- Check <span class="k">for</span> working CXX compiler: /usr/bin/c++ -- works
</span></span><span class="line"><span class="cl">-- Detecting CXX compiler ABI info
</span></span><span class="line"><span class="cl">-- Detecting CXX compiler ABI info - <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Detecting CXX compile features
</span></span><span class="line"><span class="cl">-- Detecting CXX compile features - <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Configuring on/for Linux
</span></span><span class="line"><span class="cl">-- Configuring <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Generating <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Build files have been written to: /home/jiangli/repo/tutorials/cmake-tutorial/chapter2/01/build</span></span></code></pre></td></tr></table>
</div>
</div><p><code>CMake</code>为目标操作系统定义了<code>CMAKE_SYSTEM_NAME</code>，因此不需要使用定制命令、工具或脚本来查询此信息。然后，可以使用此变量的值实现特定于操作系统的条件和解决方案。</p>
<ul>
<li>在<code>macOS</code>上<code>CMAKE_SYSTEM_NAME</code>为<code>Darwin</code>。</li>
<li>在<code>Linux和Windows</code>上，<code>CMAKE_SYSTEM_NAME</code>分别为<code>Linux</code>和<code>Windows</code>。我们了解了如何在特定的操作系统上执行特定的<code>CMake</code>代码。当然，应该尽量减少这种定制化行为，以便简化迁移到新平台的过程。</li>
</ul>
<p>注意：为了最小化从一个平台转移到另一个平台时的成本，应该避免直接使用<code>Shell</code>命令，还应该避免<code>显式的路径分隔符</code>(<code>Linux</code>和<code>macOS</code>上的前斜杠和<code>Windows</code>上的后斜杠)。<code>CMake</code>代码中只使用前斜杠作为路径分隔符，<code>CMake</code>将自动将它们转换为所涉及的操作系统环境。</p>
<h2 id="三处理与编译器相关的源代码">三、处理与编译器相关的源代码</h2>
<p>为了可移植性，我们尽量避免去编写新代码，但遇到有依赖的情况我们也要去解决，特别是当使用历史代码或处理编译器依赖工具。</p>
<p>项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter2/02"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter2/02<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">hello_os</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span> <span class="n">hello_os</span><span class="p">.</span><span class="n">cpp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">CMAKE_SYSTEM_NAME</span> <span class="n">STREQUAL</span> <span class="s">&#34;Linux&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">target_compile_definitions</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span> <span class="n">PUBLIC</span> <span class="s">&#34;IS_LINUX&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">CMAKE_SYSTEM_NAME</span> <span class="n">STREQUAL</span> <span class="s">&#34;Darwin&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">target_compile_definitions</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span> <span class="n">PUBLIC</span> <span class="s">&#34;IS_MACOS&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">CMAKE_SYSTEM_NAME</span> <span class="n">STREQUAL</span> <span class="s">&#34;Windows&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">target_compile_definitions</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span> <span class="n">PUBLIC</span> <span class="s">&#34;IS_WINDOWS&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>通过<code>target_compile_definitions()</code>命令向目标（<code>hello_os</code>）添加预定义宏<code>IS_LINUX</code>、<code>IS_MACOS</code>或者<code>IS_WINDOWS</code>，该宏在编译过程中将生效。</p>
<p><code>target_compile_definitions</code>会将将定义限制于一个特定的目标，以及通过<code>PRIVATE</code>|<code>PUBLIC</code>|<code>INTERFACE</code>限定符，限制这些定义可见性:</p>
<ul>
<li><code>PRIVATE</code>，编译定义将只应用于给定的目标，而不应用于相关的其他目标。</li>
<li><code>INTERFACE</code>，对给定目标的编译定义将只应用于使用它的目标。</li>
<li><code>PUBLIC</code>，编译定义将应用于给定的目标和使用它的所有其他目标。</li>
</ul>
<p>当然，在<code>C++</code>中，可以直接使用预定义的宏来识别不同的平台和操作系统。这些预定义的宏是由编译器或操作系统提供的，可以在源代码中使用它们来编写平台相关的代码。以下是一些常用的平台识别宏：</p>
<ul>
<li><code>__APPLE__</code>：在苹果（<code>Apple</code>）平台（例如 <code>macOS</code> 和 <code>iOS</code>）上定义。</li>
<li><code>__linux__</code>：在<code>Linux</code>平台上定义。</li>
<li><code>_WIN32</code>：在<code>32</code>位<code>Windows</code>操作系统上定义。</li>
<li><code>_WIN64</code>：在<code>64</code>位<code>Windows</code>操作系统上定义。</li>
<li><code>_MSC_VER</code>：在使用<code>Microsoft Visual C++</code>编译器时定义，表示编译器的版本号。</li>
<li><code>__GNUC__</code>：在使用<code>GNU</code>编译器（例如<code>g++</code>）时定义，表示编译器的版本号。</li>
</ul>
<p><strong>hello_os.cpp</strong></p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">HelloOS</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">HelloOS</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">HelloOS</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="cp">#ifdef IS_WINDOWS
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&#34;Hello from Windows!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cp">#elif IS_LINUX
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&#34;Hello from Linux!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cp">#elif IS_MACOS
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&#34;Hello from macOS!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cp">#else
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&#34;Hello from an unknown system!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>Windows</code>系统上，将看到来自<code>Windows</code>的<code>Hello</code>。其他操作系统将产生不同的输出。</p>
<h2 id="四检测与处理器体系结构">四、检测与处理器体系结构</h2>
<p>19世纪70年代，出现的<code>64位</code>整数运算和本世纪初出现的用于个人计算机的<code>64位寻址</code>，扩大了内存寻址范围，开发商投入了大量资源来移植为<code>32位</code>体系结构硬编码，以支持<code>64位寻址</code>。虽然，避免显式硬编码的方式非常明智，但需要在使用<code>CMake</code>配置的代码中适应硬编码限制。
项目地址：</p>
<blockquote>
<p><a href="https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter2/03"target="_blank" rel="external nofollow noopener noreferrer">https://gitee.com/jiangli01/tutorials/tree/master/cmake-tutorial/chapter2/03<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C++" data-lang="C++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">arch_dependent</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">arch_dependent</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># 检查空指针类型的大小
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">if</span><span class="p">(</span><span class="n">CMAKE_SIZEOF_VOID_P</span> <span class="n">EQUAL</span> <span class="mi">8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">target_compile_definitions</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">PUBLIC</span> <span class="s">&#34;IS_64_BIT_ARCH&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Target is 64 bits&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">target_compile_definitions</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">PUBLIC</span> <span class="s">&#34;IS_32_BIT_ARCH&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;Target is 32 bits&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp"># 通过定义目标编译定义，让预处理器了解主机处理器架构
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">if</span><span class="p">(</span><span class="n">CMAKE_HOST_SYSTEM_PROCESSOR</span> <span class="n">MATCHES</span> <span class="s">&#34;i386&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;i386 architecture detected&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">elseif</span><span class="p">(</span><span class="n">CMAKE_HOST_SYSTEM_PROCESSOR</span> <span class="n">MATCHES</span> <span class="s">&#34;i686&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;i686 architecture detected&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">elseif</span><span class="p">(</span><span class="n">CMAKE_HOST_SYSTEM_PROCESSOR</span> <span class="n">MATCHES</span> <span class="s">&#34;x86_64&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;x86_64 architecture detected&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;host processor architecture is unknown&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_compile_definitions</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">PUBLIC</span> <span class="s">&#34;ARCHITECTURE=${CMAKE_HOST_SYSTEM_PROCESSOR}&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>CMake</code>定义了<code>CMAKE_HOST_SYSTEM_PROCESSOR</code>变量，以包含当前运行的处理器的名称。可以设置为<code>i386</code>、<code>i686</code>、<code>x86_64</code>、<code>AMD64</code>等等，当然，这取决于当前的<code>CPU</code>。</p>
<p><code>CMAKE_SIZEOF_VOID_P</code>为<code>void指针</code>的大小。可以在<code>CMake</code>配置时进行查询，以便修改目标或目标编译定义。可以基于检测到的主机处理器体系结构，使用预处理器定义，确定需要编译的分支源代码。</p>
<p>当然，编写新代码时应该避免这种依赖，但在处理遗留代码或交叉编译时，这种依赖是有用的。</p>
<p>注意：使用<code>CMAKE_SIZEOF_VOID_P</code>是检查当前<code>CPU</code>是否具有<code>32位</code>或<code>64位</code>架构的唯一“真正”可移植的方法。</p>
<p><strong>arch_dependent.cpp</strong></p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-C++" data-lang="C++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define STRINGIFY(x) #x
</span></span></span><span class="line"><span class="cl"><span class="cp">#define TOSTRING(x) STRINGIFY(x)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">ArchInfo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ArchInfo</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">ArchInfo</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">arch_info</span><span class="p">(</span><span class="n">TOSTRING</span><span class="p">(</span><span class="n">ARCHITECTURE</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">arch_info</span> <span class="o">+=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&#34; architecture.  &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cp">#ifdef IS_32_BIT_ARCH
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="k">return</span> <span class="n">arch_info</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&#34;Compiled on a 32 bit host processor.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cp">#elif IS_64_BIT_ARCH
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="k">return</span> <span class="n">arch_info</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&#34;Compiled on a 64 bit host processor.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cp">#else
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="k">return</span> <span class="n">arch_info</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&#34;Neither 32 not 64 bit, puzzling ...&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>输出结果</strong></p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir build
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> build
</span></span><span class="line"><span class="cl">cmake ..
</span></span><span class="line"><span class="cl">-- The CXX compiler identification is GNU 9.4.0
</span></span><span class="line"><span class="cl">-- Check <span class="k">for</span> working CXX compiler: /usr/bin/c++
</span></span><span class="line"><span class="cl">-- Check <span class="k">for</span> working CXX compiler: /usr/bin/c++ -- works
</span></span><span class="line"><span class="cl">-- Detecting CXX compiler ABI info
</span></span><span class="line"><span class="cl">-- Detecting CXX compiler ABI info - <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Detecting CXX compile features
</span></span><span class="line"><span class="cl">-- Detecting CXX compile features - <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Target is <span class="m">64</span> bits
</span></span><span class="line"><span class="cl">-- x86_64 architecture detected
</span></span><span class="line"><span class="cl">-- Configuring <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Generating <span class="k">done</span>
</span></span><span class="line"><span class="cl">-- Build files have been written to: /home/jiangli/repo/tutorials/cmake-tutorial/chapter2/03/build
</span></span><span class="line"><span class="cl">make
</span></span><span class="line"><span class="cl">Scanning dependencies of target arch_dependent
</span></span><span class="line"><span class="cl"><span class="o">[</span> 50%<span class="o">]</span> Building CXX object CMakeFiles/arch_dependent.dir/arch_dependent.cpp.o
</span></span><span class="line"><span class="cl"><span class="o">[</span>100%<span class="o">]</span> Linking CXX executable arch_dependent
</span></span><span class="line"><span class="cl"><span class="o">[</span>100%<span class="o">]</span> Built target arch_dependent
</span></span><span class="line"><span class="cl">./arch_dependent
</span></span><span class="line"><span class="cl">x86_64 architecture.  Compiled on a <span class="m">64</span> bit host processor.</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="五附录">五、附录</h2>
<p>除了<code>CMAKE_HOST_SYSTEM_PROCESSOR</code>, <code>CMake</code>还定义了<code>CMAKE_SYSTEM_PROCESSOR</code>变量。前者包含当前运行的<code>CPU</code>在<code>CMake</code>的名称，而后者将包含当前正在为其构建的CPU的名称。这是一个细微的差别，在交叉编译时起着非常重要的作用。</p>
<p>另一种让<code>CMake</code>检测主机处理器体系结构，是使用<code>C</code>或<code>C++</code>中定义的符号，结合<code>CMake</code>的<code>try_run</code>函数:</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#if defined(__i386) || defined(__i386__) || defined(_M_IX86)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="cp">#error cmake_arch i386
</span></span></span><span class="line"><span class="cl"><span class="cp">#elif defined(__x86_64) || defined(__x86_64__) || defined(__amd64) || defined(_M_X64)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="cp">#error cmake_arch x86_64
</span></span></span><span class="line"><span class="cl"><span class="cp">#endif</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这种策略也是检测目标处理器体系结构的推荐策略，因为<code>CMake</code>似乎没有提供可移植的内在解决方案。</p>
<p>另一种选择，将只使用<code>CMake</code>，完全不使用预处理器，代价是为每种情况设置不同的源文件，然后使用<code>target_source</code>命令将其设置为可执行目标<code>arch_dependent</code>依赖的源文件:</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="n">arch</span><span class="o">-</span><span class="n">dependent</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">CMAKE_HOST_SYSTEM_PROCESSOR</span> <span class="n">MATCHES</span> <span class="s">&#34;i386&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;i386 architecture detected&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">target_sources</span><span class="p">(</span><span class="n">arch_dependent</span>
</span></span><span class="line"><span class="cl">        <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">        <span class="n">arch_dependent_i386</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">elseif</span><span class="p">(</span><span class="n">CMAKE_HOST_SYSTEM_PROCESSOR</span> <span class="n">MATCHES</span> <span class="s">&#34;i686&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;i686 architecture detected&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">target_sources</span><span class="p">(</span><span class="n">arch_dependent</span>
</span></span><span class="line"><span class="cl">        <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">            <span class="n">arch_dependent_i686</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">elseif</span><span class="p">(</span><span class="n">CMAKE_HOST_SYSTEM_PROCESSOR</span> <span class="n">MATCHES</span> <span class="s">&#34;x86_64&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;x86_64 architecture detected&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">target_sources</span><span class="p">(</span><span class="n">arch_dependent</span>
</span></span><span class="line"><span class="cl">        <span class="n">PRIVATE</span>
</span></span><span class="line"><span class="cl">            <span class="n">arch_dependent_x86_64</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span><span class="p">(</span><span class="n">STATUS</span> <span class="s">&#34;host processor architecture is unknown&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">endif</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这种方法，显然需要对现有项目进行更多的工作，因为源文件需要分离。此外，不同源文件之间的代码复制肯定也会成为问题。</p>
<h2 id="六检测处理器指令集">六、检测处理器指令集</h2>
<p><code>CMake</code>可以检测主机处理器支持的指令集。这个功能是较新版本添加到<code>CMake</code>中的，需要<code>CMake 3.10</code>或更高版本。检测到的主机系统信息，可用于设置相应的编译器标志，或实现可选的源代码编译，或根据主机系统生成源代码。</p>
<p>将使用<code>config.h.in</code>生成<code>config.h</code>文件。config.h.in如下:</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#ifndef CONFIG_HEADER_IN_H
</span></span></span><span class="line"><span class="cl"><span class="cp">#define CONFIG_HEADER_IN_H
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define NUMBER_OF_LOGICAL_CORES @_NUMBER_OF_LOGICAL_CORES@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define NUMBER_OF_PHYSICAL_CORES @_NUMBER_OF_PHYSICAL_CORES@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define TOTAL_VIRTUAL_MEMORY @_TOTAL_VIRTUAL_MEMORY@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define AVAILABLE_VIRTUAL_MEMORY @_AVAILABLE_VIRTUAL_MEMORY@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define TOTAL_PHYSICAL_MEMORY @_TOTAL_PHYSICAL_MEMORY@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define AVAILABLE_PHYSICAL_MEMORY @_AVAILABLE_PHYSICAL_MEMORY@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define IS_64BIT @_IS_64BIT@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HAS_FPU @_HAS_FPU@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HAS_MMX @_HAS_MMX@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HAS_MMX_PLUS @_HAS_MMX_PLUS@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HAS_SSE @_HAS_SSE@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HAS_SSE2 @_HAS_SSE2@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HAS_SSE_FP @_HAS_SSE_FP@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HAS_SSE_MMX @_HAS_SSE_MMX@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HAS_AMD_3DNOW @_HAS_AMD_3DNOW@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HAS_AMD_3DNOW_PLUS @_HAS_AMD_3DNOW_PLUS@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HAS_IA64 @_HAS_IA64@
</span></span></span><span class="line"><span class="cl"><span class="cp">#define OS_NAME &#34;@_OS_NAME@&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define OS_RELEASE &#34;@_OS_RELEASE@&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define OS_VERSION &#34;@_OS_VERSION@&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define OS_PLATFORM &#34;@_OS_PLATFORM@&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif </span><span class="c1">// ! CONFIG_HEADER_IN_H
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>CMakeLists.txt</strong></p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">cmake_minimum_required</span><span class="p">(</span><span class="n">VERSION</span> <span class="mf">3.10</span> <span class="n">FATAL_ERROR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">project</span><span class="p">(</span><span class="n">progressor_info</span> <span class="n">LANGUAGES</span> <span class="n">CXX</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">add_executable</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_sources</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span> <span class="err">$</span><span class="p">{</span><span class="n">CMAKE_SOURCE_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">processor_info</span><span class="p">.</span><span class="n">cpp</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">target_include_directories</span><span class="p">(</span><span class="err">$</span><span class="p">{</span><span class="n">PROJECT_NAME</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">PRIVATE</span> <span class="err">$</span><span class="p">{</span><span class="n">PROJECT_BINARY_DIR</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">foreach</span><span class="p">(</span><span class="n">key</span>
</span></span><span class="line"><span class="cl">  <span class="n">IN</span> <span class="n">ITEMS</span>
</span></span><span class="line"><span class="cl">    <span class="n">NUMBER_OF_LOGICAL_CORES</span>
</span></span><span class="line"><span class="cl">    <span class="n">NUMBER_OF_PHYSICAL_CORES</span>
</span></span><span class="line"><span class="cl">    <span class="n">TOTAL_VIRTUAL_MEMORY</span>
</span></span><span class="line"><span class="cl">    <span class="n">AVAILABLE_VIRTUAL_MEMORY</span>
</span></span><span class="line"><span class="cl">    <span class="n">TOTAL_PHYSICAL_MEMORY</span>
</span></span><span class="line"><span class="cl">    <span class="n">AVAILABLE_PHYSICAL_MEMORY</span>
</span></span><span class="line"><span class="cl">    <span class="n">IS_64BIT</span>
</span></span><span class="line"><span class="cl">    <span class="n">HAS_FPU</span>
</span></span><span class="line"><span class="cl">    <span class="n">HAS_MMX</span>
</span></span><span class="line"><span class="cl">    <span class="n">HAS_MMX_PLUS</span>
</span></span><span class="line"><span class="cl">    <span class="n">HAS_SSE</span>
</span></span><span class="line"><span class="cl">    <span class="n">HAS_SSE2</span>
</span></span><span class="line"><span class="cl">    <span class="n">HAS_SSE_FP</span>
</span></span><span class="line"><span class="cl">    <span class="n">HAS_SSE_MMX</span>
</span></span><span class="line"><span class="cl">    <span class="n">HAS_AMD_3DNOW</span>
</span></span><span class="line"><span class="cl">    <span class="n">HAS_AMD_3DNOW_PLUS</span>
</span></span><span class="line"><span class="cl">    <span class="n">HAS_IA64</span>
</span></span><span class="line"><span class="cl">    <span class="n">OS_NAME</span>
</span></span><span class="line"><span class="cl">    <span class="n">OS_RELEASE</span>
</span></span><span class="line"><span class="cl">    <span class="n">OS_VERSION</span>
</span></span><span class="line"><span class="cl">    <span class="n">OS_PLATFORM</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">cmake_host_system_information</span><span class="p">(</span><span class="n">RESULT</span> <span class="n">_</span><span class="err">$</span><span class="p">{</span><span class="n">key</span><span class="p">}</span> <span class="n">QUERY</span> <span class="err">$</span><span class="p">{</span><span class="n">key</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">endforeach</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">configure_file</span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">h</span><span class="p">.</span><span class="n">in</span> <span class="n">config</span><span class="p">.</span><span class="n">h</span> <span class="err">@</span><span class="n">ONLY</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>foreach</code>循环会查询多个键值，并定义相应的变量。<code>cmake_host_system_information</code>查询运行<code>CMake</code>的主机系统的系统信息。本例中，对每个键使用了一个函数调用。然后，使用这些变量来配置<code>config.h.in</code>中的占位符，输入并生成<code>config.h</code>。</p>
<p>此配置使用<code>configure_file</code>命令完成。最后，<code>config.h</code>包含在<code>processor_info.cpp</code>中。编译后，它将把值打印到屏幕上。</p>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">target_include_directories(${PROJECT_NAME}
</span></span><span class="line"><span class="cl">  PRIVATE ${PROJECT_BINARY_DIR}
</span></span><span class="line"><span class="cl">)</span></span></code></pre></td></tr></table>
</div>
</div><p>这将生成的可执行文件链接到可执行文件所在的文件夹中。</p>
<p>我们编译后，<code>config.h</code>将于<code>build</code>中生成，在本机中生成的内容如下：</p>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#ifndef CONFIG_HEADER_IN_H
</span></span></span><span class="line"><span class="cl"><span class="cp">#define CONFIG_HEADER_IN_H
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define NUMBER_OF_LOGICAL_CORES 16
</span></span></span><span class="line"><span class="cl"><span class="cp">#define NUMBER_OF_PHYSICAL_CORES 16
</span></span></span><span class="line"><span class="cl"><span class="cp">#define TOTAL_VIRTUAL_MEMORY 2047
</span></span></span><span class="line"><span class="cl"><span class="cp">#define AVAILABLE_VIRTUAL_MEMORY 2047
</span></span></span><span class="line"><span class="cl"><span class="cp">#define TOTAL_PHYSICAL_MEMORY 7903
</span></span></span><span class="line"><span class="cl"><span class="cp">#define AVAILABLE_PHYSICAL_MEMORY 6007
</span></span></span><span class="line"><span class="cl"><span class="cp">#define IS_64BIT 1
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HAS_FPU 1
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HAS_MMX 1
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HAS_MMX_PLUS 0
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HAS_SSE 1
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HAS_SSE2 1
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HAS_SSE_FP 0
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HAS_SSE_MMX 0
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HAS_AMD_3DNOW 0
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HAS_AMD_3DNOW_PLUS 0
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HAS_IA64 0
</span></span></span><span class="line"><span class="cl"><span class="cp">#define OS_NAME &#34;Linux&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define OS_RELEASE &#34;5.15.0-78-generic&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define OS_VERSION &#34;#85~20.04.1-Ubuntu SMP Mon Jul 17 09:42:39 UTC 2023&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define OS_PLATFORM &#34;x86_64&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif </span><span class="c1">// ! CONFIG_HEADER_IN_H
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>processor_info.cpp</strong></p>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;config.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Number of logical cores: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">NUMBER_OF_LOGICAL_CORES</span>
</span></span><span class="line"><span class="cl">            <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Number of physical cores: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">NUMBER_OF_PHYSICAL_CORES</span>
</span></span><span class="line"><span class="cl">            <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Total virtual memory in megabytes: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">TOTAL_VIRTUAL_MEMORY</span>
</span></span><span class="line"><span class="cl">            <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Available virtual memory in megabytes: &#34;</span>
</span></span><span class="line"><span class="cl">            <span class="o">&lt;&lt;</span> <span class="n">AVAILABLE_VIRTUAL_MEMORY</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Total physical memory in megabytes: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">TOTAL_PHYSICAL_MEMORY</span>
</span></span><span class="line"><span class="cl">            <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Available physical memory in megabytes: &#34;</span>
</span></span><span class="line"><span class="cl">            <span class="o">&lt;&lt;</span> <span class="n">AVAILABLE_PHYSICAL_MEMORY</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Processor is 64Bit: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">IS_64BIT</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Processor has floating point unit: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">HAS_FPU</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Processor supports MMX instructions: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">HAS_MMX</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Processor supports Ext. MMX instructions: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">HAS_MMX_PLUS</span>
</span></span><span class="line"><span class="cl">            <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Processor supports SSE instructions: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">HAS_SSE</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Processor supports SSE2 instructions: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">HAS_SSE2</span>
</span></span><span class="line"><span class="cl">            <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Processor supports SSE FP instructions: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">HAS_SSE_FP</span>
</span></span><span class="line"><span class="cl">            <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Processor supports SSE MMX instructions: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">HAS_SSE_MMX</span>
</span></span><span class="line"><span class="cl">            <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Processor supports 3DNow instructions: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">HAS_AMD_3DNOW</span>
</span></span><span class="line"><span class="cl">            <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Processor supports 3DNow+ instructions: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">HAS_AMD_3DNOW_PLUS</span>
</span></span><span class="line"><span class="cl">            <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;IA64 processor emulating x86 : &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">HAS_IA64</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;OS name: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">OS_NAME</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;OS sub-type: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">OS_RELEASE</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;OS build ID: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">OS_VERSION</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;OS platform: &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">OS_PLATFORM</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item></channel></rss>